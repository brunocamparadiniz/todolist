{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").ChunkLoadingType} ChunkLoadingType */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @type {WeakMap<Compiler, Set<ChunkLoadingType>>} */\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar enabledTypes = new WeakMap();\nvar getEnabledTypes = function getEnabledTypes(compiler) {\n  var set = enabledTypes.get(compiler);\n  if (set === undefined) {\n    set = new Set();\n    enabledTypes.set(compiler, set);\n  }\n  return set;\n};\nvar EnableChunkLoadingPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {ChunkLoadingType} type library type that should be available\n   */\n  function EnableChunkLoadingPlugin(type) {\n    _classCallCheck(this, EnableChunkLoadingPlugin);\n    this.type = type;\n  }\n\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @param {ChunkLoadingType} type type of library\n   * @returns {void}\n   */\n  _createClass(EnableChunkLoadingPlugin, [{\n    key: \"apply\",\n    value:\n    /**\n     * Apply the plugin\n     * @param {Compiler} compiler the compiler instance\n     * @returns {void}\n     */\n    function apply(compiler) {\n      var type = this.type;\n\n      // Only enable once\n      var enabled = getEnabledTypes(compiler);\n      if (enabled.has(type)) return;\n      enabled.add(type);\n      if (typeof type === \"string\") {\n        switch (type) {\n          case \"jsonp\":\n            {\n              var JsonpChunkLoadingPlugin = require(\"../web/JsonpChunkLoadingPlugin\");\n              new JsonpChunkLoadingPlugin().apply(compiler);\n              break;\n            }\n          case \"import-scripts\":\n            {\n              var ImportScriptsChunkLoadingPlugin = require(\"../webworker/ImportScriptsChunkLoadingPlugin\");\n              new ImportScriptsChunkLoadingPlugin().apply(compiler);\n              break;\n            }\n          case \"require\":\n            {\n              //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n              var CommonJsChunkLoadingPlugin = require(\"../node/CommonJsChunkLoadingPlugin\");\n              new CommonJsChunkLoadingPlugin({\n                asyncChunkLoading: false\n              }).apply(compiler);\n              break;\n            }\n          case \"async-node\":\n            {\n              //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n              var _CommonJsChunkLoadingPlugin = require(\"../node/CommonJsChunkLoadingPlugin\");\n              new _CommonJsChunkLoadingPlugin({\n                asyncChunkLoading: true\n              }).apply(compiler);\n              break;\n            }\n          case \"import\":\n            {\n              var ModuleChunkLoadingPlugin = require(\"../esm/ModuleChunkLoadingPlugin\");\n              new ModuleChunkLoadingPlugin().apply(compiler);\n              break;\n            }\n          case \"universal\":\n            // TODO implement universal chunk loading\n            throw new Error(\"Universal Chunk Loading is not implemented yet\");\n          default:\n            throw new Error(\"Unsupported chunk loading type \".concat(type, \".\\nPlugins which provide custom chunk loading types must call EnableChunkLoadingPlugin.setEnabled(compiler, type) to disable this error.\"));\n        }\n      } else {\n        // TODO support plugin instances here\n        // apply them to the compiler\n      }\n    }\n  }], [{\n    key: \"setEnabled\",\n    value: function setEnabled(compiler, type) {\n      getEnabledTypes(compiler).add(type);\n    }\n\n    /**\n     * @param {Compiler} compiler the compiler instance\n     * @param {ChunkLoadingType} type type of library\n     * @returns {void}\n     */\n  }, {\n    key: \"checkEnabled\",\n    value: function checkEnabled(compiler, type) {\n      if (!getEnabledTypes(compiler).has(type)) {\n        throw new Error(\"Chunk loading type \\\"\".concat(type, \"\\\" is not enabled. \") + \"EnableChunkLoadingPlugin need to be used to enable this type of chunk loading. \" + 'This usually happens through the \"output.enabledChunkLoadingTypes\" option. ' + 'If you are using a function as entry which sets \"chunkLoading\", you need to add all potential chunk loading types to \"output.enabledChunkLoadingTypes\". ' + \"These types are enabled: \" + Array.from(getEnabledTypes(compiler)).join(\", \"));\n      }\n    }\n  }]);\n  return EnableChunkLoadingPlugin;\n}();\nmodule.exports = EnableChunkLoadingPlugin;","map":{"version":3,"names":["enabledTypes","WeakMap","getEnabledTypes","compiler","set","get","undefined","Set","EnableChunkLoadingPlugin","type","enabled","has","add","JsonpChunkLoadingPlugin","require","apply","ImportScriptsChunkLoadingPlugin","CommonJsChunkLoadingPlugin","asyncChunkLoading","ModuleChunkLoadingPlugin","Error","Array","from","join","module","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/javascript/EnableChunkLoadingPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").ChunkLoadingType} ChunkLoadingType */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @type {WeakMap<Compiler, Set<ChunkLoadingType>>} */\nconst enabledTypes = new WeakMap();\n\nconst getEnabledTypes = compiler => {\n\tlet set = enabledTypes.get(compiler);\n\tif (set === undefined) {\n\t\tset = new Set();\n\t\tenabledTypes.set(compiler, set);\n\t}\n\treturn set;\n};\n\nclass EnableChunkLoadingPlugin {\n\t/**\n\t * @param {ChunkLoadingType} type library type that should be available\n\t */\n\tconstructor(type) {\n\t\tthis.type = type;\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the compiler instance\n\t * @param {ChunkLoadingType} type type of library\n\t * @returns {void}\n\t */\n\tstatic setEnabled(compiler, type) {\n\t\tgetEnabledTypes(compiler).add(type);\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the compiler instance\n\t * @param {ChunkLoadingType} type type of library\n\t * @returns {void}\n\t */\n\tstatic checkEnabled(compiler, type) {\n\t\tif (!getEnabledTypes(compiler).has(type)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Chunk loading type \"${type}\" is not enabled. ` +\n\t\t\t\t\t\"EnableChunkLoadingPlugin need to be used to enable this type of chunk loading. \" +\n\t\t\t\t\t'This usually happens through the \"output.enabledChunkLoadingTypes\" option. ' +\n\t\t\t\t\t'If you are using a function as entry which sets \"chunkLoading\", you need to add all potential chunk loading types to \"output.enabledChunkLoadingTypes\". ' +\n\t\t\t\t\t\"These types are enabled: \" +\n\t\t\t\t\tArray.from(getEnabledTypes(compiler)).join(\", \")\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst { type } = this;\n\n\t\t// Only enable once\n\t\tconst enabled = getEnabledTypes(compiler);\n\t\tif (enabled.has(type)) return;\n\t\tenabled.add(type);\n\n\t\tif (typeof type === \"string\") {\n\t\t\tswitch (type) {\n\t\t\t\tcase \"jsonp\": {\n\t\t\t\t\tconst JsonpChunkLoadingPlugin = require(\"../web/JsonpChunkLoadingPlugin\");\n\t\t\t\t\tnew JsonpChunkLoadingPlugin().apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"import-scripts\": {\n\t\t\t\t\tconst ImportScriptsChunkLoadingPlugin = require(\"../webworker/ImportScriptsChunkLoadingPlugin\");\n\t\t\t\t\tnew ImportScriptsChunkLoadingPlugin().apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"require\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst CommonJsChunkLoadingPlugin = require(\"../node/CommonJsChunkLoadingPlugin\");\n\t\t\t\t\tnew CommonJsChunkLoadingPlugin({\n\t\t\t\t\t\tasyncChunkLoading: false\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"async-node\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst CommonJsChunkLoadingPlugin = require(\"../node/CommonJsChunkLoadingPlugin\");\n\t\t\t\t\tnew CommonJsChunkLoadingPlugin({\n\t\t\t\t\t\tasyncChunkLoading: true\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"import\": {\n\t\t\t\t\tconst ModuleChunkLoadingPlugin = require(\"../esm/ModuleChunkLoadingPlugin\");\n\t\t\t\t\tnew ModuleChunkLoadingPlugin().apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"universal\":\n\t\t\t\t\t// TODO implement universal chunk loading\n\t\t\t\t\tthrow new Error(\"Universal Chunk Loading is not implemented yet\");\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Unsupported chunk loading type ${type}.\nPlugins which provide custom chunk loading types must call EnableChunkLoadingPlugin.setEnabled(compiler, type) to disable this error.`);\n\t\t\t}\n\t\t} else {\n\t\t\t// TODO support plugin instances here\n\t\t\t// apply them to the compiler\n\t\t}\n\t}\n}\n\nmodule.exports = EnableChunkLoadingPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}