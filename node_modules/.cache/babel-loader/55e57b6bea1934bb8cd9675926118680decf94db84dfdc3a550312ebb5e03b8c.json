{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar RuntimeGlobals = require(\"../RuntimeGlobals\");\nvar RuntimeModule = require(\"../RuntimeModule\");\nvar Template = require(\"../Template\");\n\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\nvar ChunkPrefetchTriggerRuntimeModule = /*#__PURE__*/function (_RuntimeModule) {\n  _inherits(ChunkPrefetchTriggerRuntimeModule, _RuntimeModule);\n  var _super = _createSuper(ChunkPrefetchTriggerRuntimeModule);\n  /**\n   * @param {Record<string|number, (string|number)[]>} chunkMap map from chunk to\n   */\n  function ChunkPrefetchTriggerRuntimeModule(chunkMap) {\n    var _this;\n    _classCallCheck(this, ChunkPrefetchTriggerRuntimeModule);\n    _this = _super.call(this, \"chunk prefetch trigger\", RuntimeModule.STAGE_TRIGGER);\n    _this.chunkMap = chunkMap;\n    return _this;\n  }\n\n  /**\n   * @returns {string} runtime code\n   */\n  _createClass(ChunkPrefetchTriggerRuntimeModule, [{\n    key: \"generate\",\n    value: function generate() {\n      var chunkMap = this.chunkMap;\n      var runtimeTemplate = this.compilation.runtimeTemplate;\n      var body = [\"var chunks = chunkToChildrenMap[chunkId];\", \"Array.isArray(chunks) && chunks.map(\".concat(RuntimeGlobals.prefetchChunk, \");\")];\n      return Template.asString([Template.asString([\"var chunkToChildrenMap = \".concat(JSON.stringify(chunkMap, null, \"\\t\"), \";\"), \"\".concat(RuntimeGlobals.ensureChunkHandlers, \".prefetch = \").concat(runtimeTemplate.expressionFunction(\"Promise.all(promises).then(\".concat(runtimeTemplate.basicFunction(\"\", body), \")\"), \"chunkId, promises\"), \";\")])]);\n    }\n  }]);\n  return ChunkPrefetchTriggerRuntimeModule;\n}(RuntimeModule);\nmodule.exports = ChunkPrefetchTriggerRuntimeModule;","map":{"version":3,"names":["RuntimeGlobals","require","RuntimeModule","Template","ChunkPrefetchTriggerRuntimeModule","chunkMap","STAGE_TRIGGER","runtimeTemplate","compilation","body","prefetchChunk","asString","JSON","stringify","ensureChunkHandlers","expressionFunction","basicFunction","module","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/prefetch/ChunkPrefetchTriggerRuntimeModule.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst RuntimeModule = require(\"../RuntimeModule\");\nconst Template = require(\"../Template\");\n\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n\nclass ChunkPrefetchTriggerRuntimeModule extends RuntimeModule {\n\t/**\n\t * @param {Record<string|number, (string|number)[]>} chunkMap map from chunk to\n\t */\n\tconstructor(chunkMap) {\n\t\tsuper(`chunk prefetch trigger`, RuntimeModule.STAGE_TRIGGER);\n\t\tthis.chunkMap = chunkMap;\n\t}\n\n\t/**\n\t * @returns {string} runtime code\n\t */\n\tgenerate() {\n\t\tconst { chunkMap } = this;\n\t\tconst { runtimeTemplate } = this.compilation;\n\t\tconst body = [\n\t\t\t\"var chunks = chunkToChildrenMap[chunkId];\",\n\t\t\t`Array.isArray(chunks) && chunks.map(${RuntimeGlobals.prefetchChunk});`\n\t\t];\n\t\treturn Template.asString([\n\t\t\tTemplate.asString([\n\t\t\t\t`var chunkToChildrenMap = ${JSON.stringify(chunkMap, null, \"\\t\")};`,\n\t\t\t\t`${\n\t\t\t\t\tRuntimeGlobals.ensureChunkHandlers\n\t\t\t\t}.prefetch = ${runtimeTemplate.expressionFunction(\n\t\t\t\t\t`Promise.all(promises).then(${runtimeTemplate.basicFunction(\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\tbody\n\t\t\t\t\t)})`,\n\t\t\t\t\t\"chunkId, promises\"\n\t\t\t\t)};`\n\t\t\t])\n\t\t]);\n\t}\n}\n\nmodule.exports = ChunkPrefetchTriggerRuntimeModule;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,YAAY;;AAAC;AAAA;AAAA;AAAA;AAEb,IAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACnD,IAAMC,aAAa,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AACjD,IAAME,QAAQ,GAAGF,OAAO,CAAC,aAAa,CAAC;;AAEvC;AAAA,IAEMG,iCAAiC;EAAA;EAAA;EACtC;AACD;AACA;EACC,2CAAYC,QAAQ,EAAE;IAAA;IAAA;IACrB,oDAAgCH,aAAa,CAACI,aAAa;IAC3D,MAAKD,QAAQ,GAAGA,QAAQ;IAAC;EAC1B;;EAEA;AACD;AACA;EAFC;IAAA;IAAA,OAGA,oBAAW;MACV,IAAQA,QAAQ,GAAK,IAAI,CAAjBA,QAAQ;MAChB,IAAQE,eAAe,GAAK,IAAI,CAACC,WAAW,CAApCD,eAAe;MACvB,IAAME,IAAI,GAAG,CACZ,2CAA2C,gDACJT,cAAc,CAACU,aAAa,QACnE;MACD,OAAOP,QAAQ,CAACQ,QAAQ,CAAC,CACxBR,QAAQ,CAACQ,QAAQ,CAAC,oCACWC,IAAI,CAACC,SAAS,CAACR,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,kBAE/DL,cAAc,CAACc,mBAAmB,yBACpBP,eAAe,CAACQ,kBAAkB,sCAClBR,eAAe,CAACS,aAAa,CAC1D,EAAE,EACFP,IAAI,CACJ,QACD,mBAAmB,CACnB,OACD,CAAC,CACF,CAAC;IACH;EAAC;EAAA;AAAA,EAjC8CP,aAAa;AAoC7De,MAAM,CAACC,OAAO,GAAGd,iCAAiC"},"metadata":{},"sourceType":"script","externalDependencies":[]}