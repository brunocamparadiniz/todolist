{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _toArray = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/toArray.js\").default;\nvar _slicedToArray = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _wrapNativeSuper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _require = require(\"./util/hints\"),\n  stringHints = _require.stringHints,\n  numberHints = _require.numberHints;\n/** @typedef {import(\"json-schema\").JSONSchema6} JSONSchema6 */\n\n/** @typedef {import(\"json-schema\").JSONSchema7} JSONSchema7 */\n\n/** @typedef {import(\"./validate\").Schema} Schema */\n\n/** @typedef {import(\"./validate\").ValidationErrorConfiguration} ValidationErrorConfiguration */\n\n/** @typedef {import(\"./validate\").PostFormatter} PostFormatter */\n\n/** @typedef {import(\"./validate\").SchemaUtilErrorObject} SchemaUtilErrorObject */\n\n/** @enum {number} */\n\nvar SPECIFICITY = {\n  type: 1,\n  not: 1,\n  oneOf: 1,\n  anyOf: 1,\n  if: 1,\n  enum: 1,\n  const: 1,\n  instanceof: 1,\n  required: 2,\n  pattern: 2,\n  patternRequired: 2,\n  format: 2,\n  formatMinimum: 2,\n  formatMaximum: 2,\n  minimum: 2,\n  exclusiveMinimum: 2,\n  maximum: 2,\n  exclusiveMaximum: 2,\n  multipleOf: 2,\n  uniqueItems: 2,\n  contains: 2,\n  minLength: 2,\n  maxLength: 2,\n  minItems: 2,\n  maxItems: 2,\n  minProperties: 2,\n  maxProperties: 2,\n  dependencies: 2,\n  propertyNames: 2,\n  additionalItems: 2,\n  additionalProperties: 2,\n  absolutePath: 2\n};\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} array\n * @param {(item: SchemaUtilErrorObject) => number} fn\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\nfunction filterMax(array, fn) {\n  var evaluatedMax = array.reduce(function (max, item) {\n    return Math.max(max, fn(item));\n  }, 0);\n  return array.filter(function (item) {\n    return fn(item) === evaluatedMax;\n  });\n}\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} children\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\nfunction filterChildren(children) {\n  var newChildren = children;\n  newChildren = filterMax(newChildren,\n  /**\n   *\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  function (error) {\n    return error.dataPath ? error.dataPath.length : 0;\n  });\n  newChildren = filterMax(newChildren,\n  /**\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  function (error) {\n    return SPECIFICITY[/** @type {keyof typeof SPECIFICITY} */\n    error.keyword] || 2;\n  });\n  return newChildren;\n}\n/**\n * Find all children errors\n * @param {Array<SchemaUtilErrorObject>} children\n * @param {Array<string>} schemaPaths\n * @return {number} returns index of first child\n */\n\nfunction findAllChildren(children, schemaPaths) {\n  var i = children.length - 1;\n  var predicate =\n  /**\n   * @param {string} schemaPath\n   * @returns {boolean}\n   */\n  function predicate(schemaPath) {\n    return children[i].schemaPath.indexOf(schemaPath) !== 0;\n  };\n  while (i > -1 && !schemaPaths.every(predicate)) {\n    if (children[i].keyword === \"anyOf\" || children[i].keyword === \"oneOf\") {\n      var refs = extractRefs(children[i]);\n      var childrenStart = findAllChildren(children.slice(0, i), refs.concat(children[i].schemaPath));\n      i = childrenStart - 1;\n    } else {\n      i -= 1;\n    }\n  }\n  return i + 1;\n}\n/**\n * Extracts all refs from schema\n * @param {SchemaUtilErrorObject} error\n * @return {Array<string>}\n */\n\nfunction extractRefs(error) {\n  var schema = error.schema;\n  if (!Array.isArray(schema)) {\n    return [];\n  }\n  return schema.map(function (_ref) {\n    var $ref = _ref.$ref;\n    return $ref;\n  }).filter(function (s) {\n    return s;\n  });\n}\n/**\n * Groups children by their first level parent (assuming that error is root)\n * @param {Array<SchemaUtilErrorObject>} children\n * @return {Array<SchemaUtilErrorObject>}\n */\n\nfunction groupChildrenByFirstChild(children) {\n  var result = [];\n  var i = children.length - 1;\n  while (i > 0) {\n    var child = children[i];\n    if (child.keyword === \"anyOf\" || child.keyword === \"oneOf\") {\n      var refs = extractRefs(child);\n      var childrenStart = findAllChildren(children.slice(0, i), refs.concat(child.schemaPath));\n      if (childrenStart !== i) {\n        result.push(Object.assign({}, child, {\n          children: children.slice(childrenStart, i)\n        }));\n        i = childrenStart;\n      } else {\n        result.push(child);\n      }\n    } else {\n      result.push(child);\n    }\n    i -= 1;\n  }\n  if (i === 0) {\n    result.push(children[i]);\n  }\n  return result.reverse();\n}\n/**\n * @param {string} str\n * @param {string} prefix\n * @returns {string}\n */\n\nfunction indent(str, prefix) {\n  return str.replace(/\\n(?!$)/g, \"\\n\".concat(prefix));\n}\n/**\n * @param {Schema} schema\n * @returns {schema is (Schema & {not: Schema})}\n */\n\nfunction hasNotInSchema(schema) {\n  return !!schema.not;\n}\n/**\n * @param {Schema} schema\n * @return {Schema}\n */\n\nfunction findFirstTypedSchema(schema) {\n  if (hasNotInSchema(schema)) {\n    return findFirstTypedSchema(schema.not);\n  }\n  return schema;\n}\n/**\n * @param {Schema} schema\n * @return {boolean}\n */\n\nfunction canApplyNot(schema) {\n  var typedSchema = findFirstTypedSchema(schema);\n  return likeNumber(typedSchema) || likeInteger(typedSchema) || likeString(typedSchema) || likeNull(typedSchema) || likeBoolean(typedSchema);\n}\n/**\n * @param {any} maybeObj\n * @returns {boolean}\n */\n\nfunction isObject(maybeObj) {\n  return typeof maybeObj === \"object\" && maybeObj !== null;\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\nfunction likeNumber(schema) {\n  return schema.type === \"number\" || typeof schema.minimum !== \"undefined\" || typeof schema.exclusiveMinimum !== \"undefined\" || typeof schema.maximum !== \"undefined\" || typeof schema.exclusiveMaximum !== \"undefined\" || typeof schema.multipleOf !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\nfunction likeInteger(schema) {\n  return schema.type === \"integer\" || typeof schema.minimum !== \"undefined\" || typeof schema.exclusiveMinimum !== \"undefined\" || typeof schema.maximum !== \"undefined\" || typeof schema.exclusiveMaximum !== \"undefined\" || typeof schema.multipleOf !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\nfunction likeString(schema) {\n  return schema.type === \"string\" || typeof schema.minLength !== \"undefined\" || typeof schema.maxLength !== \"undefined\" || typeof schema.pattern !== \"undefined\" || typeof schema.format !== \"undefined\" || typeof schema.formatMinimum !== \"undefined\" || typeof schema.formatMaximum !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\nfunction likeBoolean(schema) {\n  return schema.type === \"boolean\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\nfunction likeArray(schema) {\n  return schema.type === \"array\" || typeof schema.minItems === \"number\" || typeof schema.maxItems === \"number\" || typeof schema.uniqueItems !== \"undefined\" || typeof schema.items !== \"undefined\" || typeof schema.additionalItems !== \"undefined\" || typeof schema.contains !== \"undefined\";\n}\n/**\n * @param {Schema & {patternRequired?: Array<string>}} schema\n * @returns {boolean}\n */\n\nfunction likeObject(schema) {\n  return schema.type === \"object\" || typeof schema.minProperties !== \"undefined\" || typeof schema.maxProperties !== \"undefined\" || typeof schema.required !== \"undefined\" || typeof schema.properties !== \"undefined\" || typeof schema.patternProperties !== \"undefined\" || typeof schema.additionalProperties !== \"undefined\" || typeof schema.dependencies !== \"undefined\" || typeof schema.propertyNames !== \"undefined\" || typeof schema.patternRequired !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\nfunction likeNull(schema) {\n  return schema.type === \"null\";\n}\n/**\n * @param {string} type\n * @returns {string}\n */\n\nfunction getArticle(type) {\n  if (/^[aeiou]/i.test(type)) {\n    return \"an\";\n  }\n  return \"a\";\n}\n/**\n * @param {Schema=} schema\n * @returns {string}\n */\n\nfunction getSchemaNonTypes(schema) {\n  if (!schema) {\n    return \"\";\n  }\n  if (!schema.type) {\n    if (likeNumber(schema) || likeInteger(schema)) {\n      return \" | should be any non-number\";\n    }\n    if (likeString(schema)) {\n      return \" | should be any non-string\";\n    }\n    if (likeArray(schema)) {\n      return \" | should be any non-array\";\n    }\n    if (likeObject(schema)) {\n      return \" | should be any non-object\";\n    }\n  }\n  return \"\";\n}\n/**\n * @param {Array<string>} hints\n * @returns {string}\n */\n\nfunction formatHints(hints) {\n  return hints.length > 0 ? \"(\".concat(hints.join(\", \"), \")\") : \"\";\n}\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @returns {string[]}\n */\n\nfunction getHints(schema, logic) {\n  if (likeNumber(schema) || likeInteger(schema)) {\n    return numberHints(schema, logic);\n  } else if (likeString(schema)) {\n    return stringHints(schema, logic);\n  }\n  return [];\n}\nvar ValidationError = /*#__PURE__*/function (_Error) {\n  _inherits(ValidationError, _Error);\n  var _super = _createSuper(ValidationError);\n  /**\n   * @param {Array<SchemaUtilErrorObject>} errors\n   * @param {Schema} schema\n   * @param {ValidationErrorConfiguration} configuration\n   */\n  function ValidationError(errors, schema) {\n    var _this;\n    var configuration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _classCallCheck(this, ValidationError);\n    _this = _super.call(this);\n    /** @type {string} */\n\n    _this.name = \"ValidationError\";\n    /** @type {Array<SchemaUtilErrorObject>} */\n\n    _this.errors = errors;\n    /** @type {Schema} */\n\n    _this.schema = schema;\n    var headerNameFromSchema;\n    var baseDataPathFromSchema;\n    if (schema.title && (!configuration.name || !configuration.baseDataPath)) {\n      var splittedTitleFromSchema = schema.title.match(/^(.+) (.+)$/);\n      if (splittedTitleFromSchema) {\n        if (!configuration.name) {\n          var _splittedTitleFromSch = _slicedToArray(splittedTitleFromSchema, 2);\n          headerNameFromSchema = _splittedTitleFromSch[1];\n        }\n        if (!configuration.baseDataPath) {\n          var _splittedTitleFromSch2 = _slicedToArray(splittedTitleFromSchema, 3);\n          baseDataPathFromSchema = _splittedTitleFromSch2[2];\n        }\n      }\n    }\n    /** @type {string} */\n\n    _this.headerName = configuration.name || headerNameFromSchema || \"Object\";\n    /** @type {string} */\n\n    _this.baseDataPath = configuration.baseDataPath || baseDataPathFromSchema || \"configuration\";\n    /** @type {PostFormatter | null} */\n\n    _this.postFormatter = configuration.postFormatter || null;\n    var header = \"Invalid \".concat(_this.baseDataPath, \" object. \").concat(_this.headerName, \" has been initialized using \").concat(getArticle(_this.baseDataPath), \" \").concat(_this.baseDataPath, \" object that does not match the API schema.\\n\");\n    /** @type {string} */\n\n    _this.message = \"\".concat(header).concat(_this.formatValidationErrors(errors));\n    Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);\n    return _this;\n  }\n  /**\n   * @param {string} path\n   * @returns {Schema}\n   */\n  _createClass(ValidationError, [{\n    key: \"getSchemaPart\",\n    value: function getSchemaPart(path) {\n      var newPath = path.split(\"/\");\n      var schemaPart = this.schema;\n      for (var i = 1; i < newPath.length; i++) {\n        var inner = schemaPart[/** @type {keyof Schema} */\n        newPath[i]];\n        if (!inner) {\n          break;\n        }\n        schemaPart = inner;\n      }\n      return schemaPart;\n    }\n    /**\n     * @param {Schema} schema\n     * @param {boolean} logic\n     * @param {Array<Object>} prevSchemas\n     * @returns {string}\n     */\n  }, {\n    key: \"formatSchema\",\n    value: function formatSchema(schema) {\n      var _this2 = this;\n      var logic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var prevSchemas = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      var newLogic = logic;\n      var formatInnerSchema =\n      /**\n       *\n       * @param {Object} innerSchema\n       * @param {boolean=} addSelf\n       * @returns {string}\n       */\n      function formatInnerSchema(innerSchema, addSelf) {\n        if (!addSelf) {\n          return _this2.formatSchema(innerSchema, newLogic, prevSchemas);\n        }\n        if (prevSchemas.includes(innerSchema)) {\n          return \"(recursive)\";\n        }\n        return _this2.formatSchema(innerSchema, newLogic, prevSchemas.concat(schema));\n      };\n      if (hasNotInSchema(schema) && !likeObject(schema)) {\n        if (canApplyNot(schema.not)) {\n          newLogic = !logic;\n          return formatInnerSchema(schema.not);\n        }\n        var needApplyLogicHere = !schema.not.not;\n        var prefix = logic ? \"\" : \"non \";\n        newLogic = !logic;\n        return needApplyLogicHere ? prefix + formatInnerSchema(schema.not) : formatInnerSchema(schema.not);\n      }\n      if ( /** @type {Schema & {instanceof: string | Array<string>}} */\n      schema.instanceof) {\n        var value = /** @type {Schema & {instanceof: string | Array<string>}} */\n        schema.instanceof;\n        var values = !Array.isArray(value) ? [value] : value;\n        return values.map(\n        /**\n         * @param {string} item\n         * @returns {string}\n         */\n        function (item) {\n          return item === \"Function\" ? \"function\" : item;\n        }).join(\" | \");\n      }\n      if (schema.enum) {\n        return (/** @type {Array<any>} */\n          schema.enum.map(function (item) {\n            return JSON.stringify(item);\n          }).join(\" | \")\n        );\n      }\n      if (typeof schema.const !== \"undefined\") {\n        return JSON.stringify(schema.const);\n      }\n      if (schema.oneOf) {\n        return (/** @type {Array<Schema>} */\n          schema.oneOf.map(function (item) {\n            return formatInnerSchema(item, true);\n          }).join(\" | \")\n        );\n      }\n      if (schema.anyOf) {\n        return (/** @type {Array<Schema>} */\n          schema.anyOf.map(function (item) {\n            return formatInnerSchema(item, true);\n          }).join(\" | \")\n        );\n      }\n      if (schema.allOf) {\n        return (/** @type {Array<Schema>} */\n          schema.allOf.map(function (item) {\n            return formatInnerSchema(item, true);\n          }).join(\" & \")\n        );\n      }\n      if ( /** @type {JSONSchema7} */\n      schema.if) {\n        var ifValue = /** @type {JSONSchema7} */\n          schema.if,\n          thenValue = /** @type {JSONSchema7} */\n          schema.then,\n          elseValue = /** @type {JSONSchema7} */\n          schema.else;\n        return \"\".concat(ifValue ? \"if \".concat(formatInnerSchema(ifValue)) : \"\").concat(thenValue ? \" then \".concat(formatInnerSchema(thenValue)) : \"\").concat(elseValue ? \" else \".concat(formatInnerSchema(elseValue)) : \"\");\n      }\n      if (schema.$ref) {\n        return formatInnerSchema(this.getSchemaPart(schema.$ref), true);\n      }\n      if (likeNumber(schema) || likeInteger(schema)) {\n        var _getHints = getHints(schema, logic),\n          _getHints2 = _toArray(_getHints),\n          type = _getHints2[0],\n          hints = _getHints2.slice(1);\n        var str = \"\".concat(type).concat(hints.length > 0 ? \" \".concat(formatHints(hints)) : \"\");\n        return logic ? str : hints.length > 0 ? \"non-\".concat(type, \" | \").concat(str) : \"non-\".concat(type);\n      }\n      if (likeString(schema)) {\n        var _getHints3 = getHints(schema, logic),\n          _getHints4 = _toArray(_getHints3),\n          _type = _getHints4[0],\n          _hints = _getHints4.slice(1);\n        var _str = \"\".concat(_type).concat(_hints.length > 0 ? \" \".concat(formatHints(_hints)) : \"\");\n        return logic ? _str : _str === \"string\" ? \"non-string\" : \"non-string | \".concat(_str);\n      }\n      if (likeBoolean(schema)) {\n        return \"\".concat(logic ? \"\" : \"non-\", \"boolean\");\n      }\n      if (likeArray(schema)) {\n        // not logic already applied in formatValidationError\n        newLogic = true;\n        var _hints2 = [];\n        if (typeof schema.minItems === \"number\") {\n          _hints2.push(\"should not have fewer than \".concat(schema.minItems, \" item\").concat(schema.minItems > 1 ? \"s\" : \"\"));\n        }\n        if (typeof schema.maxItems === \"number\") {\n          _hints2.push(\"should not have more than \".concat(schema.maxItems, \" item\").concat(schema.maxItems > 1 ? \"s\" : \"\"));\n        }\n        if (schema.uniqueItems) {\n          _hints2.push(\"should not have duplicate items\");\n        }\n        var hasAdditionalItems = typeof schema.additionalItems === \"undefined\" || Boolean(schema.additionalItems);\n        var items = \"\";\n        if (schema.items) {\n          if (Array.isArray(schema.items) && schema.items.length > 0) {\n            items = \"\".concat( /** @type {Array<Schema>} */\n            schema.items.map(function (item) {\n              return formatInnerSchema(item);\n            }).join(\", \"));\n            if (hasAdditionalItems) {\n              if (schema.additionalItems && isObject(schema.additionalItems) && Object.keys(schema.additionalItems).length > 0) {\n                _hints2.push(\"additional items should be \".concat(formatInnerSchema(schema.additionalItems)));\n              }\n            }\n          } else if (schema.items && Object.keys(schema.items).length > 0) {\n            // \"additionalItems\" is ignored\n            items = \"\".concat(formatInnerSchema(schema.items));\n          } else {\n            // Fallback for empty `items` value\n            items = \"any\";\n          }\n        } else {\n          // \"additionalItems\" is ignored\n          items = \"any\";\n        }\n        if (schema.contains && Object.keys(schema.contains).length > 0) {\n          _hints2.push(\"should contains at least one \".concat(this.formatSchema(schema.contains), \" item\"));\n        }\n        return \"[\".concat(items).concat(hasAdditionalItems ? \", ...\" : \"\", \"]\").concat(_hints2.length > 0 ? \" (\".concat(_hints2.join(\", \"), \")\") : \"\");\n      }\n      if (likeObject(schema)) {\n        // not logic already applied in formatValidationError\n        newLogic = true;\n        var _hints3 = [];\n        if (typeof schema.minProperties === \"number\") {\n          _hints3.push(\"should not have fewer than \".concat(schema.minProperties, \" \").concat(schema.minProperties > 1 ? \"properties\" : \"property\"));\n        }\n        if (typeof schema.maxProperties === \"number\") {\n          _hints3.push(\"should not have more than \".concat(schema.maxProperties, \" \").concat(schema.minProperties && schema.minProperties > 1 ? \"properties\" : \"property\"));\n        }\n        if (schema.patternProperties && Object.keys(schema.patternProperties).length > 0) {\n          var patternProperties = Object.keys(schema.patternProperties);\n          _hints3.push(\"additional property names should match pattern\".concat(patternProperties.length > 1 ? \"s\" : \"\", \" \").concat(patternProperties.map(function (pattern) {\n            return JSON.stringify(pattern);\n          }).join(\" | \")));\n        }\n        var properties = schema.properties ? Object.keys(schema.properties) : [];\n        var required = schema.required ? schema.required : [];\n        var allProperties = _toConsumableArray(new Set( /** @type {Array<string>} */\n        [].concat(required).concat(properties)));\n        var objectStructure = allProperties.map(function (property) {\n          var isRequired = required.includes(property); // Some properties need quotes, maybe we should add check\n          // Maybe we should output type of property (`foo: string`), but it is looks very unreadable\n\n          return \"\".concat(property).concat(isRequired ? \"\" : \"?\");\n        }).concat(typeof schema.additionalProperties === \"undefined\" || Boolean(schema.additionalProperties) ? schema.additionalProperties && isObject(schema.additionalProperties) ? [\"<key>: \".concat(formatInnerSchema(schema.additionalProperties))] : [\"…\"] : []).join(\", \");\n        var dependencies = /** @type {Schema & {patternRequired?: Array<string>;}} */\n          schema.dependencies,\n          propertyNames = /** @type {Schema & {patternRequired?: Array<string>;}} */\n          schema.propertyNames,\n          patternRequired = /** @type {Schema & {patternRequired?: Array<string>;}} */\n          schema.patternRequired;\n        if (dependencies) {\n          Object.keys(dependencies).forEach(function (dependencyName) {\n            var dependency = dependencies[dependencyName];\n            if (Array.isArray(dependency)) {\n              _hints3.push(\"should have \".concat(dependency.length > 1 ? \"properties\" : \"property\", \" \").concat(dependency.map(function (dep) {\n                return \"'\".concat(dep, \"'\");\n              }).join(\", \"), \" when property '\").concat(dependencyName, \"' is present\"));\n            } else {\n              _hints3.push(\"should be valid according to the schema \".concat(formatInnerSchema(dependency), \" when property '\").concat(dependencyName, \"' is present\"));\n            }\n          });\n        }\n        if (propertyNames && Object.keys(propertyNames).length > 0) {\n          _hints3.push(\"each property name should match format \".concat(JSON.stringify(schema.propertyNames.format)));\n        }\n        if (patternRequired && patternRequired.length > 0) {\n          _hints3.push(\"should have property matching pattern \".concat(patternRequired.map(\n          /**\n           * @param {string} item\n           * @returns {string}\n           */\n          function (item) {\n            return JSON.stringify(item);\n          })));\n        }\n        return \"object {\".concat(objectStructure ? \" \".concat(objectStructure, \" \") : \"\", \"}\").concat(_hints3.length > 0 ? \" (\".concat(_hints3.join(\", \"), \")\") : \"\");\n      }\n      if (likeNull(schema)) {\n        return \"\".concat(logic ? \"\" : \"non-\", \"null\");\n      }\n      if (Array.isArray(schema.type)) {\n        // not logic already applied in formatValidationError\n        return \"\".concat(schema.type.join(\" | \"));\n      } // Fallback for unknown keywords\n      // not logic already applied in formatValidationError\n\n      /* istanbul ignore next */\n\n      return JSON.stringify(schema, null, 2);\n    }\n    /**\n     * @param {Schema=} schemaPart\n     * @param {(boolean | Array<string>)=} additionalPath\n     * @param {boolean=} needDot\n     * @param {boolean=} logic\n     * @returns {string}\n     */\n  }, {\n    key: \"getSchemaPartText\",\n    value: function getSchemaPartText(schemaPart, additionalPath) {\n      var needDot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var logic = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      if (!schemaPart) {\n        return \"\";\n      }\n      if (Array.isArray(additionalPath)) {\n        for (var i = 0; i < additionalPath.length; i++) {\n          /** @type {Schema | undefined} */\n          var inner = schemaPart[/** @type {keyof Schema} */\n          additionalPath[i]];\n          if (inner) {\n            // eslint-disable-next-line no-param-reassign\n            schemaPart = inner;\n          } else {\n            break;\n          }\n        }\n      }\n      while (schemaPart.$ref) {\n        // eslint-disable-next-line no-param-reassign\n        schemaPart = this.getSchemaPart(schemaPart.$ref);\n      }\n      var schemaText = \"\".concat(this.formatSchema(schemaPart, logic)).concat(needDot ? \".\" : \"\");\n      if (schemaPart.description) {\n        schemaText += \"\\n-> \".concat(schemaPart.description);\n      }\n      if (schemaPart.link) {\n        schemaText += \"\\n-> Read more at \".concat(schemaPart.link);\n      }\n      return schemaText;\n    }\n    /**\n     * @param {Schema=} schemaPart\n     * @returns {string}\n     */\n  }, {\n    key: \"getSchemaPartDescription\",\n    value: function getSchemaPartDescription(schemaPart) {\n      if (!schemaPart) {\n        return \"\";\n      }\n      while (schemaPart.$ref) {\n        // eslint-disable-next-line no-param-reassign\n        schemaPart = this.getSchemaPart(schemaPart.$ref);\n      }\n      var schemaText = \"\";\n      if (schemaPart.description) {\n        schemaText += \"\\n-> \".concat(schemaPart.description);\n      }\n      if (schemaPart.link) {\n        schemaText += \"\\n-> Read more at \".concat(schemaPart.link);\n      }\n      return schemaText;\n    }\n    /**\n     * @param {SchemaUtilErrorObject} error\n     * @returns {string}\n     */\n  }, {\n    key: \"formatValidationError\",\n    value: function formatValidationError(error) {\n      var _this3 = this;\n      var keyword = error.keyword,\n        errorDataPath = error.dataPath;\n      var dataPath = \"\".concat(this.baseDataPath).concat(errorDataPath);\n      switch (keyword) {\n        case \"type\":\n          {\n            var parentSchema = error.parentSchema,\n              params = error.params; // eslint-disable-next-line default-case\n\n            switch ( /** @type {import(\"ajv\").TypeParams} */\n            params.type) {\n              case \"number\":\n                return \"\".concat(dataPath, \" should be a \").concat(this.getSchemaPartText(parentSchema, false, true));\n              case \"integer\":\n                return \"\".concat(dataPath, \" should be an \").concat(this.getSchemaPartText(parentSchema, false, true));\n              case \"string\":\n                return \"\".concat(dataPath, \" should be a \").concat(this.getSchemaPartText(parentSchema, false, true));\n              case \"boolean\":\n                return \"\".concat(dataPath, \" should be a \").concat(this.getSchemaPartText(parentSchema, false, true));\n              case \"array\":\n                return \"\".concat(dataPath, \" should be an array:\\n\").concat(this.getSchemaPartText(parentSchema));\n              case \"object\":\n                return \"\".concat(dataPath, \" should be an object:\\n\").concat(this.getSchemaPartText(parentSchema));\n              case \"null\":\n                return \"\".concat(dataPath, \" should be a \").concat(this.getSchemaPartText(parentSchema, false, true));\n              default:\n                return \"\".concat(dataPath, \" should be:\\n\").concat(this.getSchemaPartText(parentSchema));\n            }\n          }\n        case \"instanceof\":\n          {\n            var _parentSchema = error.parentSchema;\n            return \"\".concat(dataPath, \" should be an instance of \").concat(this.getSchemaPartText(_parentSchema, false, true));\n          }\n        case \"pattern\":\n          {\n            var _params = error.params,\n              _parentSchema2 = error.parentSchema;\n            var pattern = /** @type {import(\"ajv\").PatternParams} */\n            _params.pattern;\n            return \"\".concat(dataPath, \" should match pattern \").concat(JSON.stringify(pattern)).concat(getSchemaNonTypes(_parentSchema2), \".\").concat(this.getSchemaPartDescription(_parentSchema2));\n          }\n        case \"format\":\n          {\n            var _params2 = error.params,\n              _parentSchema3 = error.parentSchema;\n            var format = /** @type {import(\"ajv\").FormatParams} */\n            _params2.format;\n            return \"\".concat(dataPath, \" should match format \").concat(JSON.stringify(format)).concat(getSchemaNonTypes(_parentSchema3), \".\").concat(this.getSchemaPartDescription(_parentSchema3));\n          }\n        case \"formatMinimum\":\n        case \"formatMaximum\":\n          {\n            var _params3 = error.params,\n              _parentSchema4 = error.parentSchema;\n            var comparison = /** @type {import(\"ajv\").ComparisonParams} */\n              _params3.comparison,\n              limit = /** @type {import(\"ajv\").ComparisonParams} */\n              _params3.limit;\n            return \"\".concat(dataPath, \" should be \").concat(comparison, \" \").concat(JSON.stringify(limit)).concat(getSchemaNonTypes(_parentSchema4), \".\").concat(this.getSchemaPartDescription(_parentSchema4));\n          }\n        case \"minimum\":\n        case \"maximum\":\n        case \"exclusiveMinimum\":\n        case \"exclusiveMaximum\":\n          {\n            var _parentSchema5 = error.parentSchema,\n              _params4 = error.params;\n            var _comparison = /** @type {import(\"ajv\").ComparisonParams} */\n              _params4.comparison,\n              _limit = /** @type {import(\"ajv\").ComparisonParams} */\n              _params4.limit;\n            var _getHints5 = getHints( /** @type {Schema} */\n              _parentSchema5, true),\n              _getHints6 = _toArray(_getHints5),\n              hints = _getHints6.slice(1);\n            if (hints.length === 0) {\n              hints.push(\"should be \".concat(_comparison, \" \").concat(_limit));\n            }\n            return \"\".concat(dataPath, \" \").concat(hints.join(\" \")).concat(getSchemaNonTypes(_parentSchema5), \".\").concat(this.getSchemaPartDescription(_parentSchema5));\n          }\n        case \"multipleOf\":\n          {\n            var _params5 = error.params,\n              _parentSchema6 = error.parentSchema;\n            var multipleOf = /** @type {import(\"ajv\").MultipleOfParams} */\n            _params5.multipleOf;\n            return \"\".concat(dataPath, \" should be multiple of \").concat(multipleOf).concat(getSchemaNonTypes(_parentSchema6), \".\").concat(this.getSchemaPartDescription(_parentSchema6));\n          }\n        case \"patternRequired\":\n          {\n            var _params6 = error.params,\n              _parentSchema7 = error.parentSchema;\n            var missingPattern = /** @type {import(\"ajv\").PatternRequiredParams} */\n            _params6.missingPattern;\n            return \"\".concat(dataPath, \" should have property matching pattern \").concat(JSON.stringify(missingPattern)).concat(getSchemaNonTypes(_parentSchema7), \".\").concat(this.getSchemaPartDescription(_parentSchema7));\n          }\n        case \"minLength\":\n          {\n            var _params7 = error.params,\n              _parentSchema8 = error.parentSchema;\n            var _limit2 = /** @type {import(\"ajv\").LimitParams} */\n            _params7.limit;\n            if (_limit2 === 1) {\n              return \"\".concat(dataPath, \" should be a non-empty string\").concat(getSchemaNonTypes(_parentSchema8), \".\").concat(this.getSchemaPartDescription(_parentSchema8));\n            }\n            var length = _limit2 - 1;\n            return \"\".concat(dataPath, \" should be longer than \").concat(length, \" character\").concat(length > 1 ? \"s\" : \"\").concat(getSchemaNonTypes(_parentSchema8), \".\").concat(this.getSchemaPartDescription(_parentSchema8));\n          }\n        case \"minItems\":\n          {\n            var _params8 = error.params,\n              _parentSchema9 = error.parentSchema;\n            var _limit3 = /** @type {import(\"ajv\").LimitParams} */\n            _params8.limit;\n            if (_limit3 === 1) {\n              return \"\".concat(dataPath, \" should be a non-empty array\").concat(getSchemaNonTypes(_parentSchema9), \".\").concat(this.getSchemaPartDescription(_parentSchema9));\n            }\n            return \"\".concat(dataPath, \" should not have fewer than \").concat(_limit3, \" items\").concat(getSchemaNonTypes(_parentSchema9), \".\").concat(this.getSchemaPartDescription(_parentSchema9));\n          }\n        case \"minProperties\":\n          {\n            var _params9 = error.params,\n              _parentSchema10 = error.parentSchema;\n            var _limit4 = /** @type {import(\"ajv\").LimitParams} */\n            _params9.limit;\n            if (_limit4 === 1) {\n              return \"\".concat(dataPath, \" should be a non-empty object\").concat(getSchemaNonTypes(_parentSchema10), \".\").concat(this.getSchemaPartDescription(_parentSchema10));\n            }\n            return \"\".concat(dataPath, \" should not have fewer than \").concat(_limit4, \" properties\").concat(getSchemaNonTypes(_parentSchema10), \".\").concat(this.getSchemaPartDescription(_parentSchema10));\n          }\n        case \"maxLength\":\n          {\n            var _params10 = error.params,\n              _parentSchema11 = error.parentSchema;\n            var _limit5 = /** @type {import(\"ajv\").LimitParams} */\n            _params10.limit;\n            var max = _limit5 + 1;\n            return \"\".concat(dataPath, \" should be shorter than \").concat(max, \" character\").concat(max > 1 ? \"s\" : \"\").concat(getSchemaNonTypes(_parentSchema11), \".\").concat(this.getSchemaPartDescription(_parentSchema11));\n          }\n        case \"maxItems\":\n          {\n            var _params11 = error.params,\n              _parentSchema12 = error.parentSchema;\n            var _limit6 = /** @type {import(\"ajv\").LimitParams} */\n            _params11.limit;\n            return \"\".concat(dataPath, \" should not have more than \").concat(_limit6, \" items\").concat(getSchemaNonTypes(_parentSchema12), \".\").concat(this.getSchemaPartDescription(_parentSchema12));\n          }\n        case \"maxProperties\":\n          {\n            var _params12 = error.params,\n              _parentSchema13 = error.parentSchema;\n            var _limit7 = /** @type {import(\"ajv\").LimitParams} */\n            _params12.limit;\n            return \"\".concat(dataPath, \" should not have more than \").concat(_limit7, \" properties\").concat(getSchemaNonTypes(_parentSchema13), \".\").concat(this.getSchemaPartDescription(_parentSchema13));\n          }\n        case \"uniqueItems\":\n          {\n            var _params13 = error.params,\n              _parentSchema14 = error.parentSchema;\n            var i = /** @type {import(\"ajv\").UniqueItemsParams} */\n            _params13.i;\n            return \"\".concat(dataPath, \" should not contain the item '\").concat(error.data[i], \"' twice\").concat(getSchemaNonTypes(_parentSchema14), \".\").concat(this.getSchemaPartDescription(_parentSchema14));\n          }\n        case \"additionalItems\":\n          {\n            var _params14 = error.params,\n              _parentSchema15 = error.parentSchema;\n            var _limit8 = /** @type {import(\"ajv\").LimitParams} */\n            _params14.limit;\n            return \"\".concat(dataPath, \" should not have more than \").concat(_limit8, \" items\").concat(getSchemaNonTypes(_parentSchema15), \". These items are valid:\\n\").concat(this.getSchemaPartText(_parentSchema15));\n          }\n        case \"contains\":\n          {\n            var _parentSchema16 = error.parentSchema;\n            return \"\".concat(dataPath, \" should contains at least one \").concat(this.getSchemaPartText(_parentSchema16, [\"contains\"]), \" item\").concat(getSchemaNonTypes(_parentSchema16), \".\");\n          }\n        case \"required\":\n          {\n            var _parentSchema17 = error.parentSchema,\n              _params15 = error.params;\n            var missingProperty = /** @type {import(\"ajv\").DependenciesParams} */\n            _params15.missingProperty.replace(/^\\./, \"\");\n            var hasProperty = _parentSchema17 && Boolean( /** @type {Schema} */\n            _parentSchema17.properties && /** @type {Schema} */\n            _parentSchema17.properties[missingProperty]);\n            return \"\".concat(dataPath, \" misses the property '\").concat(missingProperty, \"'\").concat(getSchemaNonTypes(_parentSchema17), \".\").concat(hasProperty ? \" Should be:\\n\".concat(this.getSchemaPartText(_parentSchema17, [\"properties\", missingProperty])) : this.getSchemaPartDescription(_parentSchema17));\n          }\n        case \"additionalProperties\":\n          {\n            var _params16 = error.params,\n              _parentSchema18 = error.parentSchema;\n            var additionalProperty = /** @type {import(\"ajv\").AdditionalPropertiesParams} */\n            _params16.additionalProperty;\n            return \"\".concat(dataPath, \" has an unknown property '\").concat(additionalProperty, \"'\").concat(getSchemaNonTypes(_parentSchema18), \". These properties are valid:\\n\").concat(this.getSchemaPartText(_parentSchema18));\n          }\n        case \"dependencies\":\n          {\n            var _params17 = error.params,\n              _parentSchema19 = error.parentSchema;\n            var property = /** @type {import(\"ajv\").DependenciesParams} */\n              _params17.property,\n              deps = /** @type {import(\"ajv\").DependenciesParams} */\n              _params17.deps;\n            var dependencies = deps.split(\",\").map(\n            /**\n             * @param {string} dep\n             * @returns {string}\n             */\n            function (dep) {\n              return \"'\".concat(dep.trim(), \"'\");\n            }).join(\", \");\n            return \"\".concat(dataPath, \" should have properties \").concat(dependencies, \" when property '\").concat(property, \"' is present\").concat(getSchemaNonTypes(_parentSchema19), \".\").concat(this.getSchemaPartDescription(_parentSchema19));\n          }\n        case \"propertyNames\":\n          {\n            var _params18 = error.params,\n              _parentSchema20 = error.parentSchema,\n              schema = error.schema;\n            var propertyName = /** @type {import(\"ajv\").PropertyNamesParams} */\n            _params18.propertyName;\n            return \"\".concat(dataPath, \" property name '\").concat(propertyName, \"' is invalid\").concat(getSchemaNonTypes(_parentSchema20), \". Property names should be match format \").concat(JSON.stringify(schema.format), \".\").concat(this.getSchemaPartDescription(_parentSchema20));\n          }\n        case \"enum\":\n          {\n            var _parentSchema21 = error.parentSchema;\n            if (_parentSchema21 && /** @type {Schema} */\n            _parentSchema21.enum && /** @type {Schema} */\n            _parentSchema21.enum.length === 1) {\n              return \"\".concat(dataPath, \" should be \").concat(this.getSchemaPartText(_parentSchema21, false, true));\n            }\n            return \"\".concat(dataPath, \" should be one of these:\\n\").concat(this.getSchemaPartText(_parentSchema21));\n          }\n        case \"const\":\n          {\n            var _parentSchema22 = error.parentSchema;\n            return \"\".concat(dataPath, \" should be equal to constant \").concat(this.getSchemaPartText(_parentSchema22, false, true));\n          }\n        case \"not\":\n          {\n            var postfix = likeObject( /** @type {Schema} */\n            error.parentSchema) ? \"\\n\".concat(this.getSchemaPartText(error.parentSchema)) : \"\";\n            var schemaOutput = this.getSchemaPartText(error.schema, false, false, false);\n            if (canApplyNot(error.schema)) {\n              return \"\".concat(dataPath, \" should be any \").concat(schemaOutput).concat(postfix, \".\");\n            }\n            var _schema = error.schema,\n              _parentSchema23 = error.parentSchema;\n            return \"\".concat(dataPath, \" should not be \").concat(this.getSchemaPartText(_schema, false, true)).concat(_parentSchema23 && likeObject(_parentSchema23) ? \"\\n\".concat(this.getSchemaPartText(_parentSchema23)) : \"\");\n          }\n        case \"oneOf\":\n        case \"anyOf\":\n          {\n            var _parentSchema24 = error.parentSchema,\n              children = error.children;\n            if (children && children.length > 0) {\n              if (error.schema.length === 1) {\n                var lastChild = children[children.length - 1];\n                var remainingChildren = children.slice(0, children.length - 1);\n                return this.formatValidationError(Object.assign({}, lastChild, {\n                  children: remainingChildren,\n                  parentSchema: Object.assign({}, _parentSchema24, lastChild.parentSchema)\n                }));\n              }\n              var filteredChildren = filterChildren(children);\n              if (filteredChildren.length === 1) {\n                return this.formatValidationError(filteredChildren[0]);\n              }\n              filteredChildren = groupChildrenByFirstChild(filteredChildren);\n              return \"\".concat(dataPath, \" should be one of these:\\n\").concat(this.getSchemaPartText(_parentSchema24), \"\\nDetails:\\n\").concat(filteredChildren.map(\n              /**\n               * @param {SchemaUtilErrorObject} nestedError\n               * @returns {string}\n               */\n              function (nestedError) {\n                return \" * \".concat(indent(_this3.formatValidationError(nestedError), \"   \"));\n              }).join(\"\\n\"));\n            }\n            return \"\".concat(dataPath, \" should be one of these:\\n\").concat(this.getSchemaPartText(_parentSchema24));\n          }\n        case \"if\":\n          {\n            var _params19 = error.params,\n              _parentSchema25 = error.parentSchema;\n            var failingKeyword = /** @type {import(\"ajv\").IfParams} */\n            _params19.failingKeyword;\n            return \"\".concat(dataPath, \" should match \\\"\").concat(failingKeyword, \"\\\" schema:\\n\").concat(this.getSchemaPartText(_parentSchema25, [failingKeyword]));\n          }\n        case \"absolutePath\":\n          {\n            var message = error.message,\n              _parentSchema26 = error.parentSchema;\n            return \"\".concat(dataPath, \": \").concat(message).concat(this.getSchemaPartDescription(_parentSchema26));\n          }\n\n        /* istanbul ignore next */\n\n        default:\n          {\n            var _message = error.message,\n              _parentSchema27 = error.parentSchema;\n            var ErrorInJSON = JSON.stringify(error, null, 2); // For `custom`, `false schema`, `$ref` keywords\n            // Fallback for unknown keywords\n\n            return \"\".concat(dataPath, \" \").concat(_message, \" (\").concat(ErrorInJSON, \").\\n\").concat(this.getSchemaPartText(_parentSchema27, false));\n          }\n      }\n    }\n    /**\n     * @param {Array<SchemaUtilErrorObject>} errors\n     * @returns {string}\n     */\n  }, {\n    key: \"formatValidationErrors\",\n    value: function formatValidationErrors(errors) {\n      var _this4 = this;\n      return errors.map(function (error) {\n        var formattedError = _this4.formatValidationError(error);\n        if (_this4.postFormatter) {\n          formattedError = _this4.postFormatter(formattedError, error);\n        }\n        return \" - \".concat(indent(formattedError, \"   \"));\n      }).join(\"\\n\");\n    }\n  }]);\n  return ValidationError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar _default = ValidationError;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","require","stringHints","numberHints","SPECIFICITY","type","not","oneOf","anyOf","if","enum","const","instanceof","required","pattern","patternRequired","format","formatMinimum","formatMaximum","minimum","exclusiveMinimum","maximum","exclusiveMaximum","multipleOf","uniqueItems","contains","minLength","maxLength","minItems","maxItems","minProperties","maxProperties","dependencies","propertyNames","additionalItems","additionalProperties","absolutePath","filterMax","array","fn","evaluatedMax","reduce","max","item","Math","filter","filterChildren","children","newChildren","error","dataPath","length","keyword","findAllChildren","schemaPaths","i","predicate","schemaPath","indexOf","every","refs","extractRefs","childrenStart","slice","concat","schema","Array","isArray","map","$ref","s","groupChildrenByFirstChild","result","child","push","assign","reverse","indent","str","prefix","replace","hasNotInSchema","findFirstTypedSchema","canApplyNot","typedSchema","likeNumber","likeInteger","likeString","likeNull","likeBoolean","isObject","maybeObj","likeArray","items","likeObject","properties","patternProperties","getArticle","test","getSchemaNonTypes","formatHints","hints","join","getHints","logic","ValidationError","errors","configuration","name","headerNameFromSchema","baseDataPathFromSchema","title","baseDataPath","splittedTitleFromSchema","match","headerName","postFormatter","header","message","formatValidationErrors","Error","captureStackTrace","constructor","path","newPath","split","schemaPart","inner","prevSchemas","newLogic","formatInnerSchema","innerSchema","addSelf","formatSchema","includes","needApplyLogicHere","values","JSON","stringify","allOf","ifValue","thenValue","then","elseValue","else","getSchemaPart","hasAdditionalItems","Boolean","keys","allProperties","Set","objectStructure","property","isRequired","forEach","dependencyName","dependency","dep","additionalPath","needDot","schemaText","description","link","errorDataPath","parentSchema","params","getSchemaPartText","getSchemaPartDescription","comparison","limit","missingPattern","data","missingProperty","hasProperty","additionalProperty","deps","trim","propertyName","postfix","schemaOutput","lastChild","remainingChildren","formatValidationError","filteredChildren","nestedError","failingKeyword","ErrorInJSON","formattedError","_default"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/schema-utils/dist/ValidationError.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nconst {\n  stringHints,\n  numberHints\n} = require(\"./util/hints\");\n/** @typedef {import(\"json-schema\").JSONSchema6} JSONSchema6 */\n\n/** @typedef {import(\"json-schema\").JSONSchema7} JSONSchema7 */\n\n/** @typedef {import(\"./validate\").Schema} Schema */\n\n/** @typedef {import(\"./validate\").ValidationErrorConfiguration} ValidationErrorConfiguration */\n\n/** @typedef {import(\"./validate\").PostFormatter} PostFormatter */\n\n/** @typedef {import(\"./validate\").SchemaUtilErrorObject} SchemaUtilErrorObject */\n\n/** @enum {number} */\n\n\nconst SPECIFICITY = {\n  type: 1,\n  not: 1,\n  oneOf: 1,\n  anyOf: 1,\n  if: 1,\n  enum: 1,\n  const: 1,\n  instanceof: 1,\n  required: 2,\n  pattern: 2,\n  patternRequired: 2,\n  format: 2,\n  formatMinimum: 2,\n  formatMaximum: 2,\n  minimum: 2,\n  exclusiveMinimum: 2,\n  maximum: 2,\n  exclusiveMaximum: 2,\n  multipleOf: 2,\n  uniqueItems: 2,\n  contains: 2,\n  minLength: 2,\n  maxLength: 2,\n  minItems: 2,\n  maxItems: 2,\n  minProperties: 2,\n  maxProperties: 2,\n  dependencies: 2,\n  propertyNames: 2,\n  additionalItems: 2,\n  additionalProperties: 2,\n  absolutePath: 2\n};\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} array\n * @param {(item: SchemaUtilErrorObject) => number} fn\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\nfunction filterMax(array, fn) {\n  const evaluatedMax = array.reduce((max, item) => Math.max(max, fn(item)), 0);\n  return array.filter(item => fn(item) === evaluatedMax);\n}\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} children\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction filterChildren(children) {\n  let newChildren = children;\n  newChildren = filterMax(newChildren,\n  /**\n   *\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  error => error.dataPath ? error.dataPath.length : 0);\n  newChildren = filterMax(newChildren,\n  /**\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  error => SPECIFICITY[\n  /** @type {keyof typeof SPECIFICITY} */\n  error.keyword] || 2);\n  return newChildren;\n}\n/**\n * Find all children errors\n * @param {Array<SchemaUtilErrorObject>} children\n * @param {Array<string>} schemaPaths\n * @return {number} returns index of first child\n */\n\n\nfunction findAllChildren(children, schemaPaths) {\n  let i = children.length - 1;\n\n  const predicate =\n  /**\n   * @param {string} schemaPath\n   * @returns {boolean}\n   */\n  schemaPath => children[i].schemaPath.indexOf(schemaPath) !== 0;\n\n  while (i > -1 && !schemaPaths.every(predicate)) {\n    if (children[i].keyword === \"anyOf\" || children[i].keyword === \"oneOf\") {\n      const refs = extractRefs(children[i]);\n      const childrenStart = findAllChildren(children.slice(0, i), refs.concat(children[i].schemaPath));\n      i = childrenStart - 1;\n    } else {\n      i -= 1;\n    }\n  }\n\n  return i + 1;\n}\n/**\n * Extracts all refs from schema\n * @param {SchemaUtilErrorObject} error\n * @return {Array<string>}\n */\n\n\nfunction extractRefs(error) {\n  const {\n    schema\n  } = error;\n\n  if (!Array.isArray(schema)) {\n    return [];\n  }\n\n  return schema.map(({\n    $ref\n  }) => $ref).filter(s => s);\n}\n/**\n * Groups children by their first level parent (assuming that error is root)\n * @param {Array<SchemaUtilErrorObject>} children\n * @return {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction groupChildrenByFirstChild(children) {\n  const result = [];\n  let i = children.length - 1;\n\n  while (i > 0) {\n    const child = children[i];\n\n    if (child.keyword === \"anyOf\" || child.keyword === \"oneOf\") {\n      const refs = extractRefs(child);\n      const childrenStart = findAllChildren(children.slice(0, i), refs.concat(child.schemaPath));\n\n      if (childrenStart !== i) {\n        result.push(Object.assign({}, child, {\n          children: children.slice(childrenStart, i)\n        }));\n        i = childrenStart;\n      } else {\n        result.push(child);\n      }\n    } else {\n      result.push(child);\n    }\n\n    i -= 1;\n  }\n\n  if (i === 0) {\n    result.push(children[i]);\n  }\n\n  return result.reverse();\n}\n/**\n * @param {string} str\n * @param {string} prefix\n * @returns {string}\n */\n\n\nfunction indent(str, prefix) {\n  return str.replace(/\\n(?!$)/g, `\\n${prefix}`);\n}\n/**\n * @param {Schema} schema\n * @returns {schema is (Schema & {not: Schema})}\n */\n\n\nfunction hasNotInSchema(schema) {\n  return !!schema.not;\n}\n/**\n * @param {Schema} schema\n * @return {Schema}\n */\n\n\nfunction findFirstTypedSchema(schema) {\n  if (hasNotInSchema(schema)) {\n    return findFirstTypedSchema(schema.not);\n  }\n\n  return schema;\n}\n/**\n * @param {Schema} schema\n * @return {boolean}\n */\n\n\nfunction canApplyNot(schema) {\n  const typedSchema = findFirstTypedSchema(schema);\n  return likeNumber(typedSchema) || likeInteger(typedSchema) || likeString(typedSchema) || likeNull(typedSchema) || likeBoolean(typedSchema);\n}\n/**\n * @param {any} maybeObj\n * @returns {boolean}\n */\n\n\nfunction isObject(maybeObj) {\n  return typeof maybeObj === \"object\" && maybeObj !== null;\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeNumber(schema) {\n  return schema.type === \"number\" || typeof schema.minimum !== \"undefined\" || typeof schema.exclusiveMinimum !== \"undefined\" || typeof schema.maximum !== \"undefined\" || typeof schema.exclusiveMaximum !== \"undefined\" || typeof schema.multipleOf !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeInteger(schema) {\n  return schema.type === \"integer\" || typeof schema.minimum !== \"undefined\" || typeof schema.exclusiveMinimum !== \"undefined\" || typeof schema.maximum !== \"undefined\" || typeof schema.exclusiveMaximum !== \"undefined\" || typeof schema.multipleOf !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeString(schema) {\n  return schema.type === \"string\" || typeof schema.minLength !== \"undefined\" || typeof schema.maxLength !== \"undefined\" || typeof schema.pattern !== \"undefined\" || typeof schema.format !== \"undefined\" || typeof schema.formatMinimum !== \"undefined\" || typeof schema.formatMaximum !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeBoolean(schema) {\n  return schema.type === \"boolean\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeArray(schema) {\n  return schema.type === \"array\" || typeof schema.minItems === \"number\" || typeof schema.maxItems === \"number\" || typeof schema.uniqueItems !== \"undefined\" || typeof schema.items !== \"undefined\" || typeof schema.additionalItems !== \"undefined\" || typeof schema.contains !== \"undefined\";\n}\n/**\n * @param {Schema & {patternRequired?: Array<string>}} schema\n * @returns {boolean}\n */\n\n\nfunction likeObject(schema) {\n  return schema.type === \"object\" || typeof schema.minProperties !== \"undefined\" || typeof schema.maxProperties !== \"undefined\" || typeof schema.required !== \"undefined\" || typeof schema.properties !== \"undefined\" || typeof schema.patternProperties !== \"undefined\" || typeof schema.additionalProperties !== \"undefined\" || typeof schema.dependencies !== \"undefined\" || typeof schema.propertyNames !== \"undefined\" || typeof schema.patternRequired !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeNull(schema) {\n  return schema.type === \"null\";\n}\n/**\n * @param {string} type\n * @returns {string}\n */\n\n\nfunction getArticle(type) {\n  if (/^[aeiou]/i.test(type)) {\n    return \"an\";\n  }\n\n  return \"a\";\n}\n/**\n * @param {Schema=} schema\n * @returns {string}\n */\n\n\nfunction getSchemaNonTypes(schema) {\n  if (!schema) {\n    return \"\";\n  }\n\n  if (!schema.type) {\n    if (likeNumber(schema) || likeInteger(schema)) {\n      return \" | should be any non-number\";\n    }\n\n    if (likeString(schema)) {\n      return \" | should be any non-string\";\n    }\n\n    if (likeArray(schema)) {\n      return \" | should be any non-array\";\n    }\n\n    if (likeObject(schema)) {\n      return \" | should be any non-object\";\n    }\n  }\n\n  return \"\";\n}\n/**\n * @param {Array<string>} hints\n * @returns {string}\n */\n\n\nfunction formatHints(hints) {\n  return hints.length > 0 ? `(${hints.join(\", \")})` : \"\";\n}\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @returns {string[]}\n */\n\n\nfunction getHints(schema, logic) {\n  if (likeNumber(schema) || likeInteger(schema)) {\n    return numberHints(schema, logic);\n  } else if (likeString(schema)) {\n    return stringHints(schema, logic);\n  }\n\n  return [];\n}\n\nclass ValidationError extends Error {\n  /**\n   * @param {Array<SchemaUtilErrorObject>} errors\n   * @param {Schema} schema\n   * @param {ValidationErrorConfiguration} configuration\n   */\n  constructor(errors, schema, configuration = {}) {\n    super();\n    /** @type {string} */\n\n    this.name = \"ValidationError\";\n    /** @type {Array<SchemaUtilErrorObject>} */\n\n    this.errors = errors;\n    /** @type {Schema} */\n\n    this.schema = schema;\n    let headerNameFromSchema;\n    let baseDataPathFromSchema;\n\n    if (schema.title && (!configuration.name || !configuration.baseDataPath)) {\n      const splittedTitleFromSchema = schema.title.match(/^(.+) (.+)$/);\n\n      if (splittedTitleFromSchema) {\n        if (!configuration.name) {\n          [, headerNameFromSchema] = splittedTitleFromSchema;\n        }\n\n        if (!configuration.baseDataPath) {\n          [,, baseDataPathFromSchema] = splittedTitleFromSchema;\n        }\n      }\n    }\n    /** @type {string} */\n\n\n    this.headerName = configuration.name || headerNameFromSchema || \"Object\";\n    /** @type {string} */\n\n    this.baseDataPath = configuration.baseDataPath || baseDataPathFromSchema || \"configuration\";\n    /** @type {PostFormatter | null} */\n\n    this.postFormatter = configuration.postFormatter || null;\n    const header = `Invalid ${this.baseDataPath} object. ${this.headerName} has been initialized using ${getArticle(this.baseDataPath)} ${this.baseDataPath} object that does not match the API schema.\\n`;\n    /** @type {string} */\n\n    this.message = `${header}${this.formatValidationErrors(errors)}`;\n    Error.captureStackTrace(this, this.constructor);\n  }\n  /**\n   * @param {string} path\n   * @returns {Schema}\n   */\n\n\n  getSchemaPart(path) {\n    const newPath = path.split(\"/\");\n    let schemaPart = this.schema;\n\n    for (let i = 1; i < newPath.length; i++) {\n      const inner = schemaPart[\n      /** @type {keyof Schema} */\n      newPath[i]];\n\n      if (!inner) {\n        break;\n      }\n\n      schemaPart = inner;\n    }\n\n    return schemaPart;\n  }\n  /**\n   * @param {Schema} schema\n   * @param {boolean} logic\n   * @param {Array<Object>} prevSchemas\n   * @returns {string}\n   */\n\n\n  formatSchema(schema, logic = true, prevSchemas = []) {\n    let newLogic = logic;\n\n    const formatInnerSchema =\n    /**\n     *\n     * @param {Object} innerSchema\n     * @param {boolean=} addSelf\n     * @returns {string}\n     */\n    (innerSchema, addSelf) => {\n      if (!addSelf) {\n        return this.formatSchema(innerSchema, newLogic, prevSchemas);\n      }\n\n      if (prevSchemas.includes(innerSchema)) {\n        return \"(recursive)\";\n      }\n\n      return this.formatSchema(innerSchema, newLogic, prevSchemas.concat(schema));\n    };\n\n    if (hasNotInSchema(schema) && !likeObject(schema)) {\n      if (canApplyNot(schema.not)) {\n        newLogic = !logic;\n        return formatInnerSchema(schema.not);\n      }\n\n      const needApplyLogicHere = !schema.not.not;\n      const prefix = logic ? \"\" : \"non \";\n      newLogic = !logic;\n      return needApplyLogicHere ? prefix + formatInnerSchema(schema.not) : formatInnerSchema(schema.not);\n    }\n\n    if (\n    /** @type {Schema & {instanceof: string | Array<string>}} */\n    schema.instanceof) {\n      const {\n        instanceof: value\n      } =\n      /** @type {Schema & {instanceof: string | Array<string>}} */\n      schema;\n      const values = !Array.isArray(value) ? [value] : value;\n      return values.map(\n      /**\n       * @param {string} item\n       * @returns {string}\n       */\n      item => item === \"Function\" ? \"function\" : item).join(\" | \");\n    }\n\n    if (schema.enum) {\n      return (\n        /** @type {Array<any>} */\n        schema.enum.map(item => JSON.stringify(item)).join(\" | \")\n      );\n    }\n\n    if (typeof schema.const !== \"undefined\") {\n      return JSON.stringify(schema.const);\n    }\n\n    if (schema.oneOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.oneOf.map(item => formatInnerSchema(item, true)).join(\" | \")\n      );\n    }\n\n    if (schema.anyOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.anyOf.map(item => formatInnerSchema(item, true)).join(\" | \")\n      );\n    }\n\n    if (schema.allOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.allOf.map(item => formatInnerSchema(item, true)).join(\" & \")\n      );\n    }\n\n    if (\n    /** @type {JSONSchema7} */\n    schema.if) {\n      const {\n        if: ifValue,\n        then: thenValue,\n        else: elseValue\n      } =\n      /** @type {JSONSchema7} */\n      schema;\n      return `${ifValue ? `if ${formatInnerSchema(ifValue)}` : \"\"}${thenValue ? ` then ${formatInnerSchema(thenValue)}` : \"\"}${elseValue ? ` else ${formatInnerSchema(elseValue)}` : \"\"}`;\n    }\n\n    if (schema.$ref) {\n      return formatInnerSchema(this.getSchemaPart(schema.$ref), true);\n    }\n\n    if (likeNumber(schema) || likeInteger(schema)) {\n      const [type, ...hints] = getHints(schema, logic);\n      const str = `${type}${hints.length > 0 ? ` ${formatHints(hints)}` : \"\"}`;\n      return logic ? str : hints.length > 0 ? `non-${type} | ${str}` : `non-${type}`;\n    }\n\n    if (likeString(schema)) {\n      const [type, ...hints] = getHints(schema, logic);\n      const str = `${type}${hints.length > 0 ? ` ${formatHints(hints)}` : \"\"}`;\n      return logic ? str : str === \"string\" ? \"non-string\" : `non-string | ${str}`;\n    }\n\n    if (likeBoolean(schema)) {\n      return `${logic ? \"\" : \"non-\"}boolean`;\n    }\n\n    if (likeArray(schema)) {\n      // not logic already applied in formatValidationError\n      newLogic = true;\n      const hints = [];\n\n      if (typeof schema.minItems === \"number\") {\n        hints.push(`should not have fewer than ${schema.minItems} item${schema.minItems > 1 ? \"s\" : \"\"}`);\n      }\n\n      if (typeof schema.maxItems === \"number\") {\n        hints.push(`should not have more than ${schema.maxItems} item${schema.maxItems > 1 ? \"s\" : \"\"}`);\n      }\n\n      if (schema.uniqueItems) {\n        hints.push(\"should not have duplicate items\");\n      }\n\n      const hasAdditionalItems = typeof schema.additionalItems === \"undefined\" || Boolean(schema.additionalItems);\n      let items = \"\";\n\n      if (schema.items) {\n        if (Array.isArray(schema.items) && schema.items.length > 0) {\n          items = `${\n          /** @type {Array<Schema>} */\n          schema.items.map(item => formatInnerSchema(item)).join(\", \")}`;\n\n          if (hasAdditionalItems) {\n            if (schema.additionalItems && isObject(schema.additionalItems) && Object.keys(schema.additionalItems).length > 0) {\n              hints.push(`additional items should be ${formatInnerSchema(schema.additionalItems)}`);\n            }\n          }\n        } else if (schema.items && Object.keys(schema.items).length > 0) {\n          // \"additionalItems\" is ignored\n          items = `${formatInnerSchema(schema.items)}`;\n        } else {\n          // Fallback for empty `items` value\n          items = \"any\";\n        }\n      } else {\n        // \"additionalItems\" is ignored\n        items = \"any\";\n      }\n\n      if (schema.contains && Object.keys(schema.contains).length > 0) {\n        hints.push(`should contains at least one ${this.formatSchema(schema.contains)} item`);\n      }\n\n      return `[${items}${hasAdditionalItems ? \", ...\" : \"\"}]${hints.length > 0 ? ` (${hints.join(\", \")})` : \"\"}`;\n    }\n\n    if (likeObject(schema)) {\n      // not logic already applied in formatValidationError\n      newLogic = true;\n      const hints = [];\n\n      if (typeof schema.minProperties === \"number\") {\n        hints.push(`should not have fewer than ${schema.minProperties} ${schema.minProperties > 1 ? \"properties\" : \"property\"}`);\n      }\n\n      if (typeof schema.maxProperties === \"number\") {\n        hints.push(`should not have more than ${schema.maxProperties} ${schema.minProperties && schema.minProperties > 1 ? \"properties\" : \"property\"}`);\n      }\n\n      if (schema.patternProperties && Object.keys(schema.patternProperties).length > 0) {\n        const patternProperties = Object.keys(schema.patternProperties);\n        hints.push(`additional property names should match pattern${patternProperties.length > 1 ? \"s\" : \"\"} ${patternProperties.map(pattern => JSON.stringify(pattern)).join(\" | \")}`);\n      }\n\n      const properties = schema.properties ? Object.keys(schema.properties) : [];\n      const required = schema.required ? schema.required : [];\n      const allProperties = [...new Set(\n      /** @type {Array<string>} */\n      [].concat(required).concat(properties))];\n      const objectStructure = allProperties.map(property => {\n        const isRequired = required.includes(property); // Some properties need quotes, maybe we should add check\n        // Maybe we should output type of property (`foo: string`), but it is looks very unreadable\n\n        return `${property}${isRequired ? \"\" : \"?\"}`;\n      }).concat(typeof schema.additionalProperties === \"undefined\" || Boolean(schema.additionalProperties) ? schema.additionalProperties && isObject(schema.additionalProperties) ? [`<key>: ${formatInnerSchema(schema.additionalProperties)}`] : [\"…\"] : []).join(\", \");\n      const {\n        dependencies,\n        propertyNames,\n        patternRequired\n      } =\n      /** @type {Schema & {patternRequired?: Array<string>;}} */\n      schema;\n\n      if (dependencies) {\n        Object.keys(dependencies).forEach(dependencyName => {\n          const dependency = dependencies[dependencyName];\n\n          if (Array.isArray(dependency)) {\n            hints.push(`should have ${dependency.length > 1 ? \"properties\" : \"property\"} ${dependency.map(dep => `'${dep}'`).join(\", \")} when property '${dependencyName}' is present`);\n          } else {\n            hints.push(`should be valid according to the schema ${formatInnerSchema(dependency)} when property '${dependencyName}' is present`);\n          }\n        });\n      }\n\n      if (propertyNames && Object.keys(propertyNames).length > 0) {\n        hints.push(`each property name should match format ${JSON.stringify(schema.propertyNames.format)}`);\n      }\n\n      if (patternRequired && patternRequired.length > 0) {\n        hints.push(`should have property matching pattern ${patternRequired.map(\n        /**\n         * @param {string} item\n         * @returns {string}\n         */\n        item => JSON.stringify(item))}`);\n      }\n\n      return `object {${objectStructure ? ` ${objectStructure} ` : \"\"}}${hints.length > 0 ? ` (${hints.join(\", \")})` : \"\"}`;\n    }\n\n    if (likeNull(schema)) {\n      return `${logic ? \"\" : \"non-\"}null`;\n    }\n\n    if (Array.isArray(schema.type)) {\n      // not logic already applied in formatValidationError\n      return `${schema.type.join(\" | \")}`;\n    } // Fallback for unknown keywords\n    // not logic already applied in formatValidationError\n\n    /* istanbul ignore next */\n\n\n    return JSON.stringify(schema, null, 2);\n  }\n  /**\n   * @param {Schema=} schemaPart\n   * @param {(boolean | Array<string>)=} additionalPath\n   * @param {boolean=} needDot\n   * @param {boolean=} logic\n   * @returns {string}\n   */\n\n\n  getSchemaPartText(schemaPart, additionalPath, needDot = false, logic = true) {\n    if (!schemaPart) {\n      return \"\";\n    }\n\n    if (Array.isArray(additionalPath)) {\n      for (let i = 0; i < additionalPath.length; i++) {\n        /** @type {Schema | undefined} */\n        const inner = schemaPart[\n        /** @type {keyof Schema} */\n        additionalPath[i]];\n\n        if (inner) {\n          // eslint-disable-next-line no-param-reassign\n          schemaPart = inner;\n        } else {\n          break;\n        }\n      }\n    }\n\n    while (schemaPart.$ref) {\n      // eslint-disable-next-line no-param-reassign\n      schemaPart = this.getSchemaPart(schemaPart.$ref);\n    }\n\n    let schemaText = `${this.formatSchema(schemaPart, logic)}${needDot ? \".\" : \"\"}`;\n\n    if (schemaPart.description) {\n      schemaText += `\\n-> ${schemaPart.description}`;\n    }\n\n    if (schemaPart.link) {\n      schemaText += `\\n-> Read more at ${schemaPart.link}`;\n    }\n\n    return schemaText;\n  }\n  /**\n   * @param {Schema=} schemaPart\n   * @returns {string}\n   */\n\n\n  getSchemaPartDescription(schemaPart) {\n    if (!schemaPart) {\n      return \"\";\n    }\n\n    while (schemaPart.$ref) {\n      // eslint-disable-next-line no-param-reassign\n      schemaPart = this.getSchemaPart(schemaPart.$ref);\n    }\n\n    let schemaText = \"\";\n\n    if (schemaPart.description) {\n      schemaText += `\\n-> ${schemaPart.description}`;\n    }\n\n    if (schemaPart.link) {\n      schemaText += `\\n-> Read more at ${schemaPart.link}`;\n    }\n\n    return schemaText;\n  }\n  /**\n   * @param {SchemaUtilErrorObject} error\n   * @returns {string}\n   */\n\n\n  formatValidationError(error) {\n    const {\n      keyword,\n      dataPath: errorDataPath\n    } = error;\n    const dataPath = `${this.baseDataPath}${errorDataPath}`;\n\n    switch (keyword) {\n      case \"type\":\n        {\n          const {\n            parentSchema,\n            params\n          } = error; // eslint-disable-next-line default-case\n\n          switch (\n          /** @type {import(\"ajv\").TypeParams} */\n          params.type) {\n            case \"number\":\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case \"integer\":\n              return `${dataPath} should be an ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case \"string\":\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case \"boolean\":\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case \"array\":\n              return `${dataPath} should be an array:\\n${this.getSchemaPartText(parentSchema)}`;\n\n            case \"object\":\n              return `${dataPath} should be an object:\\n${this.getSchemaPartText(parentSchema)}`;\n\n            case \"null\":\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            default:\n              return `${dataPath} should be:\\n${this.getSchemaPartText(parentSchema)}`;\n          }\n        }\n\n      case \"instanceof\":\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${dataPath} should be an instance of ${this.getSchemaPartText(parentSchema, false, true)}`;\n        }\n\n      case \"pattern\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            pattern\n          } =\n          /** @type {import(\"ajv\").PatternParams} */\n          params;\n          return `${dataPath} should match pattern ${JSON.stringify(pattern)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"format\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            format\n          } =\n          /** @type {import(\"ajv\").FormatParams} */\n          params;\n          return `${dataPath} should match format ${JSON.stringify(format)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"formatMinimum\":\n      case \"formatMaximum\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            comparison,\n            limit\n          } =\n          /** @type {import(\"ajv\").ComparisonParams} */\n          params;\n          return `${dataPath} should be ${comparison} ${JSON.stringify(limit)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"minimum\":\n      case \"maximum\":\n      case \"exclusiveMinimum\":\n      case \"exclusiveMaximum\":\n        {\n          const {\n            parentSchema,\n            params\n          } = error;\n          const {\n            comparison,\n            limit\n          } =\n          /** @type {import(\"ajv\").ComparisonParams} */\n          params;\n          const [, ...hints] = getHints(\n          /** @type {Schema} */\n          parentSchema, true);\n\n          if (hints.length === 0) {\n            hints.push(`should be ${comparison} ${limit}`);\n          }\n\n          return `${dataPath} ${hints.join(\" \")}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"multipleOf\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            multipleOf\n          } =\n          /** @type {import(\"ajv\").MultipleOfParams} */\n          params;\n          return `${dataPath} should be multiple of ${multipleOf}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"patternRequired\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            missingPattern\n          } =\n          /** @type {import(\"ajv\").PatternRequiredParams} */\n          params;\n          return `${dataPath} should have property matching pattern ${JSON.stringify(missingPattern)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"minLength\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n\n          if (limit === 1) {\n            return `${dataPath} should be a non-empty string${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          const length = limit - 1;\n          return `${dataPath} should be longer than ${length} character${length > 1 ? \"s\" : \"\"}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"minItems\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n\n          if (limit === 1) {\n            return `${dataPath} should be a non-empty array${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          return `${dataPath} should not have fewer than ${limit} items${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"minProperties\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n\n          if (limit === 1) {\n            return `${dataPath} should be a non-empty object${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          return `${dataPath} should not have fewer than ${limit} properties${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"maxLength\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n          const max = limit + 1;\n          return `${dataPath} should be shorter than ${max} character${max > 1 ? \"s\" : \"\"}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"maxItems\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n          return `${dataPath} should not have more than ${limit} items${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"maxProperties\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n          return `${dataPath} should not have more than ${limit} properties${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"uniqueItems\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            i\n          } =\n          /** @type {import(\"ajv\").UniqueItemsParams} */\n          params;\n          return `${dataPath} should not contain the item '${error.data[i]}' twice${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"additionalItems\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n          return `${dataPath} should not have more than ${limit} items${getSchemaNonTypes(parentSchema)}. These items are valid:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case \"contains\":\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${dataPath} should contains at least one ${this.getSchemaPartText(parentSchema, [\"contains\"])} item${getSchemaNonTypes(parentSchema)}.`;\n        }\n\n      case \"required\":\n        {\n          const {\n            parentSchema,\n            params\n          } = error;\n          const missingProperty =\n          /** @type {import(\"ajv\").DependenciesParams} */\n          params.missingProperty.replace(/^\\./, \"\");\n          const hasProperty = parentSchema && Boolean(\n          /** @type {Schema} */\n          parentSchema.properties &&\n          /** @type {Schema} */\n          parentSchema.properties[missingProperty]);\n          return `${dataPath} misses the property '${missingProperty}'${getSchemaNonTypes(parentSchema)}.${hasProperty ? ` Should be:\\n${this.getSchemaPartText(parentSchema, [\"properties\", missingProperty])}` : this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"additionalProperties\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            additionalProperty\n          } =\n          /** @type {import(\"ajv\").AdditionalPropertiesParams} */\n          params;\n          return `${dataPath} has an unknown property '${additionalProperty}'${getSchemaNonTypes(parentSchema)}. These properties are valid:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case \"dependencies\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            property,\n            deps\n          } =\n          /** @type {import(\"ajv\").DependenciesParams} */\n          params;\n          const dependencies = deps.split(\",\").map(\n          /**\n           * @param {string} dep\n           * @returns {string}\n           */\n          dep => `'${dep.trim()}'`).join(\", \");\n          return `${dataPath} should have properties ${dependencies} when property '${property}' is present${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"propertyNames\":\n        {\n          const {\n            params,\n            parentSchema,\n            schema\n          } = error;\n          const {\n            propertyName\n          } =\n          /** @type {import(\"ajv\").PropertyNamesParams} */\n          params;\n          return `${dataPath} property name '${propertyName}' is invalid${getSchemaNonTypes(parentSchema)}. Property names should be match format ${JSON.stringify(schema.format)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"enum\":\n        {\n          const {\n            parentSchema\n          } = error;\n\n          if (parentSchema &&\n          /** @type {Schema} */\n          parentSchema.enum &&\n          /** @type {Schema} */\n          parentSchema.enum.length === 1) {\n            return `${dataPath} should be ${this.getSchemaPartText(parentSchema, false, true)}`;\n          }\n\n          return `${dataPath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case \"const\":\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${dataPath} should be equal to constant ${this.getSchemaPartText(parentSchema, false, true)}`;\n        }\n\n      case \"not\":\n        {\n          const postfix = likeObject(\n          /** @type {Schema} */\n          error.parentSchema) ? `\\n${this.getSchemaPartText(error.parentSchema)}` : \"\";\n          const schemaOutput = this.getSchemaPartText(error.schema, false, false, false);\n\n          if (canApplyNot(error.schema)) {\n            return `${dataPath} should be any ${schemaOutput}${postfix}.`;\n          }\n\n          const {\n            schema,\n            parentSchema\n          } = error;\n          return `${dataPath} should not be ${this.getSchemaPartText(schema, false, true)}${parentSchema && likeObject(parentSchema) ? `\\n${this.getSchemaPartText(parentSchema)}` : \"\"}`;\n        }\n\n      case \"oneOf\":\n      case \"anyOf\":\n        {\n          const {\n            parentSchema,\n            children\n          } = error;\n\n          if (children && children.length > 0) {\n            if (error.schema.length === 1) {\n              const lastChild = children[children.length - 1];\n              const remainingChildren = children.slice(0, children.length - 1);\n              return this.formatValidationError(Object.assign({}, lastChild, {\n                children: remainingChildren,\n                parentSchema: Object.assign({}, parentSchema, lastChild.parentSchema)\n              }));\n            }\n\n            let filteredChildren = filterChildren(children);\n\n            if (filteredChildren.length === 1) {\n              return this.formatValidationError(filteredChildren[0]);\n            }\n\n            filteredChildren = groupChildrenByFirstChild(filteredChildren);\n            return `${dataPath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}\\nDetails:\\n${filteredChildren.map(\n            /**\n             * @param {SchemaUtilErrorObject} nestedError\n             * @returns {string}\n             */\n            nestedError => ` * ${indent(this.formatValidationError(nestedError), \"   \")}`).join(\"\\n\")}`;\n          }\n\n          return `${dataPath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case \"if\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            failingKeyword\n          } =\n          /** @type {import(\"ajv\").IfParams} */\n          params;\n          return `${dataPath} should match \"${failingKeyword}\" schema:\\n${this.getSchemaPartText(parentSchema, [failingKeyword])}`;\n        }\n\n      case \"absolutePath\":\n        {\n          const {\n            message,\n            parentSchema\n          } = error;\n          return `${dataPath}: ${message}${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      /* istanbul ignore next */\n\n      default:\n        {\n          const {\n            message,\n            parentSchema\n          } = error;\n          const ErrorInJSON = JSON.stringify(error, null, 2); // For `custom`, `false schema`, `$ref` keywords\n          // Fallback for unknown keywords\n\n          return `${dataPath} ${message} (${ErrorInJSON}).\\n${this.getSchemaPartText(parentSchema, false)}`;\n        }\n    }\n  }\n  /**\n   * @param {Array<SchemaUtilErrorObject>} errors\n   * @returns {string}\n   */\n\n\n  formatValidationErrors(errors) {\n    return errors.map(error => {\n      let formattedError = this.formatValidationError(error);\n\n      if (this.postFormatter) {\n        formattedError = this.postFormatter(formattedError, error);\n      }\n\n      return ` - ${indent(formattedError, \"   \")}`;\n    }).join(\"\\n\");\n  }\n\n}\n\nvar _default = ValidationError;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}