{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar RuntimeGlobals = require(\"../RuntimeGlobals\");\nvar Template = require(\"../Template\");\nvar AsyncWasmLoadingRuntimeModule = require(\"../wasm-async/AsyncWasmLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\nvar ReadFileCompileAsyncWasmPlugin = /*#__PURE__*/function () {\n  function ReadFileCompileAsyncWasmPlugin() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? \"async-node\" : _ref$type,\n      _ref$import = _ref.import,\n      useImport = _ref$import === void 0 ? false : _ref$import;\n    _classCallCheck(this, ReadFileCompileAsyncWasmPlugin);\n    this._type = type;\n    this._import = useImport;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  _createClass(ReadFileCompileAsyncWasmPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n      compiler.hooks.thisCompilation.tap(\"ReadFileCompileAsyncWasmPlugin\", function (compilation) {\n        var globalWasmLoading = compilation.outputOptions.wasmLoading;\n        var isEnabledForChunk = function isEnabledForChunk(chunk) {\n          var options = chunk.getEntryOptions();\n          var wasmLoading = options && options.wasmLoading !== undefined ? options.wasmLoading : globalWasmLoading;\n          return wasmLoading === _this._type;\n        };\n        var generateLoadBinaryCode = _this._import ? function (path) {\n          return Template.asString([\"Promise.all([import('fs'), import('url')]).then(([{ readFile }, { URL }]) => new Promise((resolve, reject) => {\", Template.indent([\"readFile(new URL(\".concat(path, \", import.meta.url), (err, buffer) => {\"), Template.indent([\"if (err) return reject(err);\", \"\", \"// Fake fetch response\", \"resolve({\", Template.indent([\"arrayBuffer() { return buffer; }\"]), \"});\"]), \"});\"]), \"}))\"]);\n        } : function (path) {\n          return Template.asString([\"new Promise(function (resolve, reject) {\", Template.indent([\"try {\", Template.indent([\"var { readFile } = require('fs');\", \"var { join } = require('path');\", \"\", \"readFile(join(__dirname, \".concat(path, \"), function(err, buffer){\"), Template.indent([\"if (err) return reject(err);\", \"\", \"// Fake fetch response\", \"resolve({\", Template.indent([\"arrayBuffer() { return buffer; }\"]), \"});\"]), \"});\"]), \"} catch (err) { reject(err); }\"]), \"})\"]);\n        };\n        compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.instantiateWasm).tap(\"ReadFileCompileAsyncWasmPlugin\", function (chunk, set) {\n          if (!isEnabledForChunk(chunk)) return;\n          var chunkGraph = compilation.chunkGraph;\n          if (!chunkGraph.hasModuleInGraph(chunk, function (m) {\n            return m.type === \"webassembly/async\";\n          })) {\n            return;\n          }\n          set.add(RuntimeGlobals.publicPath);\n          compilation.addRuntimeModule(chunk, new AsyncWasmLoadingRuntimeModule({\n            generateLoadBinaryCode: generateLoadBinaryCode,\n            supportsStreaming: false\n          }));\n        });\n      });\n    }\n  }]);\n  return ReadFileCompileAsyncWasmPlugin;\n}();\nmodule.exports = ReadFileCompileAsyncWasmPlugin;","map":{"version":3,"names":["RuntimeGlobals","require","Template","AsyncWasmLoadingRuntimeModule","ReadFileCompileAsyncWasmPlugin","type","import","useImport","_type","_import","compiler","hooks","thisCompilation","tap","compilation","globalWasmLoading","outputOptions","wasmLoading","isEnabledForChunk","chunk","options","getEntryOptions","undefined","generateLoadBinaryCode","path","asString","indent","runtimeRequirementInTree","for","instantiateWasm","set","chunkGraph","hasModuleInGraph","m","add","publicPath","addRuntimeModule","supportsStreaming","module","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/node/ReadFileCompileAsyncWasmPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst Template = require(\"../Template\");\nconst AsyncWasmLoadingRuntimeModule = require(\"../wasm-async/AsyncWasmLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass ReadFileCompileAsyncWasmPlugin {\n\tconstructor({ type = \"async-node\", import: useImport = false } = {}) {\n\t\tthis._type = type;\n\t\tthis._import = useImport;\n\t}\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"ReadFileCompileAsyncWasmPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tconst globalWasmLoading = compilation.outputOptions.wasmLoading;\n\t\t\t\tconst isEnabledForChunk = chunk => {\n\t\t\t\t\tconst options = chunk.getEntryOptions();\n\t\t\t\t\tconst wasmLoading =\n\t\t\t\t\t\toptions && options.wasmLoading !== undefined\n\t\t\t\t\t\t\t? options.wasmLoading\n\t\t\t\t\t\t\t: globalWasmLoading;\n\t\t\t\t\treturn wasmLoading === this._type;\n\t\t\t\t};\n\t\t\t\tconst generateLoadBinaryCode = this._import\n\t\t\t\t\t? path =>\n\t\t\t\t\t\t\tTemplate.asString([\n\t\t\t\t\t\t\t\t\"Promise.all([import('fs'), import('url')]).then(([{ readFile }, { URL }]) => new Promise((resolve, reject) => {\",\n\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t`readFile(new URL(${path}, import.meta.url), (err, buffer) => {`,\n\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\"if (err) return reject(err);\",\n\t\t\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t\t\t\"// Fake fetch response\",\n\t\t\t\t\t\t\t\t\t\t\"resolve({\",\n\t\t\t\t\t\t\t\t\t\tTemplate.indent([\"arrayBuffer() { return buffer; }\"]),\n\t\t\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\"}))\"\n\t\t\t\t\t\t\t])\n\t\t\t\t\t: path =>\n\t\t\t\t\t\t\tTemplate.asString([\n\t\t\t\t\t\t\t\t\"new Promise(function (resolve, reject) {\",\n\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\"try {\",\n\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\"var { readFile } = require('fs');\",\n\t\t\t\t\t\t\t\t\t\t\"var { join } = require('path');\",\n\t\t\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t\t\t`readFile(join(__dirname, ${path}), function(err, buffer){`,\n\t\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\t\"if (err) return reject(err);\",\n\t\t\t\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t\t\t\t\"// Fake fetch response\",\n\t\t\t\t\t\t\t\t\t\t\t\"resolve({\",\n\t\t\t\t\t\t\t\t\t\t\tTemplate.indent([\"arrayBuffer() { return buffer; }\"]),\n\t\t\t\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\"} catch (err) { reject(err); }\"\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\"})\"\n\t\t\t\t\t\t\t]);\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.instantiateWasm)\n\t\t\t\t\t.tap(\"ReadFileCompileAsyncWasmPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!chunkGraph.hasModuleInGraph(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tm => m.type === \"webassembly/async\"\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tset.add(RuntimeGlobals.publicPath);\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew AsyncWasmLoadingRuntimeModule({\n\t\t\t\t\t\t\t\tgenerateLoadBinaryCode,\n\t\t\t\t\t\t\t\tsupportsStreaming: false\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = ReadFileCompileAsyncWasmPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}