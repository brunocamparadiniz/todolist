{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @type {WeakMap<object, WeakMap<object, object>>} */\nvar _objectWithoutProperties = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/objectWithoutProperties.js\").default;\nvar _toPropertyKey = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/toPropertyKey.js\").default;\nvar _slicedToArray = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _defineProperty = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _objectSpread = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar mergeCache = new WeakMap();\n/** @type {WeakMap<object, Map<string, Map<string|number|boolean, object>>>} */\nvar setPropertyCache = new WeakMap();\nvar DELETE = Symbol(\"DELETE\");\nvar DYNAMIC_INFO = Symbol(\"cleverMerge dynamic info\");\n\n/**\n * Merges two given objects and caches the result to avoid computation if same objects passed as arguments again.\n * @template T\n * @template O\n * @example\n * // performs cleverMerge(first, second), stores the result in WeakMap and returns result\n * cachedCleverMerge({a: 1}, {a: 2})\n * {a: 2}\n *  // when same arguments passed, gets the result from WeakMap and returns it.\n * cachedCleverMerge({a: 1}, {a: 2})\n * {a: 2}\n * @param {T} first first object\n * @param {O} second second object\n * @returns {T & O | T | O} merged object of first and second object\n */\nvar cachedCleverMerge = function cachedCleverMerge(first, second) {\n  if (second === undefined) return first;\n  if (first === undefined) return second;\n  if (typeof second !== \"object\" || second === null) return second;\n  if (typeof first !== \"object\" || first === null) return first;\n  var innerCache = mergeCache.get(first);\n  if (innerCache === undefined) {\n    innerCache = new WeakMap();\n    mergeCache.set(first, innerCache);\n  }\n  var prevMerge = innerCache.get(second);\n  if (prevMerge !== undefined) return prevMerge;\n  var newMerge = _cleverMerge(first, second, true);\n  innerCache.set(second, newMerge);\n  return newMerge;\n};\n\n/**\n * @template T\n * @param {Partial<T>} obj object\n * @param {string} property property\n * @param {string|number|boolean} value assignment value\n * @returns {T} new object\n */\nvar cachedSetProperty = function cachedSetProperty(obj, property, value) {\n  var mapByProperty = setPropertyCache.get(obj);\n  if (mapByProperty === undefined) {\n    mapByProperty = new Map();\n    setPropertyCache.set(obj, mapByProperty);\n  }\n  var mapByValue = mapByProperty.get(property);\n  if (mapByValue === undefined) {\n    mapByValue = new Map();\n    mapByProperty.set(property, mapByValue);\n  }\n  var result = mapByValue.get(value);\n  if (result) return result;\n  result = _objectSpread(_objectSpread({}, obj), {}, _defineProperty({}, property, value));\n  mapByValue.set(value, result);\n  return result;\n};\n\n/**\n * @typedef {Object} ObjectParsedPropertyEntry\n * @property {any | undefined} base base value\n * @property {string | undefined} byProperty the name of the selector property\n * @property {Map<string, any>} byValues value depending on selector property, merged with base\n */\n\n/**\n * @typedef {Object} ParsedObject\n * @property {Map<string, ObjectParsedPropertyEntry>} static static properties (key is property name)\n * @property {{ byProperty: string, fn: Function } | undefined} dynamic dynamic part\n */\n\n/** @type {WeakMap<object, ParsedObject>} */\nvar parseCache = new WeakMap();\n\n/**\n * @param {object} obj the object\n * @returns {ParsedObject} parsed object\n */\nvar cachedParseObject = function cachedParseObject(obj) {\n  var entry = parseCache.get(obj);\n  if (entry !== undefined) return entry;\n  var result = parseObject(obj);\n  parseCache.set(obj, result);\n  return result;\n};\n\n/**\n * @param {object} obj the object\n * @returns {ParsedObject} parsed object\n */\nvar parseObject = function parseObject(obj) {\n  var info = new Map();\n  var dynamicInfo;\n  var getInfo = function getInfo(p) {\n    var entry = info.get(p);\n    if (entry !== undefined) return entry;\n    var newEntry = {\n      base: undefined,\n      byProperty: undefined,\n      byValues: undefined\n    };\n    info.set(p, newEntry);\n    return newEntry;\n  };\n  for (var _i = 0, _Object$keys = Object.keys(obj); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    if (key.startsWith(\"by\")) {\n      var byProperty = key;\n      var byObj = obj[byProperty];\n      if (typeof byObj === \"object\") {\n        for (var _i2 = 0, _Object$keys2 = Object.keys(byObj); _i2 < _Object$keys2.length; _i2++) {\n          var byValue = _Object$keys2[_i2];\n          var _obj = byObj[byValue];\n          for (var _i3 = 0, _Object$keys3 = Object.keys(_obj); _i3 < _Object$keys3.length; _i3++) {\n            var _key = _Object$keys3[_i3];\n            var entry = getInfo(_key);\n            if (entry.byProperty === undefined) {\n              entry.byProperty = byProperty;\n              entry.byValues = new Map();\n            } else if (entry.byProperty !== byProperty) {\n              throw new Error(\"\".concat(byProperty, \" and \").concat(entry.byProperty, \" for a single property is not supported\"));\n            }\n            entry.byValues.set(byValue, _obj[_key]);\n            if (byValue === \"default\") {\n              for (var _i4 = 0, _Object$keys4 = Object.keys(byObj); _i4 < _Object$keys4.length; _i4++) {\n                var otherByValue = _Object$keys4[_i4];\n                if (!entry.byValues.has(otherByValue)) entry.byValues.set(otherByValue, undefined);\n              }\n            }\n          }\n        }\n      } else if (typeof byObj === \"function\") {\n        if (dynamicInfo === undefined) {\n          dynamicInfo = {\n            byProperty: key,\n            fn: byObj\n          };\n        } else {\n          throw new Error(\"\".concat(key, \" and \").concat(dynamicInfo.byProperty, \" when both are functions is not supported\"));\n        }\n      } else {\n        var _entry = getInfo(key);\n        _entry.base = obj[key];\n      }\n    } else {\n      var _entry2 = getInfo(key);\n      _entry2.base = obj[key];\n    }\n  }\n  return {\n    static: info,\n    dynamic: dynamicInfo\n  };\n};\n\n/**\n * @param {Map<string, ObjectParsedPropertyEntry>} info static properties (key is property name)\n * @param {{ byProperty: string, fn: Function } | undefined} dynamicInfo dynamic part\n * @returns {object} the object\n */\nvar serializeObject = function serializeObject(info, dynamicInfo) {\n  var obj = {};\n  // Setup byProperty structure\n  var _iterator = _createForOfIteratorHelper(info.values()),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var entry = _step.value;\n      if (entry.byProperty !== undefined) {\n        var byObj = obj[entry.byProperty] = obj[entry.byProperty] || {};\n        var _iterator3 = _createForOfIteratorHelper(entry.byValues.keys()),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var byValue = _step3.value;\n            byObj[byValue] = byObj[byValue] || {};\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var _iterator2 = _createForOfIteratorHelper(info),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _step2$value = _slicedToArray(_step2.value, 2),\n        key = _step2$value[0],\n        _entry3 = _step2$value[1];\n      if (_entry3.base !== undefined) {\n        obj[key] = _entry3.base;\n      }\n      // Fill byProperty structure\n      if (_entry3.byProperty !== undefined) {\n        var _byObj = obj[_entry3.byProperty] = obj[_entry3.byProperty] || {};\n        for (var _i5 = 0, _Object$keys5 = Object.keys(_byObj); _i5 < _Object$keys5.length; _i5++) {\n          var _byValue2 = _Object$keys5[_i5];\n          var value = getFromByValues(_entry3.byValues, _byValue2);\n          if (value !== undefined) _byObj[_byValue2][key] = value;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  if (dynamicInfo !== undefined) {\n    obj[dynamicInfo.byProperty] = dynamicInfo.fn;\n  }\n  return obj;\n};\nvar VALUE_TYPE_UNDEFINED = 0;\nvar VALUE_TYPE_ATOM = 1;\nvar VALUE_TYPE_ARRAY_EXTEND = 2;\nvar VALUE_TYPE_OBJECT = 3;\nvar VALUE_TYPE_DELETE = 4;\n\n/**\n * @param {any} value a single value\n * @returns {VALUE_TYPE_UNDEFINED | VALUE_TYPE_ATOM | VALUE_TYPE_ARRAY_EXTEND | VALUE_TYPE_OBJECT | VALUE_TYPE_DELETE} value type\n */\nvar getValueType = function getValueType(value) {\n  if (value === undefined) {\n    return VALUE_TYPE_UNDEFINED;\n  } else if (value === DELETE) {\n    return VALUE_TYPE_DELETE;\n  } else if (Array.isArray(value)) {\n    if (value.lastIndexOf(\"...\") !== -1) return VALUE_TYPE_ARRAY_EXTEND;\n    return VALUE_TYPE_ATOM;\n  } else if (typeof value === \"object\" && value !== null && (!value.constructor || value.constructor === Object)) {\n    return VALUE_TYPE_OBJECT;\n  }\n  return VALUE_TYPE_ATOM;\n};\n\n/**\n * Merges two objects. Objects are deeply clever merged.\n * Arrays might reference the old value with \"...\".\n * Non-object values take preference over object values.\n * @template T\n * @template O\n * @param {T} first first object\n * @param {O} second second object\n * @returns {T & O | T | O} merged object of first and second object\n */\nvar cleverMerge = function cleverMerge(first, second) {\n  if (second === undefined) return first;\n  if (first === undefined) return second;\n  if (typeof second !== \"object\" || second === null) return second;\n  if (typeof first !== \"object\" || first === null) return first;\n  return _cleverMerge(first, second, false);\n};\n\n/**\n * Merges two objects. Objects are deeply clever merged.\n * @param {object} first first object\n * @param {object} second second object\n * @param {boolean} internalCaching should parsing of objects and nested merges be cached\n * @returns {object} merged object of first and second object\n */\nvar _cleverMerge = function _cleverMerge(first, second) {\n  var internalCaching = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var firstObject = internalCaching ? cachedParseObject(first) : parseObject(first);\n  var firstInfo = firstObject.static,\n    firstDynamicInfo = firstObject.dynamic;\n\n  // If the first argument has a dynamic part we modify the dynamic part to merge the second argument\n  if (firstDynamicInfo !== undefined) {\n    var byProperty = firstDynamicInfo.byProperty,\n      fn = firstDynamicInfo.fn;\n    var fnInfo = fn[DYNAMIC_INFO];\n    if (fnInfo) {\n      second = internalCaching ? cachedCleverMerge(fnInfo[1], second) : cleverMerge(fnInfo[1], second);\n      fn = fnInfo[0];\n    }\n    var newFn = function newFn() {\n      var fnResult = fn.apply(void 0, arguments);\n      return internalCaching ? cachedCleverMerge(fnResult, second) : cleverMerge(fnResult, second);\n    };\n    newFn[DYNAMIC_INFO] = [fn, second];\n    return serializeObject(firstObject.static, {\n      byProperty: byProperty,\n      fn: newFn\n    });\n  }\n\n  // If the first part is static only, we merge the static parts and keep the dynamic part of the second argument\n  var secondObject = internalCaching ? cachedParseObject(second) : parseObject(second);\n  var secondInfo = secondObject.static,\n    secondDynamicInfo = secondObject.dynamic;\n  /** @type {Map<string, ObjectParsedPropertyEntry>} */\n  var resultInfo = new Map();\n  var _iterator4 = _createForOfIteratorHelper(firstInfo),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var _step4$value = _slicedToArray(_step4.value, 2),\n        key = _step4$value[0],\n        firstEntry = _step4$value[1];\n      var secondEntry = secondInfo.get(key);\n      var entry = secondEntry !== undefined ? mergeEntries(firstEntry, secondEntry, internalCaching) : firstEntry;\n      resultInfo.set(key, entry);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  var _iterator5 = _createForOfIteratorHelper(secondInfo),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var _step5$value = _slicedToArray(_step5.value, 2),\n        _key2 = _step5$value[0],\n        _secondEntry = _step5$value[1];\n      if (!firstInfo.has(_key2)) {\n        resultInfo.set(_key2, _secondEntry);\n      }\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  return serializeObject(resultInfo, secondDynamicInfo);\n};\n\n/**\n * @param {ObjectParsedPropertyEntry} firstEntry a\n * @param {ObjectParsedPropertyEntry} secondEntry b\n * @param {boolean} internalCaching should parsing of objects and nested merges be cached\n * @returns {ObjectParsedPropertyEntry} new entry\n */\nvar mergeEntries = function mergeEntries(firstEntry, secondEntry, internalCaching) {\n  switch (getValueType(secondEntry.base)) {\n    case VALUE_TYPE_ATOM:\n    case VALUE_TYPE_DELETE:\n      // No need to consider firstEntry at all\n      // second value override everything\n      // = second.base + second.byProperty\n      return secondEntry;\n    case VALUE_TYPE_UNDEFINED:\n      if (!firstEntry.byProperty) {\n        // = first.base + second.byProperty\n        return {\n          base: firstEntry.base,\n          byProperty: secondEntry.byProperty,\n          byValues: secondEntry.byValues\n        };\n      } else if (firstEntry.byProperty !== secondEntry.byProperty) {\n        throw new Error(\"\".concat(firstEntry.byProperty, \" and \").concat(secondEntry.byProperty, \" for a single property is not supported\"));\n      } else {\n        // = first.base + (first.byProperty + second.byProperty)\n        // need to merge first and second byValues\n        var newByValues = new Map(firstEntry.byValues);\n        var _iterator6 = _createForOfIteratorHelper(secondEntry.byValues),\n          _step6;\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var _step6$value = _slicedToArray(_step6.value, 2),\n              key = _step6$value[0],\n              value = _step6$value[1];\n            var firstValue = getFromByValues(firstEntry.byValues, key);\n            newByValues.set(key, mergeSingleValue(firstValue, value, internalCaching));\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n        return {\n          base: firstEntry.base,\n          byProperty: firstEntry.byProperty,\n          byValues: newByValues\n        };\n      }\n    default:\n      {\n        if (!firstEntry.byProperty) {\n          // The simple case\n          // = (first.base + second.base) + second.byProperty\n          return {\n            base: mergeSingleValue(firstEntry.base, secondEntry.base, internalCaching),\n            byProperty: secondEntry.byProperty,\n            byValues: secondEntry.byValues\n          };\n        }\n        var newBase;\n        var intermediateByValues = new Map(firstEntry.byValues);\n        var _iterator7 = _createForOfIteratorHelper(intermediateByValues),\n          _step7;\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var _step7$value = _slicedToArray(_step7.value, 2),\n              _key3 = _step7$value[0],\n              _value = _step7$value[1];\n            intermediateByValues.set(_key3, mergeSingleValue(_value, secondEntry.base, internalCaching));\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n        if (Array.from(firstEntry.byValues.values()).every(function (value) {\n          var type = getValueType(value);\n          return type === VALUE_TYPE_ATOM || type === VALUE_TYPE_DELETE;\n        })) {\n          // = (first.base + second.base) + ((first.byProperty + second.base) + second.byProperty)\n          newBase = mergeSingleValue(firstEntry.base, secondEntry.base, internalCaching);\n        } else {\n          // = first.base + ((first.byProperty (+default) + second.base) + second.byProperty)\n          newBase = firstEntry.base;\n          if (!intermediateByValues.has(\"default\")) intermediateByValues.set(\"default\", secondEntry.base);\n        }\n        if (!secondEntry.byProperty) {\n          // = first.base + (first.byProperty + second.base)\n          return {\n            base: newBase,\n            byProperty: firstEntry.byProperty,\n            byValues: intermediateByValues\n          };\n        } else if (firstEntry.byProperty !== secondEntry.byProperty) {\n          throw new Error(\"\".concat(firstEntry.byProperty, \" and \").concat(secondEntry.byProperty, \" for a single property is not supported\"));\n        }\n        var _newByValues = new Map(intermediateByValues);\n        var _iterator8 = _createForOfIteratorHelper(secondEntry.byValues),\n          _step8;\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var _step8$value = _slicedToArray(_step8.value, 2),\n              _key4 = _step8$value[0],\n              _value2 = _step8$value[1];\n            var _firstValue = getFromByValues(intermediateByValues, _key4);\n            _newByValues.set(_key4, mergeSingleValue(_firstValue, _value2, internalCaching));\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n        return {\n          base: newBase,\n          byProperty: firstEntry.byProperty,\n          byValues: _newByValues\n        };\n      }\n  }\n};\n\n/**\n * @param {Map<string, any>} byValues all values\n * @param {string} key value of the selector\n * @returns {any | undefined} value\n */\nvar getFromByValues = function getFromByValues(byValues, key) {\n  if (key !== \"default\" && byValues.has(key)) {\n    return byValues.get(key);\n  }\n  return byValues.get(\"default\");\n};\n\n/**\n * @param {any} a value\n * @param {any} b value\n * @param {boolean} internalCaching should parsing of objects and nested merges be cached\n * @returns {any} value\n */\nvar mergeSingleValue = function mergeSingleValue(a, b, internalCaching) {\n  var bType = getValueType(b);\n  var aType = getValueType(a);\n  switch (bType) {\n    case VALUE_TYPE_DELETE:\n    case VALUE_TYPE_ATOM:\n      return b;\n    case VALUE_TYPE_OBJECT:\n      {\n        return aType !== VALUE_TYPE_OBJECT ? b : internalCaching ? cachedCleverMerge(a, b) : cleverMerge(a, b);\n      }\n    case VALUE_TYPE_UNDEFINED:\n      return a;\n    case VALUE_TYPE_ARRAY_EXTEND:\n      switch (aType !== VALUE_TYPE_ATOM ? aType : Array.isArray(a) ? VALUE_TYPE_ARRAY_EXTEND : VALUE_TYPE_OBJECT) {\n        case VALUE_TYPE_UNDEFINED:\n          return b;\n        case VALUE_TYPE_DELETE:\n          return b.filter(function (item) {\n            return item !== \"...\";\n          });\n        case VALUE_TYPE_ARRAY_EXTEND:\n          {\n            var newArray = [];\n            var _iterator9 = _createForOfIteratorHelper(b),\n              _step9;\n            try {\n              for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                var item = _step9.value;\n                if (item === \"...\") {\n                  var _iterator10 = _createForOfIteratorHelper(a),\n                    _step10;\n                  try {\n                    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n                      var _item = _step10.value;\n                      newArray.push(_item);\n                    }\n                  } catch (err) {\n                    _iterator10.e(err);\n                  } finally {\n                    _iterator10.f();\n                  }\n                } else {\n                  newArray.push(item);\n                }\n              }\n            } catch (err) {\n              _iterator9.e(err);\n            } finally {\n              _iterator9.f();\n            }\n            return newArray;\n          }\n        case VALUE_TYPE_OBJECT:\n          return b.map(function (item) {\n            return item === \"...\" ? a : item;\n          });\n        default:\n          throw new Error(\"Not implemented\");\n      }\n    default:\n      throw new Error(\"Not implemented\");\n  }\n};\n\n/**\n * @template T\n * @param {T} obj the object\n * @returns {T} the object without operations like \"...\" or DELETE\n */\nvar removeOperations = function removeOperations(obj) {\n  var newObj = /** @type {T} */{};\n  for (var _i6 = 0, _Object$keys6 = Object.keys(obj); _i6 < _Object$keys6.length; _i6++) {\n    var key = _Object$keys6[_i6];\n    var value = obj[key];\n    var type = getValueType(value);\n    switch (type) {\n      case VALUE_TYPE_UNDEFINED:\n      case VALUE_TYPE_DELETE:\n        break;\n      case VALUE_TYPE_OBJECT:\n        newObj[key] = removeOperations(value);\n        break;\n      case VALUE_TYPE_ARRAY_EXTEND:\n        newObj[key] = value.filter(function (i) {\n          return i !== \"...\";\n        });\n        break;\n      default:\n        newObj[key] = value;\n        break;\n    }\n  }\n  return newObj;\n};\n\n/**\n * @template T\n * @template {string} P\n * @param {T} obj the object\n * @param {P} byProperty the by description\n * @param  {...any} values values\n * @returns {Omit<T, P>} object with merged byProperty\n */\nvar resolveByProperty = function resolveByProperty(obj, byProperty) {\n  if (typeof obj !== \"object\" || obj === null || !(byProperty in obj)) {\n    return obj;\n  }\n  var _byValue = /** @type {object} */obj[byProperty],\n    _remaining = _objectWithoutProperties( /** @type {object} */obj, [byProperty].map(_toPropertyKey));\n  var remaining = /** @type {T} */_remaining;\n  var byValue = /** @type {Record<string, T> | function(...any[]): T} */\n  _byValue;\n  for (var _len = arguments.length, values = new Array(_len > 2 ? _len - 2 : 0), _key5 = 2; _key5 < _len; _key5++) {\n    values[_key5 - 2] = arguments[_key5];\n  }\n  if (typeof byValue === \"object\") {\n    var key = values[0];\n    if (key in byValue) {\n      return cachedCleverMerge(remaining, byValue[key]);\n    } else if (\"default\" in byValue) {\n      return cachedCleverMerge(remaining, byValue.default);\n    } else {\n      return (/** @type {T} */remaining\n      );\n    }\n  } else if (typeof byValue === \"function\") {\n    var result = byValue.apply(null, values);\n    return cachedCleverMerge(remaining, resolveByProperty.apply(void 0, [result, byProperty].concat(values)));\n  }\n};\nexports.cachedSetProperty = cachedSetProperty;\nexports.cachedCleverMerge = cachedCleverMerge;\nexports.cleverMerge = cleverMerge;\nexports.resolveByProperty = resolveByProperty;\nexports.removeOperations = removeOperations;\nexports.DELETE = DELETE;","map":{"version":3,"names":["mergeCache","WeakMap","setPropertyCache","DELETE","Symbol","DYNAMIC_INFO","cachedCleverMerge","first","second","undefined","innerCache","get","set","prevMerge","newMerge","_cleverMerge","cachedSetProperty","obj","property","value","mapByProperty","Map","mapByValue","result","parseCache","cachedParseObject","entry","parseObject","info","dynamicInfo","getInfo","p","newEntry","base","byProperty","byValues","Object","keys","key","startsWith","byObj","byValue","Error","otherByValue","has","fn","static","dynamic","serializeObject","values","getFromByValues","VALUE_TYPE_UNDEFINED","VALUE_TYPE_ATOM","VALUE_TYPE_ARRAY_EXTEND","VALUE_TYPE_OBJECT","VALUE_TYPE_DELETE","getValueType","Array","isArray","lastIndexOf","constructor","cleverMerge","internalCaching","firstObject","firstInfo","firstDynamicInfo","fnInfo","newFn","fnResult","secondObject","secondInfo","secondDynamicInfo","resultInfo","firstEntry","secondEntry","mergeEntries","newByValues","firstValue","mergeSingleValue","newBase","intermediateByValues","from","every","type","a","b","bType","aType","filter","item","newArray","push","map","removeOperations","newObj","i","resolveByProperty","_byValue","_remaining","remaining","default","apply","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/util/cleverMerge.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @type {WeakMap<object, WeakMap<object, object>>} */\nconst mergeCache = new WeakMap();\n/** @type {WeakMap<object, Map<string, Map<string|number|boolean, object>>>} */\nconst setPropertyCache = new WeakMap();\nconst DELETE = Symbol(\"DELETE\");\nconst DYNAMIC_INFO = Symbol(\"cleverMerge dynamic info\");\n\n/**\n * Merges two given objects and caches the result to avoid computation if same objects passed as arguments again.\n * @template T\n * @template O\n * @example\n * // performs cleverMerge(first, second), stores the result in WeakMap and returns result\n * cachedCleverMerge({a: 1}, {a: 2})\n * {a: 2}\n *  // when same arguments passed, gets the result from WeakMap and returns it.\n * cachedCleverMerge({a: 1}, {a: 2})\n * {a: 2}\n * @param {T} first first object\n * @param {O} second second object\n * @returns {T & O | T | O} merged object of first and second object\n */\nconst cachedCleverMerge = (first, second) => {\n\tif (second === undefined) return first;\n\tif (first === undefined) return second;\n\tif (typeof second !== \"object\" || second === null) return second;\n\tif (typeof first !== \"object\" || first === null) return first;\n\n\tlet innerCache = mergeCache.get(first);\n\tif (innerCache === undefined) {\n\t\tinnerCache = new WeakMap();\n\t\tmergeCache.set(first, innerCache);\n\t}\n\tconst prevMerge = innerCache.get(second);\n\tif (prevMerge !== undefined) return prevMerge;\n\tconst newMerge = _cleverMerge(first, second, true);\n\tinnerCache.set(second, newMerge);\n\treturn newMerge;\n};\n\n/**\n * @template T\n * @param {Partial<T>} obj object\n * @param {string} property property\n * @param {string|number|boolean} value assignment value\n * @returns {T} new object\n */\nconst cachedSetProperty = (obj, property, value) => {\n\tlet mapByProperty = setPropertyCache.get(obj);\n\n\tif (mapByProperty === undefined) {\n\t\tmapByProperty = new Map();\n\t\tsetPropertyCache.set(obj, mapByProperty);\n\t}\n\n\tlet mapByValue = mapByProperty.get(property);\n\n\tif (mapByValue === undefined) {\n\t\tmapByValue = new Map();\n\t\tmapByProperty.set(property, mapByValue);\n\t}\n\n\tlet result = mapByValue.get(value);\n\n\tif (result) return result;\n\n\tresult = {\n\t\t...obj,\n\t\t[property]: value\n\t};\n\tmapByValue.set(value, result);\n\n\treturn result;\n};\n\n/**\n * @typedef {Object} ObjectParsedPropertyEntry\n * @property {any | undefined} base base value\n * @property {string | undefined} byProperty the name of the selector property\n * @property {Map<string, any>} byValues value depending on selector property, merged with base\n */\n\n/**\n * @typedef {Object} ParsedObject\n * @property {Map<string, ObjectParsedPropertyEntry>} static static properties (key is property name)\n * @property {{ byProperty: string, fn: Function } | undefined} dynamic dynamic part\n */\n\n/** @type {WeakMap<object, ParsedObject>} */\nconst parseCache = new WeakMap();\n\n/**\n * @param {object} obj the object\n * @returns {ParsedObject} parsed object\n */\nconst cachedParseObject = obj => {\n\tconst entry = parseCache.get(obj);\n\tif (entry !== undefined) return entry;\n\tconst result = parseObject(obj);\n\tparseCache.set(obj, result);\n\treturn result;\n};\n\n/**\n * @param {object} obj the object\n * @returns {ParsedObject} parsed object\n */\nconst parseObject = obj => {\n\tconst info = new Map();\n\tlet dynamicInfo;\n\tconst getInfo = p => {\n\t\tconst entry = info.get(p);\n\t\tif (entry !== undefined) return entry;\n\t\tconst newEntry = {\n\t\t\tbase: undefined,\n\t\t\tbyProperty: undefined,\n\t\t\tbyValues: undefined\n\t\t};\n\t\tinfo.set(p, newEntry);\n\t\treturn newEntry;\n\t};\n\tfor (const key of Object.keys(obj)) {\n\t\tif (key.startsWith(\"by\")) {\n\t\t\tconst byProperty = key;\n\t\t\tconst byObj = obj[byProperty];\n\t\t\tif (typeof byObj === \"object\") {\n\t\t\t\tfor (const byValue of Object.keys(byObj)) {\n\t\t\t\t\tconst obj = byObj[byValue];\n\t\t\t\t\tfor (const key of Object.keys(obj)) {\n\t\t\t\t\t\tconst entry = getInfo(key);\n\t\t\t\t\t\tif (entry.byProperty === undefined) {\n\t\t\t\t\t\t\tentry.byProperty = byProperty;\n\t\t\t\t\t\t\tentry.byValues = new Map();\n\t\t\t\t\t\t} else if (entry.byProperty !== byProperty) {\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t`${byProperty} and ${entry.byProperty} for a single property is not supported`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tentry.byValues.set(byValue, obj[key]);\n\t\t\t\t\t\tif (byValue === \"default\") {\n\t\t\t\t\t\t\tfor (const otherByValue of Object.keys(byObj)) {\n\t\t\t\t\t\t\t\tif (!entry.byValues.has(otherByValue))\n\t\t\t\t\t\t\t\t\tentry.byValues.set(otherByValue, undefined);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (typeof byObj === \"function\") {\n\t\t\t\tif (dynamicInfo === undefined) {\n\t\t\t\t\tdynamicInfo = {\n\t\t\t\t\t\tbyProperty: key,\n\t\t\t\t\t\tfn: byObj\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`${key} and ${dynamicInfo.byProperty} when both are functions is not supported`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst entry = getInfo(key);\n\t\t\t\tentry.base = obj[key];\n\t\t\t}\n\t\t} else {\n\t\t\tconst entry = getInfo(key);\n\t\t\tentry.base = obj[key];\n\t\t}\n\t}\n\treturn {\n\t\tstatic: info,\n\t\tdynamic: dynamicInfo\n\t};\n};\n\n/**\n * @param {Map<string, ObjectParsedPropertyEntry>} info static properties (key is property name)\n * @param {{ byProperty: string, fn: Function } | undefined} dynamicInfo dynamic part\n * @returns {object} the object\n */\nconst serializeObject = (info, dynamicInfo) => {\n\tconst obj = {};\n\t// Setup byProperty structure\n\tfor (const entry of info.values()) {\n\t\tif (entry.byProperty !== undefined) {\n\t\t\tconst byObj = (obj[entry.byProperty] = obj[entry.byProperty] || {});\n\t\t\tfor (const byValue of entry.byValues.keys()) {\n\t\t\t\tbyObj[byValue] = byObj[byValue] || {};\n\t\t\t}\n\t\t}\n\t}\n\tfor (const [key, entry] of info) {\n\t\tif (entry.base !== undefined) {\n\t\t\tobj[key] = entry.base;\n\t\t}\n\t\t// Fill byProperty structure\n\t\tif (entry.byProperty !== undefined) {\n\t\t\tconst byObj = (obj[entry.byProperty] = obj[entry.byProperty] || {});\n\t\t\tfor (const byValue of Object.keys(byObj)) {\n\t\t\t\tconst value = getFromByValues(entry.byValues, byValue);\n\t\t\t\tif (value !== undefined) byObj[byValue][key] = value;\n\t\t\t}\n\t\t}\n\t}\n\tif (dynamicInfo !== undefined) {\n\t\tobj[dynamicInfo.byProperty] = dynamicInfo.fn;\n\t}\n\treturn obj;\n};\n\nconst VALUE_TYPE_UNDEFINED = 0;\nconst VALUE_TYPE_ATOM = 1;\nconst VALUE_TYPE_ARRAY_EXTEND = 2;\nconst VALUE_TYPE_OBJECT = 3;\nconst VALUE_TYPE_DELETE = 4;\n\n/**\n * @param {any} value a single value\n * @returns {VALUE_TYPE_UNDEFINED | VALUE_TYPE_ATOM | VALUE_TYPE_ARRAY_EXTEND | VALUE_TYPE_OBJECT | VALUE_TYPE_DELETE} value type\n */\nconst getValueType = value => {\n\tif (value === undefined) {\n\t\treturn VALUE_TYPE_UNDEFINED;\n\t} else if (value === DELETE) {\n\t\treturn VALUE_TYPE_DELETE;\n\t} else if (Array.isArray(value)) {\n\t\tif (value.lastIndexOf(\"...\") !== -1) return VALUE_TYPE_ARRAY_EXTEND;\n\t\treturn VALUE_TYPE_ATOM;\n\t} else if (\n\t\ttypeof value === \"object\" &&\n\t\tvalue !== null &&\n\t\t(!value.constructor || value.constructor === Object)\n\t) {\n\t\treturn VALUE_TYPE_OBJECT;\n\t}\n\treturn VALUE_TYPE_ATOM;\n};\n\n/**\n * Merges two objects. Objects are deeply clever merged.\n * Arrays might reference the old value with \"...\".\n * Non-object values take preference over object values.\n * @template T\n * @template O\n * @param {T} first first object\n * @param {O} second second object\n * @returns {T & O | T | O} merged object of first and second object\n */\nconst cleverMerge = (first, second) => {\n\tif (second === undefined) return first;\n\tif (first === undefined) return second;\n\tif (typeof second !== \"object\" || second === null) return second;\n\tif (typeof first !== \"object\" || first === null) return first;\n\n\treturn _cleverMerge(first, second, false);\n};\n\n/**\n * Merges two objects. Objects are deeply clever merged.\n * @param {object} first first object\n * @param {object} second second object\n * @param {boolean} internalCaching should parsing of objects and nested merges be cached\n * @returns {object} merged object of first and second object\n */\nconst _cleverMerge = (first, second, internalCaching = false) => {\n\tconst firstObject = internalCaching\n\t\t? cachedParseObject(first)\n\t\t: parseObject(first);\n\tconst { static: firstInfo, dynamic: firstDynamicInfo } = firstObject;\n\n\t// If the first argument has a dynamic part we modify the dynamic part to merge the second argument\n\tif (firstDynamicInfo !== undefined) {\n\t\tlet { byProperty, fn } = firstDynamicInfo;\n\t\tconst fnInfo = fn[DYNAMIC_INFO];\n\t\tif (fnInfo) {\n\t\t\tsecond = internalCaching\n\t\t\t\t? cachedCleverMerge(fnInfo[1], second)\n\t\t\t\t: cleverMerge(fnInfo[1], second);\n\t\t\tfn = fnInfo[0];\n\t\t}\n\t\tconst newFn = (...args) => {\n\t\t\tconst fnResult = fn(...args);\n\t\t\treturn internalCaching\n\t\t\t\t? cachedCleverMerge(fnResult, second)\n\t\t\t\t: cleverMerge(fnResult, second);\n\t\t};\n\t\tnewFn[DYNAMIC_INFO] = [fn, second];\n\t\treturn serializeObject(firstObject.static, { byProperty, fn: newFn });\n\t}\n\n\t// If the first part is static only, we merge the static parts and keep the dynamic part of the second argument\n\tconst secondObject = internalCaching\n\t\t? cachedParseObject(second)\n\t\t: parseObject(second);\n\tconst { static: secondInfo, dynamic: secondDynamicInfo } = secondObject;\n\t/** @type {Map<string, ObjectParsedPropertyEntry>} */\n\tconst resultInfo = new Map();\n\tfor (const [key, firstEntry] of firstInfo) {\n\t\tconst secondEntry = secondInfo.get(key);\n\t\tconst entry =\n\t\t\tsecondEntry !== undefined\n\t\t\t\t? mergeEntries(firstEntry, secondEntry, internalCaching)\n\t\t\t\t: firstEntry;\n\t\tresultInfo.set(key, entry);\n\t}\n\tfor (const [key, secondEntry] of secondInfo) {\n\t\tif (!firstInfo.has(key)) {\n\t\t\tresultInfo.set(key, secondEntry);\n\t\t}\n\t}\n\treturn serializeObject(resultInfo, secondDynamicInfo);\n};\n\n/**\n * @param {ObjectParsedPropertyEntry} firstEntry a\n * @param {ObjectParsedPropertyEntry} secondEntry b\n * @param {boolean} internalCaching should parsing of objects and nested merges be cached\n * @returns {ObjectParsedPropertyEntry} new entry\n */\nconst mergeEntries = (firstEntry, secondEntry, internalCaching) => {\n\tswitch (getValueType(secondEntry.base)) {\n\t\tcase VALUE_TYPE_ATOM:\n\t\tcase VALUE_TYPE_DELETE:\n\t\t\t// No need to consider firstEntry at all\n\t\t\t// second value override everything\n\t\t\t// = second.base + second.byProperty\n\t\t\treturn secondEntry;\n\t\tcase VALUE_TYPE_UNDEFINED:\n\t\t\tif (!firstEntry.byProperty) {\n\t\t\t\t// = first.base + second.byProperty\n\t\t\t\treturn {\n\t\t\t\t\tbase: firstEntry.base,\n\t\t\t\t\tbyProperty: secondEntry.byProperty,\n\t\t\t\t\tbyValues: secondEntry.byValues\n\t\t\t\t};\n\t\t\t} else if (firstEntry.byProperty !== secondEntry.byProperty) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`${firstEntry.byProperty} and ${secondEntry.byProperty} for a single property is not supported`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// = first.base + (first.byProperty + second.byProperty)\n\t\t\t\t// need to merge first and second byValues\n\t\t\t\tconst newByValues = new Map(firstEntry.byValues);\n\t\t\t\tfor (const [key, value] of secondEntry.byValues) {\n\t\t\t\t\tconst firstValue = getFromByValues(firstEntry.byValues, key);\n\t\t\t\t\tnewByValues.set(\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tmergeSingleValue(firstValue, value, internalCaching)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tbase: firstEntry.base,\n\t\t\t\t\tbyProperty: firstEntry.byProperty,\n\t\t\t\t\tbyValues: newByValues\n\t\t\t\t};\n\t\t\t}\n\t\tdefault: {\n\t\t\tif (!firstEntry.byProperty) {\n\t\t\t\t// The simple case\n\t\t\t\t// = (first.base + second.base) + second.byProperty\n\t\t\t\treturn {\n\t\t\t\t\tbase: mergeSingleValue(\n\t\t\t\t\t\tfirstEntry.base,\n\t\t\t\t\t\tsecondEntry.base,\n\t\t\t\t\t\tinternalCaching\n\t\t\t\t\t),\n\t\t\t\t\tbyProperty: secondEntry.byProperty,\n\t\t\t\t\tbyValues: secondEntry.byValues\n\t\t\t\t};\n\t\t\t}\n\t\t\tlet newBase;\n\t\t\tconst intermediateByValues = new Map(firstEntry.byValues);\n\t\t\tfor (const [key, value] of intermediateByValues) {\n\t\t\t\tintermediateByValues.set(\n\t\t\t\t\tkey,\n\t\t\t\t\tmergeSingleValue(value, secondEntry.base, internalCaching)\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (\n\t\t\t\tArray.from(firstEntry.byValues.values()).every(value => {\n\t\t\t\t\tconst type = getValueType(value);\n\t\t\t\t\treturn type === VALUE_TYPE_ATOM || type === VALUE_TYPE_DELETE;\n\t\t\t\t})\n\t\t\t) {\n\t\t\t\t// = (first.base + second.base) + ((first.byProperty + second.base) + second.byProperty)\n\t\t\t\tnewBase = mergeSingleValue(\n\t\t\t\t\tfirstEntry.base,\n\t\t\t\t\tsecondEntry.base,\n\t\t\t\t\tinternalCaching\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// = first.base + ((first.byProperty (+default) + second.base) + second.byProperty)\n\t\t\t\tnewBase = firstEntry.base;\n\t\t\t\tif (!intermediateByValues.has(\"default\"))\n\t\t\t\t\tintermediateByValues.set(\"default\", secondEntry.base);\n\t\t\t}\n\t\t\tif (!secondEntry.byProperty) {\n\t\t\t\t// = first.base + (first.byProperty + second.base)\n\t\t\t\treturn {\n\t\t\t\t\tbase: newBase,\n\t\t\t\t\tbyProperty: firstEntry.byProperty,\n\t\t\t\t\tbyValues: intermediateByValues\n\t\t\t\t};\n\t\t\t} else if (firstEntry.byProperty !== secondEntry.byProperty) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`${firstEntry.byProperty} and ${secondEntry.byProperty} for a single property is not supported`\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst newByValues = new Map(intermediateByValues);\n\t\t\tfor (const [key, value] of secondEntry.byValues) {\n\t\t\t\tconst firstValue = getFromByValues(intermediateByValues, key);\n\t\t\t\tnewByValues.set(\n\t\t\t\t\tkey,\n\t\t\t\t\tmergeSingleValue(firstValue, value, internalCaching)\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tbase: newBase,\n\t\t\t\tbyProperty: firstEntry.byProperty,\n\t\t\t\tbyValues: newByValues\n\t\t\t};\n\t\t}\n\t}\n};\n\n/**\n * @param {Map<string, any>} byValues all values\n * @param {string} key value of the selector\n * @returns {any | undefined} value\n */\nconst getFromByValues = (byValues, key) => {\n\tif (key !== \"default\" && byValues.has(key)) {\n\t\treturn byValues.get(key);\n\t}\n\treturn byValues.get(\"default\");\n};\n\n/**\n * @param {any} a value\n * @param {any} b value\n * @param {boolean} internalCaching should parsing of objects and nested merges be cached\n * @returns {any} value\n */\nconst mergeSingleValue = (a, b, internalCaching) => {\n\tconst bType = getValueType(b);\n\tconst aType = getValueType(a);\n\tswitch (bType) {\n\t\tcase VALUE_TYPE_DELETE:\n\t\tcase VALUE_TYPE_ATOM:\n\t\t\treturn b;\n\t\tcase VALUE_TYPE_OBJECT: {\n\t\t\treturn aType !== VALUE_TYPE_OBJECT\n\t\t\t\t? b\n\t\t\t\t: internalCaching\n\t\t\t\t? cachedCleverMerge(a, b)\n\t\t\t\t: cleverMerge(a, b);\n\t\t}\n\t\tcase VALUE_TYPE_UNDEFINED:\n\t\t\treturn a;\n\t\tcase VALUE_TYPE_ARRAY_EXTEND:\n\t\t\tswitch (\n\t\t\t\taType !== VALUE_TYPE_ATOM\n\t\t\t\t\t? aType\n\t\t\t\t\t: Array.isArray(a)\n\t\t\t\t\t? VALUE_TYPE_ARRAY_EXTEND\n\t\t\t\t\t: VALUE_TYPE_OBJECT\n\t\t\t) {\n\t\t\t\tcase VALUE_TYPE_UNDEFINED:\n\t\t\t\t\treturn b;\n\t\t\t\tcase VALUE_TYPE_DELETE:\n\t\t\t\t\treturn b.filter(item => item !== \"...\");\n\t\t\t\tcase VALUE_TYPE_ARRAY_EXTEND: {\n\t\t\t\t\tconst newArray = [];\n\t\t\t\t\tfor (const item of b) {\n\t\t\t\t\t\tif (item === \"...\") {\n\t\t\t\t\t\t\tfor (const item of a) {\n\t\t\t\t\t\t\t\tnewArray.push(item);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnewArray.push(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn newArray;\n\t\t\t\t}\n\t\t\t\tcase VALUE_TYPE_OBJECT:\n\t\t\t\t\treturn b.map(item => (item === \"...\" ? a : item));\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"Not implemented\");\n\t\t\t}\n\t\tdefault:\n\t\t\tthrow new Error(\"Not implemented\");\n\t}\n};\n\n/**\n * @template T\n * @param {T} obj the object\n * @returns {T} the object without operations like \"...\" or DELETE\n */\nconst removeOperations = obj => {\n\tconst newObj = /** @type {T} */ ({});\n\tfor (const key of Object.keys(obj)) {\n\t\tconst value = obj[key];\n\t\tconst type = getValueType(value);\n\t\tswitch (type) {\n\t\t\tcase VALUE_TYPE_UNDEFINED:\n\t\t\tcase VALUE_TYPE_DELETE:\n\t\t\t\tbreak;\n\t\t\tcase VALUE_TYPE_OBJECT:\n\t\t\t\tnewObj[key] = removeOperations(value);\n\t\t\t\tbreak;\n\t\t\tcase VALUE_TYPE_ARRAY_EXTEND:\n\t\t\t\tnewObj[key] = value.filter(i => i !== \"...\");\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tnewObj[key] = value;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn newObj;\n};\n\n/**\n * @template T\n * @template {string} P\n * @param {T} obj the object\n * @param {P} byProperty the by description\n * @param  {...any} values values\n * @returns {Omit<T, P>} object with merged byProperty\n */\nconst resolveByProperty = (obj, byProperty, ...values) => {\n\tif (typeof obj !== \"object\" || obj === null || !(byProperty in obj)) {\n\t\treturn obj;\n\t}\n\tconst { [byProperty]: _byValue, ..._remaining } = /** @type {object} */ (obj);\n\tconst remaining = /** @type {T} */ (_remaining);\n\tconst byValue = /** @type {Record<string, T> | function(...any[]): T} */ (\n\t\t_byValue\n\t);\n\tif (typeof byValue === \"object\") {\n\t\tconst key = values[0];\n\t\tif (key in byValue) {\n\t\t\treturn cachedCleverMerge(remaining, byValue[key]);\n\t\t} else if (\"default\" in byValue) {\n\t\t\treturn cachedCleverMerge(remaining, byValue.default);\n\t\t} else {\n\t\t\treturn /** @type {T} */ (remaining);\n\t\t}\n\t} else if (typeof byValue === \"function\") {\n\t\tconst result = byValue.apply(null, values);\n\t\treturn cachedCleverMerge(\n\t\t\tremaining,\n\t\t\tresolveByProperty(result, byProperty, ...values)\n\t\t);\n\t}\n};\n\nexports.cachedSetProperty = cachedSetProperty;\nexports.cachedCleverMerge = cachedCleverMerge;\nexports.cleverMerge = cleverMerge;\nexports.resolveByProperty = resolveByProperty;\nexports.removeOperations = removeOperations;\nexports.DELETE = DELETE;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}