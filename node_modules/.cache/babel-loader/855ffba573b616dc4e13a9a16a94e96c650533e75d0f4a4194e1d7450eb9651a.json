{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _toConsumableArray = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _slicedToArray = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _regeneratorRuntime = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar path = require(\"path\");\nvar os = require(\"os\");\nvar _require = require(\"@jridgewell/trace-mapping\"),\n  TraceMap = _require.TraceMap,\n  originalPositionFor = _require.originalPositionFor;\nvar _require2 = require(\"schema-utils\"),\n  validate = _require2.validate;\nvar serialize = require(\"serialize-javascript\");\nvar _require3 = require(\"jest-worker\"),\n  Worker = _require3.Worker;\nvar _require4 = require(\"./utils\"),\n  throttleAll = _require4.throttleAll,\n  terserMinify = _require4.terserMinify,\n  uglifyJsMinify = _require4.uglifyJsMinify,\n  swcMinify = _require4.swcMinify,\n  esbuildMinify = _require4.esbuildMinify;\nvar schema = require(\"./options.json\");\nvar _require5 = require(\"./minify\"),\n  minify = _require5.minify;\n/** @typedef {import(\"schema-utils/declarations/validate\").Schema} Schema */\n\n/** @typedef {import(\"webpack\").Compiler} Compiler */\n\n/** @typedef {import(\"webpack\").Compilation} Compilation */\n\n/** @typedef {import(\"webpack\").WebpackError} WebpackError */\n\n/** @typedef {import(\"webpack\").Asset} Asset */\n\n/** @typedef {import(\"./utils.js\").TerserECMA} TerserECMA */\n\n/** @typedef {import(\"./utils.js\").TerserOptions} TerserOptions */\n\n/** @typedef {import(\"jest-worker\").Worker} JestWorker */\n\n/** @typedef {import(\"@jridgewell/trace-mapping\").SourceMapInput} SourceMapInput */\n\n/** @typedef {RegExp | string} Rule */\n\n/** @typedef {Rule[] | Rule} Rules */\n\n/**\n * @callback ExtractCommentsFunction\n * @param {any} astNode\n * @param {{ value: string, type: 'comment1' | 'comment2' | 'comment3' | 'comment4', pos: number, line: number, col: number }} comment\n * @returns {boolean}\n */\n\n/**\n * @typedef {boolean | 'all' | 'some' | RegExp | ExtractCommentsFunction} ExtractCommentsCondition\n */\n\n/**\n * @typedef {string | ((fileData: any) => string)} ExtractCommentsFilename\n */\n\n/**\n * @typedef {boolean | string | ((commentsFile: string) => string)} ExtractCommentsBanner\n */\n\n/**\n * @typedef {Object} ExtractCommentsObject\n * @property {ExtractCommentsCondition} [condition]\n * @property {ExtractCommentsFilename} [filename]\n * @property {ExtractCommentsBanner} [banner]\n */\n\n/**\n * @typedef {ExtractCommentsCondition | ExtractCommentsObject} ExtractCommentsOptions\n */\n\n/**\n * @typedef {Object} MinimizedResult\n * @property {string} code\n * @property {SourceMapInput} [map]\n * @property {Array<Error | string>} [errors]\n * @property {Array<Error | string>} [warnings]\n * @property {Array<string>} [extractedComments]\n */\n\n/**\n * @typedef {{ [file: string]: string }} Input\n */\n\n/**\n * @typedef {{ [key: string]: any }} CustomOptions\n */\n\n/**\n * @template T\n * @typedef {T extends infer U ? U : CustomOptions} InferDefaultType\n */\n\n/**\n * @typedef {Object} PredefinedOptions\n * @property {boolean} [module]\n * @property {TerserECMA} [ecma]\n */\n\n/**\n * @template T\n * @typedef {PredefinedOptions & InferDefaultType<T>} MinimizerOptions\n */\n\n/**\n * @template T\n * @callback BasicMinimizerImplementation\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {MinimizerOptions<T>} minifyOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @returns {Promise<MinimizedResult>}\n */\n\n/**\n * @typedef {object} MinimizeFunctionHelpers\n * @property {() => string | undefined} [getMinimizerVersion]\n */\n\n/**\n * @template T\n * @typedef {BasicMinimizerImplementation<T> & MinimizeFunctionHelpers} MinimizerImplementation\n */\n\n/**\n * @template T\n * @typedef {Object} InternalOptions\n * @property {string} name\n * @property {string} input\n * @property {SourceMapInput | undefined} inputSourceMap\n * @property {ExtractCommentsOptions | undefined} extractComments\n * @property {{ implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> }} minimizer\n */\n\n/**\n * @template T\n * @typedef {JestWorker & { transform: (options: string) => MinimizedResult, minify: (options: InternalOptions<T>) => MinimizedResult }} MinimizerWorker\n */\n\n/**\n * @typedef {undefined | boolean | number} Parallel\n */\n\n/**\n * @typedef {Object} BasePluginOptions\n * @property {Rules} [test]\n * @property {Rules} [include]\n * @property {Rules} [exclude]\n * @property {ExtractCommentsOptions} [extractComments]\n * @property {Parallel} [parallel]\n */\n\n/**\n * @template T\n * @typedef {T extends TerserOptions ? { minify?: MinimizerImplementation<T> | undefined, terserOptions?: MinimizerOptions<T> | undefined } : { minify: MinimizerImplementation<T>, terserOptions?: MinimizerOptions<T> | undefined }} DefinedDefaultMinimizerAndOptions\n */\n\n/**\n * @template T\n * @typedef {BasePluginOptions & { minimizer: { implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> } }} InternalPluginOptions\n */\n\n/**\n * @template [T=TerserOptions]\n */\nvar TerserPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {BasePluginOptions & DefinedDefaultMinimizerAndOptions<T>} [options]\n   */\n  function TerserPlugin(options) {\n    _classCallCheck(this, TerserPlugin);\n    validate( /** @type {Schema} */\n    schema, options || {}, {\n      name: \"Terser Plugin\",\n      baseDataPath: \"options\"\n    }); // TODO make `minimizer` option instead `minify` and `terserOptions` in the next major release, also rename `terserMinify` to `terserMinimize`\n\n    var _ref = options || {},\n      _ref$minify = _ref.minify,\n      minify = _ref$minify === void 0 ? /** @type {MinimizerImplementation<T>} */\n      terserMinify : _ref$minify,\n      _ref$terserOptions = _ref.terserOptions,\n      terserOptions = _ref$terserOptions === void 0 ? /** @type {MinimizerOptions<T>} */\n      {} : _ref$terserOptions,\n      _ref$test = _ref.test,\n      test = _ref$test === void 0 ? /\\.[cm]?js(\\?.*)?$/i : _ref$test,\n      _ref$extractComments = _ref.extractComments,\n      extractComments = _ref$extractComments === void 0 ? true : _ref$extractComments,\n      _ref$parallel = _ref.parallel,\n      parallel = _ref$parallel === void 0 ? true : _ref$parallel,\n      include = _ref.include,\n      exclude = _ref.exclude;\n    /**\n     * @private\n     * @type {InternalPluginOptions<T>}\n     */\n\n    this.options = {\n      test: test,\n      extractComments: extractComments,\n      parallel: parallel,\n      include: include,\n      exclude: exclude,\n      minimizer: {\n        implementation: minify,\n        options: terserOptions\n      }\n    };\n  }\n  /**\n   * @private\n   * @param {any} input\n   * @returns {boolean}\n   */\n  _createClass(TerserPlugin, [{\n    key: \"optimize\",\n    value:\n    /**\n     * @private\n     * @param {Compiler} compiler\n     * @param {Compilation} compilation\n     * @param {Record<string, import(\"webpack\").sources.Source>} assets\n     * @param {{availableNumberOfCores: number}} optimizeOptions\n     * @returns {Promise<void>}\n     */\n    function () {\n      var _optimize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(compiler, compilation, assets, optimizeOptions) {\n        var _this = this;\n        var cache, numberOfAssets, assetsForMinify, getWorker, initializedWorker, numberOfWorkers, _compiler$webpack$sou, SourceMapSource, ConcatSource, RawSource, allExtractedComments, scheduledTasks, _iterator, _step, _loop, limit;\n        return _regeneratorRuntime().wrap(function _callee4$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              cache = compilation.getCache(\"TerserWebpackPlugin\");\n              numberOfAssets = 0;\n              _context5.next = 4;\n              return Promise.all(Object.keys(assets).filter(function (name) {\n                var _compilation$getAsset = /** @type {Asset} */\n                  compilation.getAsset(name),\n                  info = _compilation$getAsset.info;\n                if (\n                // Skip double minimize assets from child compilation\n                info.minimized ||\n                // Skip minimizing for extracted comments assets\n                info.extractedComments) {\n                  return false;\n                }\n                if (!compiler.webpack.ModuleFilenameHelpers.matchObject.bind(\n                // eslint-disable-next-line no-undefined\n                undefined, _this.options)(name)) {\n                  return false;\n                }\n                return true;\n              }).map( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(name) {\n                  var _compilation$getAsset2, info, source, eTag, cacheItem, output;\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        _compilation$getAsset2 = /** @type {Asset} */\n                        compilation.getAsset(name), info = _compilation$getAsset2.info, source = _compilation$getAsset2.source;\n                        eTag = cache.getLazyHashedEtag(source);\n                        cacheItem = cache.getItemCache(name, eTag);\n                        _context.next = 5;\n                        return cacheItem.getPromise();\n                      case 5:\n                        output = _context.sent;\n                        if (!output) {\n                          numberOfAssets += 1;\n                        }\n                        return _context.abrupt(\"return\", {\n                          name: name,\n                          info: info,\n                          inputSource: source,\n                          output: output,\n                          cacheItem: cacheItem\n                        });\n                      case 8:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }));\n                return function (_x5) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()));\n            case 4:\n              assetsForMinify = _context5.sent;\n              if (!(assetsForMinify.length === 0)) {\n                _context5.next = 7;\n                break;\n              }\n              return _context5.abrupt(\"return\");\n            case 7:\n              if (optimizeOptions.availableNumberOfCores > 0) {\n                // Do not create unnecessary workers when the number of files is less than the available cores, it saves memory\n                numberOfWorkers = Math.min(numberOfAssets, optimizeOptions.availableNumberOfCores); // eslint-disable-next-line consistent-return\n\n                getWorker = function getWorker() {\n                  if (initializedWorker) {\n                    return initializedWorker;\n                  }\n                  initializedWorker = /** @type {MinimizerWorker<T>} */\n                  new Worker(require.resolve(\"./minify\"), {\n                    numWorkers: numberOfWorkers,\n                    enableWorkerThreads: true\n                  }); // https://github.com/facebook/jest/issues/8872#issuecomment-524822081\n\n                  var workerStdout = initializedWorker.getStdout();\n                  if (workerStdout) {\n                    workerStdout.on(\"data\", function (chunk) {\n                      return process.stdout.write(chunk);\n                    });\n                  }\n                  var workerStderr = initializedWorker.getStderr();\n                  if (workerStderr) {\n                    workerStderr.on(\"data\", function (chunk) {\n                      return process.stderr.write(chunk);\n                    });\n                  }\n                  return initializedWorker;\n                };\n              }\n              _compiler$webpack$sou = compiler.webpack.sources, SourceMapSource = _compiler$webpack$sou.SourceMapSource, ConcatSource = _compiler$webpack$sou.ConcatSource, RawSource = _compiler$webpack$sou.RawSource;\n              /** @typedef {{ extractedCommentsSource : import(\"webpack\").sources.RawSource, commentsFilename: string }} ExtractedCommentsInfo */\n              /** @type {Map<string, ExtractedCommentsInfo>} */\n              allExtractedComments = new Map();\n              scheduledTasks = [];\n              _iterator = _createForOfIteratorHelper(assetsForMinify);\n              _context5.prev = 12;\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var asset;\n                return _regeneratorRuntime().wrap(function _loop$(_context4) {\n                  while (1) switch (_context4.prev = _context4.next) {\n                    case 0:\n                      asset = _step.value;\n                      scheduledTasks.push( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n                        var name, inputSource, info, cacheItem, output, input, inputSourceMap, _inputSource$sourceAn, sourceFromInputSource, map, options, hasSourceMap, _hasSourceMap, shebang, firstNewlinePosition, commentsFilename, query, filename, querySplit, lastSlashIndex, basename, data, banner, extractedCommentsString, _iterator2, _step2, warning, _iterator3, _step3, error, newInfo, _output, source, extractedCommentsSource, _output2, _commentsFilename;\n                        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                          while (1) switch (_context3.prev = _context3.next) {\n                            case 0:\n                              name = asset.name, inputSource = asset.inputSource, info = asset.info, cacheItem = asset.cacheItem;\n                              output = asset.output;\n                              if (output) {\n                                _context3.next = 31;\n                                break;\n                              }\n                              /** @type {SourceMapInput | undefined} */\n                              _inputSource$sourceAn = inputSource.sourceAndMap(), sourceFromInputSource = _inputSource$sourceAn.source, map = _inputSource$sourceAn.map;\n                              input = sourceFromInputSource;\n                              if (map) {\n                                if (!TerserPlugin.isSourceMap(map)) {\n                                  compilation.warnings.push( /** @type {WebpackError} */\n                                  new Error(\"\".concat(name, \" contains invalid source map\")));\n                                } else {\n                                  inputSourceMap = /** @type {SourceMapInput} */\n                                  map;\n                                }\n                              }\n                              if (Buffer.isBuffer(input)) {\n                                input = input.toString();\n                              }\n                              /**\n                               * @type {InternalOptions<T>}\n                               */\n                              options = {\n                                name: name,\n                                input: input,\n                                inputSourceMap: inputSourceMap,\n                                minimizer: {\n                                  implementation: _this.options.minimizer.implementation,\n                                  // @ts-ignore https://github.com/Microsoft/TypeScript/issues/10727\n                                  options: _objectSpread({}, _this.options.minimizer.options)\n                                },\n                                extractComments: _this.options.extractComments\n                              };\n                              if (typeof options.minimizer.options.module === \"undefined\") {\n                                if (typeof info.javascriptModule !== \"undefined\") {\n                                  options.minimizer.options.module = info.javascriptModule;\n                                } else if (/\\.mjs(\\?.*)?$/i.test(name)) {\n                                  options.minimizer.options.module = true;\n                                } else if (/\\.cjs(\\?.*)?$/i.test(name)) {\n                                  options.minimizer.options.module = false;\n                                }\n                              }\n                              if (typeof options.minimizer.options.ecma === \"undefined\") {\n                                options.minimizer.options.ecma = TerserPlugin.getEcmaVersion(compiler.options.output.environment || {});\n                              }\n                              _context3.prev = 10;\n                              _context3.next = 13;\n                              return getWorker ? getWorker().transform(serialize(options)) : minify(options);\n                            case 13:\n                              output = _context3.sent;\n                              _context3.next = 21;\n                              break;\n                            case 16:\n                              _context3.prev = 16;\n                              _context3.t0 = _context3[\"catch\"](10);\n                              hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n                              compilation.errors.push( /** @type {WebpackError} */\n                              TerserPlugin.buildError(_context3.t0, name, hasSourceMap ? new TraceMap( /** @type {SourceMapInput} */\n                              inputSourceMap) :\n                              // eslint-disable-next-line no-undefined\n                              undefined,\n                              // eslint-disable-next-line no-undefined\n                              hasSourceMap ? compilation.requestShortener : undefined));\n                              return _context3.abrupt(\"return\");\n                            case 21:\n                              if (!(typeof output.code === \"undefined\")) {\n                                _context3.next = 24;\n                                break;\n                              }\n                              compilation.errors.push( /** @type {WebpackError} */\n                              new Error(\"\".concat(name, \" from Terser plugin\\nMinimizer doesn't return result\")));\n                              return _context3.abrupt(\"return\");\n                            case 24:\n                              if (output.warnings && output.warnings.length > 0) {\n                                output.warnings = output.warnings.map(\n                                /**\n                                 * @param {Error | string} item\n                                 */\n                                function (item) {\n                                  return TerserPlugin.buildWarning(item, name);\n                                });\n                              }\n                              if (output.errors && output.errors.length > 0) {\n                                _hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n                                output.errors = output.errors.map(\n                                /**\n                                 * @param {Error | string} item\n                                 */\n                                function (item) {\n                                  return TerserPlugin.buildError(item, name, _hasSourceMap ? new TraceMap( /** @type {SourceMapInput} */\n                                  inputSourceMap) :\n                                  // eslint-disable-next-line no-undefined\n                                  undefined,\n                                  // eslint-disable-next-line no-undefined\n                                  _hasSourceMap ? compilation.requestShortener : undefined);\n                                });\n                              }\n                              if ( /** @type {ExtractCommentsObject} */\n                              _this.options.extractComments.banner !== false && output.extractedComments && output.extractedComments.length > 0 && output.code.startsWith(\"#!\")) {\n                                firstNewlinePosition = output.code.indexOf(\"\\n\");\n                                shebang = output.code.substring(0, firstNewlinePosition);\n                                output.code = output.code.substring(firstNewlinePosition + 1);\n                              }\n                              if (output.map) {\n                                output.source = new SourceMapSource(output.code, name, output.map, input, /** @type {SourceMapInput} */\n                                inputSourceMap, true);\n                              } else {\n                                output.source = new RawSource(output.code);\n                              }\n                              if (output.extractedComments && output.extractedComments.length > 0) {\n                                commentsFilename = /** @type {ExtractCommentsObject} */\n                                _this.options.extractComments.filename || \"[file].LICENSE.txt[query]\";\n                                query = \"\";\n                                filename = name;\n                                querySplit = filename.indexOf(\"?\");\n                                if (querySplit >= 0) {\n                                  query = filename.slice(querySplit);\n                                  filename = filename.slice(0, querySplit);\n                                }\n                                lastSlashIndex = filename.lastIndexOf(\"/\");\n                                basename = lastSlashIndex === -1 ? filename : filename.slice(lastSlashIndex + 1);\n                                data = {\n                                  filename: filename,\n                                  basename: basename,\n                                  query: query\n                                };\n                                output.commentsFilename = compilation.getPath(commentsFilename, data);\n                                // Add a banner to the original file\n\n                                if ( /** @type {ExtractCommentsObject} */\n                                _this.options.extractComments.banner !== false) {\n                                  banner = /** @type {ExtractCommentsObject} */\n                                  _this.options.extractComments.banner || \"For license information please see \".concat(path.relative(path.dirname(name), output.commentsFilename).replace(/\\\\/g, \"/\"));\n                                  if (typeof banner === \"function\") {\n                                    banner = banner(output.commentsFilename);\n                                  }\n                                  if (banner) {\n                                    output.source = new ConcatSource(shebang ? \"\".concat(shebang, \"\\n\") : \"\", \"/*! \".concat(banner, \" */\\n\"), output.source);\n                                  }\n                                }\n                                extractedCommentsString = output.extractedComments.sort().join(\"\\n\\n\");\n                                output.extractedCommentsSource = new RawSource(\"\".concat(extractedCommentsString, \"\\n\"));\n                              }\n                              _context3.next = 31;\n                              return cacheItem.storePromise({\n                                source: output.source,\n                                errors: output.errors,\n                                warnings: output.warnings,\n                                commentsFilename: output.commentsFilename,\n                                extractedCommentsSource: output.extractedCommentsSource\n                              });\n                            case 31:\n                              if (output.warnings && output.warnings.length > 0) {\n                                _iterator2 = _createForOfIteratorHelper(output.warnings);\n                                try {\n                                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                                    warning = _step2.value;\n                                    compilation.warnings.push( /** @type {WebpackError} */\n                                    warning);\n                                  }\n                                } catch (err) {\n                                  _iterator2.e(err);\n                                } finally {\n                                  _iterator2.f();\n                                }\n                              }\n                              if (output.errors && output.errors.length > 0) {\n                                _iterator3 = _createForOfIteratorHelper(output.errors);\n                                try {\n                                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                                    error = _step3.value;\n                                    compilation.errors.push( /** @type {WebpackError} */\n                                    error);\n                                  }\n                                } catch (err) {\n                                  _iterator3.e(err);\n                                } finally {\n                                  _iterator3.f();\n                                }\n                              }\n                              /** @type {Record<string, any>} */\n                              newInfo = {\n                                minimized: true\n                              };\n                              _output = output, source = _output.source, extractedCommentsSource = _output.extractedCommentsSource; // Write extracted comments to commentsFilename\n                              if (extractedCommentsSource) {\n                                _output2 = output, _commentsFilename = _output2.commentsFilename;\n                                newInfo.related = {\n                                  license: _commentsFilename\n                                };\n                                allExtractedComments.set(name, {\n                                  extractedCommentsSource: extractedCommentsSource,\n                                  commentsFilename: _commentsFilename\n                                });\n                              }\n                              compilation.updateAsset(name, source, newInfo);\n                            case 37:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }, _callee3, null, [[10, 16]]);\n                      })));\n                    case 2:\n                    case \"end\":\n                      return _context4.stop();\n                  }\n                }, _loop);\n              });\n              _iterator.s();\n            case 15:\n              if ((_step = _iterator.n()).done) {\n                _context5.next = 19;\n                break;\n              }\n              return _context5.delegateYield(_loop(), \"t0\", 17);\n            case 17:\n              _context5.next = 15;\n              break;\n            case 19:\n              _context5.next = 24;\n              break;\n            case 21:\n              _context5.prev = 21;\n              _context5.t1 = _context5[\"catch\"](12);\n              _iterator.e(_context5.t1);\n            case 24:\n              _context5.prev = 24;\n              _iterator.f();\n              return _context5.finish(24);\n            case 27:\n              limit = getWorker && numberOfAssets > 0 ? /** @type {number} */\n              numberOfWorkers : scheduledTasks.length;\n              _context5.next = 30;\n              return throttleAll(limit, scheduledTasks);\n            case 30:\n              if (!initializedWorker) {\n                _context5.next = 33;\n                break;\n              }\n              _context5.next = 33;\n              return initializedWorker.end();\n            case 33:\n              _context5.next = 35;\n              return Array.from(allExtractedComments).sort().reduce(\n              /*#__PURE__*/\n              /**\n               * @param {Promise<unknown>} previousPromise\n               * @param {[string, ExtractedCommentsInfo]} extractedComments\n               * @returns {Promise<ExtractedCommentsInfoWIthFrom>}\n               */\n              function () {\n                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(previousPromise, _ref3) {\n                  var _ref5, from, value, previous, commentsFilename, extractedCommentsSource, previousFrom, prevSource, mergedName, name, eTag, source, existingAsset;\n                  return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                    while (1) switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _ref5 = _slicedToArray(_ref3, 2), from = _ref5[0], value = _ref5[1];\n                        _context2.next = 3;\n                        return previousPromise;\n                      case 3:\n                        previous = _context2.sent;\n                        commentsFilename = value.commentsFilename, extractedCommentsSource = value.extractedCommentsSource;\n                        if (!(previous && previous.commentsFilename === commentsFilename)) {\n                          _context2.next = 19;\n                          break;\n                        }\n                        previousFrom = previous.from, prevSource = previous.source;\n                        mergedName = \"\".concat(previousFrom, \"|\").concat(from);\n                        name = \"\".concat(commentsFilename, \"|\").concat(mergedName);\n                        eTag = [prevSource, extractedCommentsSource].map(function (item) {\n                          return cache.getLazyHashedEtag(item);\n                        }).reduce(function (previousValue, currentValue) {\n                          return cache.mergeEtags(previousValue, currentValue);\n                        });\n                        _context2.next = 12;\n                        return cache.getPromise(name, eTag);\n                      case 12:\n                        source = _context2.sent;\n                        if (source) {\n                          _context2.next = 17;\n                          break;\n                        }\n                        source = new ConcatSource(Array.from(new Set([].concat(_toConsumableArray( /** @type {string}*/\n                        prevSource.source().split(\"\\n\\n\")), _toConsumableArray( /** @type {string}*/\n                        extractedCommentsSource.source().split(\"\\n\\n\"))))).join(\"\\n\\n\"));\n                        _context2.next = 17;\n                        return cache.storePromise(name, eTag, source);\n                      case 17:\n                        compilation.updateAsset(commentsFilename, source);\n                        return _context2.abrupt(\"return\", {\n                          source: source,\n                          commentsFilename: commentsFilename,\n                          from: mergedName\n                        });\n                      case 19:\n                        existingAsset = compilation.getAsset(commentsFilename);\n                        if (!existingAsset) {\n                          _context2.next = 22;\n                          break;\n                        }\n                        return _context2.abrupt(\"return\", {\n                          source: existingAsset.source,\n                          commentsFilename: commentsFilename,\n                          from: commentsFilename\n                        });\n                      case 22:\n                        compilation.emitAsset(commentsFilename, extractedCommentsSource, {\n                          extractedComments: true\n                        });\n                        return _context2.abrupt(\"return\", {\n                          source: extractedCommentsSource,\n                          commentsFilename: commentsFilename,\n                          from: from\n                        });\n                      case 24:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }, _callee2);\n                }));\n                return function (_x6, _x7) {\n                  return _ref4.apply(this, arguments);\n                };\n              }(), /** @type {Promise<unknown>} */\n              Promise.resolve());\n            case 35:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee4, null, [[12, 21, 24, 27]]);\n      }));\n      function optimize(_x, _x2, _x3, _x4) {\n        return _optimize.apply(this, arguments);\n      }\n      return optimize;\n    }()\n    /**\n     * @private\n     * @param {any} environment\n     * @returns {TerserECMA}\n     */\n  }, {\n    key: \"apply\",\n    value:\n    /**\n     * @param {Compiler} compiler\n     * @returns {void}\n     */\n\n    function apply(compiler) {\n      var _this2 = this;\n      var pluginName = this.constructor.name;\n      var availableNumberOfCores = TerserPlugin.getAvailableNumberOfCores(this.options.parallel);\n      compiler.hooks.compilation.tap(pluginName, function (compilation) {\n        var hooks = compiler.webpack.javascript.JavascriptModulesPlugin.getCompilationHooks(compilation);\n        var data = serialize({\n          minimizer: typeof _this2.options.minimizer.implementation.getMinimizerVersion !== \"undefined\" ? _this2.options.minimizer.implementation.getMinimizerVersion() || \"0.0.0\" : \"0.0.0\",\n          options: _this2.options.minimizer.options\n        });\n        hooks.chunkHash.tap(pluginName, function (chunk, hash) {\n          hash.update(\"TerserPlugin\");\n          hash.update(data);\n        });\n        compilation.hooks.processAssets.tapPromise({\n          name: pluginName,\n          stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n          additionalAssets: true\n        }, function (assets) {\n          return _this2.optimize(compiler, compilation, assets, {\n            availableNumberOfCores: availableNumberOfCores\n          });\n        });\n        compilation.hooks.statsPrinter.tap(pluginName, function (stats) {\n          stats.hooks.print.for(\"asset.info.minimized\").tap(\"terser-webpack-plugin\", function (minimized, _ref7) {\n            var green = _ref7.green,\n              formatFlag = _ref7.formatFlag;\n            return minimized ? /** @type {Function} */\n            green( /** @type {Function} */\n            formatFlag(\"minimized\")) : \"\";\n          });\n        });\n      });\n    }\n  }], [{\n    key: \"isSourceMap\",\n    value: function isSourceMap(input) {\n      // All required options for `new TraceMap(...options)`\n      // https://github.com/jridgewell/trace-mapping#usage\n      return Boolean(input && input.version && input.sources && Array.isArray(input.sources) && typeof input.mappings === \"string\");\n    }\n    /**\n     * @private\n     * @param {unknown} warning\n     * @param {string} file\n     * @returns {Error}\n     */\n  }, {\n    key: \"buildWarning\",\n    value: function buildWarning(warning, file) {\n      /**\n       * @type {Error & { hideStack: true, file: string }}\n       */\n      // @ts-ignore\n      var builtWarning = new Error(warning.toString());\n      builtWarning.name = \"Warning\";\n      builtWarning.hideStack = true;\n      builtWarning.file = file;\n      return builtWarning;\n    }\n    /**\n     * @private\n     * @param {any} error\n     * @param {string} file\n     * @param {TraceMap} [sourceMap]\n     * @param {Compilation[\"requestShortener\"]} [requestShortener]\n     * @returns {Error}\n     */\n  }, {\n    key: \"buildError\",\n    value: function buildError(error, file, sourceMap, requestShortener) {\n      /**\n       * @type {Error & { file?: string }}\n       */\n      var builtError;\n      if (typeof error === \"string\") {\n        builtError = new Error(\"\".concat(file, \" from Terser plugin\\n\").concat(error));\n        builtError.file = file;\n        return builtError;\n      }\n      if (error.line) {\n        var original = sourceMap && originalPositionFor(sourceMap, {\n          line: error.line,\n          column: error.col\n        });\n        if (original && original.source && requestShortener) {\n          builtError = new Error(\"\".concat(file, \" from Terser plugin\\n\").concat(error.message, \" [\").concat(requestShortener.shorten(original.source), \":\").concat(original.line, \",\").concat(original.column, \"][\").concat(file, \":\").concat(error.line, \",\").concat(error.col, \"]\").concat(error.stack ? \"\\n\".concat(error.stack.split(\"\\n\").slice(1).join(\"\\n\")) : \"\"));\n          builtError.file = file;\n          return builtError;\n        }\n        builtError = new Error(\"\".concat(file, \" from Terser plugin\\n\").concat(error.message, \" [\").concat(file, \":\").concat(error.line, \",\").concat(error.col, \"]\").concat(error.stack ? \"\\n\".concat(error.stack.split(\"\\n\").slice(1).join(\"\\n\")) : \"\"));\n        builtError.file = file;\n        return builtError;\n      }\n      if (error.stack) {\n        builtError = new Error(\"\".concat(file, \" from Terser plugin\\n\").concat(typeof error.message !== \"undefined\" ? error.message : \"\", \"\\n\").concat(error.stack));\n        builtError.file = file;\n        return builtError;\n      }\n      builtError = new Error(\"\".concat(file, \" from Terser plugin\\n\").concat(error.message));\n      builtError.file = file;\n      return builtError;\n    }\n    /**\n     * @private\n     * @param {Parallel} parallel\n     * @returns {number}\n     */\n  }, {\n    key: \"getAvailableNumberOfCores\",\n    value: function getAvailableNumberOfCores(parallel) {\n      // In some cases cpus() returns undefined\n      // https://github.com/nodejs/node/issues/19022\n      var cpus = os.cpus() || {\n        length: 1\n      };\n      return parallel === true ? cpus.length - 1 : Math.min(Number(parallel) || 0, cpus.length - 1);\n    }\n  }, {\n    key: \"getEcmaVersion\",\n    value: function getEcmaVersion(environment) {\n      // ES 6th\n      if (environment.arrowFunction || environment.const || environment.destructuring || environment.forOf || environment.module) {\n        return 2015;\n      } // ES 11th\n\n      if (environment.bigIntLiteral || environment.dynamicImport) {\n        return 2020;\n      }\n      return 5;\n    }\n  }]);\n  return TerserPlugin;\n}();\nTerserPlugin.terserMinify = terserMinify;\nTerserPlugin.uglifyJsMinify = uglifyJsMinify;\nTerserPlugin.swcMinify = swcMinify;\nTerserPlugin.esbuildMinify = esbuildMinify;\nmodule.exports = TerserPlugin;","map":{"version":3,"names":["path","require","os","TraceMap","originalPositionFor","validate","serialize","Worker","throttleAll","terserMinify","uglifyJsMinify","swcMinify","esbuildMinify","schema","minify","TerserPlugin","options","name","baseDataPath","terserOptions","test","extractComments","parallel","include","exclude","minimizer","implementation","compiler","compilation","assets","optimizeOptions","cache","getCache","numberOfAssets","Promise","all","Object","keys","filter","getAsset","info","minimized","extractedComments","webpack","ModuleFilenameHelpers","matchObject","bind","undefined","map","source","eTag","getLazyHashedEtag","cacheItem","getItemCache","getPromise","output","inputSource","assetsForMinify","length","availableNumberOfCores","numberOfWorkers","Math","min","getWorker","initializedWorker","resolve","numWorkers","enableWorkerThreads","workerStdout","getStdout","on","chunk","process","stdout","write","workerStderr","getStderr","stderr","sources","SourceMapSource","ConcatSource","RawSource","allExtractedComments","Map","scheduledTasks","asset","push","sourceAndMap","sourceFromInputSource","input","isSourceMap","warnings","Error","inputSourceMap","Buffer","isBuffer","toString","module","javascriptModule","ecma","getEcmaVersion","environment","transform","hasSourceMap","errors","buildError","requestShortener","code","item","buildWarning","banner","startsWith","firstNewlinePosition","indexOf","shebang","substring","commentsFilename","filename","query","querySplit","slice","lastSlashIndex","lastIndexOf","basename","data","getPath","relative","dirname","replace","extractedCommentsString","sort","join","extractedCommentsSource","storePromise","warning","error","newInfo","related","license","set","updateAsset","limit","end","Array","from","reduce","previousPromise","value","previous","previousFrom","prevSource","mergedName","previousValue","currentValue","mergeEtags","Set","split","existingAsset","emitAsset","pluginName","constructor","getAvailableNumberOfCores","hooks","tap","javascript","JavascriptModulesPlugin","getCompilationHooks","getMinimizerVersion","chunkHash","hash","update","processAssets","tapPromise","stage","Compilation","PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE","additionalAssets","optimize","statsPrinter","stats","print","for","green","formatFlag","Boolean","version","isArray","mappings","file","builtWarning","hideStack","sourceMap","builtError","line","original","column","col","message","shorten","stack","cpus","Number","arrowFunction","const","destructuring","forOf","bigIntLiteral","dynamicImport","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/terser-webpack-plugin/dist/index.js"],"sourcesContent":["\"use strict\";\n\nconst path = require(\"path\");\n\nconst os = require(\"os\");\n\nconst {\n  TraceMap,\n  originalPositionFor\n} = require(\"@jridgewell/trace-mapping\");\n\nconst {\n  validate\n} = require(\"schema-utils\");\n\nconst serialize = require(\"serialize-javascript\");\n\nconst {\n  Worker\n} = require(\"jest-worker\");\n\nconst {\n  throttleAll,\n  terserMinify,\n  uglifyJsMinify,\n  swcMinify,\n  esbuildMinify\n} = require(\"./utils\");\n\nconst schema = require(\"./options.json\");\n\nconst {\n  minify\n} = require(\"./minify\");\n/** @typedef {import(\"schema-utils/declarations/validate\").Schema} Schema */\n\n/** @typedef {import(\"webpack\").Compiler} Compiler */\n\n/** @typedef {import(\"webpack\").Compilation} Compilation */\n\n/** @typedef {import(\"webpack\").WebpackError} WebpackError */\n\n/** @typedef {import(\"webpack\").Asset} Asset */\n\n/** @typedef {import(\"./utils.js\").TerserECMA} TerserECMA */\n\n/** @typedef {import(\"./utils.js\").TerserOptions} TerserOptions */\n\n/** @typedef {import(\"jest-worker\").Worker} JestWorker */\n\n/** @typedef {import(\"@jridgewell/trace-mapping\").SourceMapInput} SourceMapInput */\n\n/** @typedef {RegExp | string} Rule */\n\n/** @typedef {Rule[] | Rule} Rules */\n\n/**\n * @callback ExtractCommentsFunction\n * @param {any} astNode\n * @param {{ value: string, type: 'comment1' | 'comment2' | 'comment3' | 'comment4', pos: number, line: number, col: number }} comment\n * @returns {boolean}\n */\n\n/**\n * @typedef {boolean | 'all' | 'some' | RegExp | ExtractCommentsFunction} ExtractCommentsCondition\n */\n\n/**\n * @typedef {string | ((fileData: any) => string)} ExtractCommentsFilename\n */\n\n/**\n * @typedef {boolean | string | ((commentsFile: string) => string)} ExtractCommentsBanner\n */\n\n/**\n * @typedef {Object} ExtractCommentsObject\n * @property {ExtractCommentsCondition} [condition]\n * @property {ExtractCommentsFilename} [filename]\n * @property {ExtractCommentsBanner} [banner]\n */\n\n/**\n * @typedef {ExtractCommentsCondition | ExtractCommentsObject} ExtractCommentsOptions\n */\n\n/**\n * @typedef {Object} MinimizedResult\n * @property {string} code\n * @property {SourceMapInput} [map]\n * @property {Array<Error | string>} [errors]\n * @property {Array<Error | string>} [warnings]\n * @property {Array<string>} [extractedComments]\n */\n\n/**\n * @typedef {{ [file: string]: string }} Input\n */\n\n/**\n * @typedef {{ [key: string]: any }} CustomOptions\n */\n\n/**\n * @template T\n * @typedef {T extends infer U ? U : CustomOptions} InferDefaultType\n */\n\n/**\n * @typedef {Object} PredefinedOptions\n * @property {boolean} [module]\n * @property {TerserECMA} [ecma]\n */\n\n/**\n * @template T\n * @typedef {PredefinedOptions & InferDefaultType<T>} MinimizerOptions\n */\n\n/**\n * @template T\n * @callback BasicMinimizerImplementation\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {MinimizerOptions<T>} minifyOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @returns {Promise<MinimizedResult>}\n */\n\n/**\n * @typedef {object} MinimizeFunctionHelpers\n * @property {() => string | undefined} [getMinimizerVersion]\n */\n\n/**\n * @template T\n * @typedef {BasicMinimizerImplementation<T> & MinimizeFunctionHelpers} MinimizerImplementation\n */\n\n/**\n * @template T\n * @typedef {Object} InternalOptions\n * @property {string} name\n * @property {string} input\n * @property {SourceMapInput | undefined} inputSourceMap\n * @property {ExtractCommentsOptions | undefined} extractComments\n * @property {{ implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> }} minimizer\n */\n\n/**\n * @template T\n * @typedef {JestWorker & { transform: (options: string) => MinimizedResult, minify: (options: InternalOptions<T>) => MinimizedResult }} MinimizerWorker\n */\n\n/**\n * @typedef {undefined | boolean | number} Parallel\n */\n\n/**\n * @typedef {Object} BasePluginOptions\n * @property {Rules} [test]\n * @property {Rules} [include]\n * @property {Rules} [exclude]\n * @property {ExtractCommentsOptions} [extractComments]\n * @property {Parallel} [parallel]\n */\n\n/**\n * @template T\n * @typedef {T extends TerserOptions ? { minify?: MinimizerImplementation<T> | undefined, terserOptions?: MinimizerOptions<T> | undefined } : { minify: MinimizerImplementation<T>, terserOptions?: MinimizerOptions<T> | undefined }} DefinedDefaultMinimizerAndOptions\n */\n\n/**\n * @template T\n * @typedef {BasePluginOptions & { minimizer: { implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> } }} InternalPluginOptions\n */\n\n/**\n * @template [T=TerserOptions]\n */\n\n\nclass TerserPlugin {\n  /**\n   * @param {BasePluginOptions & DefinedDefaultMinimizerAndOptions<T>} [options]\n   */\n  constructor(options) {\n    validate(\n    /** @type {Schema} */\n    schema, options || {}, {\n      name: \"Terser Plugin\",\n      baseDataPath: \"options\"\n    }); // TODO make `minimizer` option instead `minify` and `terserOptions` in the next major release, also rename `terserMinify` to `terserMinimize`\n\n    const {\n      minify =\n      /** @type {MinimizerImplementation<T>} */\n      terserMinify,\n      terserOptions =\n      /** @type {MinimizerOptions<T>} */\n      {},\n      test = /\\.[cm]?js(\\?.*)?$/i,\n      extractComments = true,\n      parallel = true,\n      include,\n      exclude\n    } = options || {};\n    /**\n     * @private\n     * @type {InternalPluginOptions<T>}\n     */\n\n    this.options = {\n      test,\n      extractComments,\n      parallel,\n      include,\n      exclude,\n      minimizer: {\n        implementation: minify,\n        options: terserOptions\n      }\n    };\n  }\n  /**\n   * @private\n   * @param {any} input\n   * @returns {boolean}\n   */\n\n\n  static isSourceMap(input) {\n    // All required options for `new TraceMap(...options)`\n    // https://github.com/jridgewell/trace-mapping#usage\n    return Boolean(input && input.version && input.sources && Array.isArray(input.sources) && typeof input.mappings === \"string\");\n  }\n  /**\n   * @private\n   * @param {unknown} warning\n   * @param {string} file\n   * @returns {Error}\n   */\n\n\n  static buildWarning(warning, file) {\n    /**\n     * @type {Error & { hideStack: true, file: string }}\n     */\n    // @ts-ignore\n    const builtWarning = new Error(warning.toString());\n    builtWarning.name = \"Warning\";\n    builtWarning.hideStack = true;\n    builtWarning.file = file;\n    return builtWarning;\n  }\n  /**\n   * @private\n   * @param {any} error\n   * @param {string} file\n   * @param {TraceMap} [sourceMap]\n   * @param {Compilation[\"requestShortener\"]} [requestShortener]\n   * @returns {Error}\n   */\n\n\n  static buildError(error, file, sourceMap, requestShortener) {\n    /**\n     * @type {Error & { file?: string }}\n     */\n    let builtError;\n\n    if (typeof error === \"string\") {\n      builtError = new Error(`${file} from Terser plugin\\n${error}`);\n      builtError.file = file;\n      return builtError;\n    }\n\n    if (error.line) {\n      const original = sourceMap && originalPositionFor(sourceMap, {\n        line: error.line,\n        column: error.col\n      });\n\n      if (original && original.source && requestShortener) {\n        builtError = new Error(`${file} from Terser plugin\\n${error.message} [${requestShortener.shorten(original.source)}:${original.line},${original.column}][${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n        builtError.file = file;\n        return builtError;\n      }\n\n      builtError = new Error(`${file} from Terser plugin\\n${error.message} [${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n      builtError.file = file;\n      return builtError;\n    }\n\n    if (error.stack) {\n      builtError = new Error(`${file} from Terser plugin\\n${typeof error.message !== \"undefined\" ? error.message : \"\"}\\n${error.stack}`);\n      builtError.file = file;\n      return builtError;\n    }\n\n    builtError = new Error(`${file} from Terser plugin\\n${error.message}`);\n    builtError.file = file;\n    return builtError;\n  }\n  /**\n   * @private\n   * @param {Parallel} parallel\n   * @returns {number}\n   */\n\n\n  static getAvailableNumberOfCores(parallel) {\n    // In some cases cpus() returns undefined\n    // https://github.com/nodejs/node/issues/19022\n    const cpus = os.cpus() || {\n      length: 1\n    };\n    return parallel === true ? cpus.length - 1 : Math.min(Number(parallel) || 0, cpus.length - 1);\n  }\n  /**\n   * @private\n   * @param {Compiler} compiler\n   * @param {Compilation} compilation\n   * @param {Record<string, import(\"webpack\").sources.Source>} assets\n   * @param {{availableNumberOfCores: number}} optimizeOptions\n   * @returns {Promise<void>}\n   */\n\n\n  async optimize(compiler, compilation, assets, optimizeOptions) {\n    const cache = compilation.getCache(\"TerserWebpackPlugin\");\n    let numberOfAssets = 0;\n    const assetsForMinify = await Promise.all(Object.keys(assets).filter(name => {\n      const {\n        info\n      } =\n      /** @type {Asset} */\n      compilation.getAsset(name);\n\n      if ( // Skip double minimize assets from child compilation\n      info.minimized || // Skip minimizing for extracted comments assets\n      info.extractedComments) {\n        return false;\n      }\n\n      if (!compiler.webpack.ModuleFilenameHelpers.matchObject.bind( // eslint-disable-next-line no-undefined\n      undefined, this.options)(name)) {\n        return false;\n      }\n\n      return true;\n    }).map(async name => {\n      const {\n        info,\n        source\n      } =\n      /** @type {Asset} */\n      compilation.getAsset(name);\n      const eTag = cache.getLazyHashedEtag(source);\n      const cacheItem = cache.getItemCache(name, eTag);\n      const output = await cacheItem.getPromise();\n\n      if (!output) {\n        numberOfAssets += 1;\n      }\n\n      return {\n        name,\n        info,\n        inputSource: source,\n        output,\n        cacheItem\n      };\n    }));\n\n    if (assetsForMinify.length === 0) {\n      return;\n    }\n    /** @type {undefined | (() => MinimizerWorker<T>)} */\n\n\n    let getWorker;\n    /** @type {undefined | MinimizerWorker<T>} */\n\n    let initializedWorker;\n    /** @type {undefined | number} */\n\n    let numberOfWorkers;\n\n    if (optimizeOptions.availableNumberOfCores > 0) {\n      // Do not create unnecessary workers when the number of files is less than the available cores, it saves memory\n      numberOfWorkers = Math.min(numberOfAssets, optimizeOptions.availableNumberOfCores); // eslint-disable-next-line consistent-return\n\n      getWorker = () => {\n        if (initializedWorker) {\n          return initializedWorker;\n        }\n\n        initializedWorker =\n        /** @type {MinimizerWorker<T>} */\n        new Worker(require.resolve(\"./minify\"), {\n          numWorkers: numberOfWorkers,\n          enableWorkerThreads: true\n        }); // https://github.com/facebook/jest/issues/8872#issuecomment-524822081\n\n        const workerStdout = initializedWorker.getStdout();\n\n        if (workerStdout) {\n          workerStdout.on(\"data\", chunk => process.stdout.write(chunk));\n        }\n\n        const workerStderr = initializedWorker.getStderr();\n\n        if (workerStderr) {\n          workerStderr.on(\"data\", chunk => process.stderr.write(chunk));\n        }\n\n        return initializedWorker;\n      };\n    }\n\n    const {\n      SourceMapSource,\n      ConcatSource,\n      RawSource\n    } = compiler.webpack.sources;\n    /** @typedef {{ extractedCommentsSource : import(\"webpack\").sources.RawSource, commentsFilename: string }} ExtractedCommentsInfo */\n\n    /** @type {Map<string, ExtractedCommentsInfo>} */\n\n    const allExtractedComments = new Map();\n    const scheduledTasks = [];\n\n    for (const asset of assetsForMinify) {\n      scheduledTasks.push(async () => {\n        const {\n          name,\n          inputSource,\n          info,\n          cacheItem\n        } = asset;\n        let {\n          output\n        } = asset;\n\n        if (!output) {\n          let input;\n          /** @type {SourceMapInput | undefined} */\n\n          let inputSourceMap;\n          const {\n            source: sourceFromInputSource,\n            map\n          } = inputSource.sourceAndMap();\n          input = sourceFromInputSource;\n\n          if (map) {\n            if (!TerserPlugin.isSourceMap(map)) {\n              compilation.warnings.push(\n              /** @type {WebpackError} */\n              new Error(`${name} contains invalid source map`));\n            } else {\n              inputSourceMap =\n              /** @type {SourceMapInput} */\n              map;\n            }\n          }\n\n          if (Buffer.isBuffer(input)) {\n            input = input.toString();\n          }\n          /**\n           * @type {InternalOptions<T>}\n           */\n\n\n          const options = {\n            name,\n            input,\n            inputSourceMap,\n            minimizer: {\n              implementation: this.options.minimizer.implementation,\n              // @ts-ignore https://github.com/Microsoft/TypeScript/issues/10727\n              options: { ...this.options.minimizer.options\n              }\n            },\n            extractComments: this.options.extractComments\n          };\n\n          if (typeof options.minimizer.options.module === \"undefined\") {\n            if (typeof info.javascriptModule !== \"undefined\") {\n              options.minimizer.options.module = info.javascriptModule;\n            } else if (/\\.mjs(\\?.*)?$/i.test(name)) {\n              options.minimizer.options.module = true;\n            } else if (/\\.cjs(\\?.*)?$/i.test(name)) {\n              options.minimizer.options.module = false;\n            }\n          }\n\n          if (typeof options.minimizer.options.ecma === \"undefined\") {\n            options.minimizer.options.ecma = TerserPlugin.getEcmaVersion(compiler.options.output.environment || {});\n          }\n\n          try {\n            output = await (getWorker ? getWorker().transform(serialize(options)) : minify(options));\n          } catch (error) {\n            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n            compilation.errors.push(\n            /** @type {WebpackError} */\n            TerserPlugin.buildError(error, name, hasSourceMap ? new TraceMap(\n            /** @type {SourceMapInput} */\n            inputSourceMap) : // eslint-disable-next-line no-undefined\n            undefined, // eslint-disable-next-line no-undefined\n            hasSourceMap ? compilation.requestShortener : undefined));\n            return;\n          }\n\n          if (typeof output.code === \"undefined\") {\n            compilation.errors.push(\n            /** @type {WebpackError} */\n            new Error(`${name} from Terser plugin\\nMinimizer doesn't return result`));\n            return;\n          }\n\n          if (output.warnings && output.warnings.length > 0) {\n            output.warnings = output.warnings.map(\n            /**\n             * @param {Error | string} item\n             */\n            item => TerserPlugin.buildWarning(item, name));\n          }\n\n          if (output.errors && output.errors.length > 0) {\n            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n            output.errors = output.errors.map(\n            /**\n             * @param {Error | string} item\n             */\n            item => TerserPlugin.buildError(item, name, hasSourceMap ? new TraceMap(\n            /** @type {SourceMapInput} */\n            inputSourceMap) : // eslint-disable-next-line no-undefined\n            undefined, // eslint-disable-next-line no-undefined\n            hasSourceMap ? compilation.requestShortener : undefined));\n          }\n\n          let shebang;\n\n          if (\n          /** @type {ExtractCommentsObject} */\n          this.options.extractComments.banner !== false && output.extractedComments && output.extractedComments.length > 0 && output.code.startsWith(\"#!\")) {\n            const firstNewlinePosition = output.code.indexOf(\"\\n\");\n            shebang = output.code.substring(0, firstNewlinePosition);\n            output.code = output.code.substring(firstNewlinePosition + 1);\n          }\n\n          if (output.map) {\n            output.source = new SourceMapSource(output.code, name, output.map, input,\n            /** @type {SourceMapInput} */\n            inputSourceMap, true);\n          } else {\n            output.source = new RawSource(output.code);\n          }\n\n          if (output.extractedComments && output.extractedComments.length > 0) {\n            const commentsFilename =\n            /** @type {ExtractCommentsObject} */\n            this.options.extractComments.filename || \"[file].LICENSE.txt[query]\";\n            let query = \"\";\n            let filename = name;\n            const querySplit = filename.indexOf(\"?\");\n\n            if (querySplit >= 0) {\n              query = filename.slice(querySplit);\n              filename = filename.slice(0, querySplit);\n            }\n\n            const lastSlashIndex = filename.lastIndexOf(\"/\");\n            const basename = lastSlashIndex === -1 ? filename : filename.slice(lastSlashIndex + 1);\n            const data = {\n              filename,\n              basename,\n              query\n            };\n            output.commentsFilename = compilation.getPath(commentsFilename, data);\n            let banner; // Add a banner to the original file\n\n            if (\n            /** @type {ExtractCommentsObject} */\n            this.options.extractComments.banner !== false) {\n              banner =\n              /** @type {ExtractCommentsObject} */\n              this.options.extractComments.banner || `For license information please see ${path.relative(path.dirname(name), output.commentsFilename).replace(/\\\\/g, \"/\")}`;\n\n              if (typeof banner === \"function\") {\n                banner = banner(output.commentsFilename);\n              }\n\n              if (banner) {\n                output.source = new ConcatSource(shebang ? `${shebang}\\n` : \"\", `/*! ${banner} */\\n`, output.source);\n              }\n            }\n\n            const extractedCommentsString = output.extractedComments.sort().join(\"\\n\\n\");\n            output.extractedCommentsSource = new RawSource(`${extractedCommentsString}\\n`);\n          }\n\n          await cacheItem.storePromise({\n            source: output.source,\n            errors: output.errors,\n            warnings: output.warnings,\n            commentsFilename: output.commentsFilename,\n            extractedCommentsSource: output.extractedCommentsSource\n          });\n        }\n\n        if (output.warnings && output.warnings.length > 0) {\n          for (const warning of output.warnings) {\n            compilation.warnings.push(\n            /** @type {WebpackError} */\n            warning);\n          }\n        }\n\n        if (output.errors && output.errors.length > 0) {\n          for (const error of output.errors) {\n            compilation.errors.push(\n            /** @type {WebpackError} */\n            error);\n          }\n        }\n        /** @type {Record<string, any>} */\n\n\n        const newInfo = {\n          minimized: true\n        };\n        const {\n          source,\n          extractedCommentsSource\n        } = output; // Write extracted comments to commentsFilename\n\n        if (extractedCommentsSource) {\n          const {\n            commentsFilename\n          } = output;\n          newInfo.related = {\n            license: commentsFilename\n          };\n          allExtractedComments.set(name, {\n            extractedCommentsSource,\n            commentsFilename\n          });\n        }\n\n        compilation.updateAsset(name, source, newInfo);\n      });\n    }\n\n    const limit = getWorker && numberOfAssets > 0 ?\n    /** @type {number} */\n    numberOfWorkers : scheduledTasks.length;\n    await throttleAll(limit, scheduledTasks);\n\n    if (initializedWorker) {\n      await initializedWorker.end();\n    }\n    /** @typedef {{ source: import(\"webpack\").sources.Source, commentsFilename: string, from: string }} ExtractedCommentsInfoWIthFrom */\n\n\n    await Array.from(allExtractedComments).sort().reduce(\n    /**\n     * @param {Promise<unknown>} previousPromise\n     * @param {[string, ExtractedCommentsInfo]} extractedComments\n     * @returns {Promise<ExtractedCommentsInfoWIthFrom>}\n     */\n    async (previousPromise, [from, value]) => {\n      const previous =\n      /** @type {ExtractedCommentsInfoWIthFrom | undefined} **/\n      await previousPromise;\n      const {\n        commentsFilename,\n        extractedCommentsSource\n      } = value;\n\n      if (previous && previous.commentsFilename === commentsFilename) {\n        const {\n          from: previousFrom,\n          source: prevSource\n        } = previous;\n        const mergedName = `${previousFrom}|${from}`;\n        const name = `${commentsFilename}|${mergedName}`;\n        const eTag = [prevSource, extractedCommentsSource].map(item => cache.getLazyHashedEtag(item)).reduce((previousValue, currentValue) => cache.mergeEtags(previousValue, currentValue));\n        let source = await cache.getPromise(name, eTag);\n\n        if (!source) {\n          source = new ConcatSource(Array.from(new Set([...\n          /** @type {string}*/\n          prevSource.source().split(\"\\n\\n\"), ...\n          /** @type {string}*/\n          extractedCommentsSource.source().split(\"\\n\\n\")])).join(\"\\n\\n\"));\n          await cache.storePromise(name, eTag, source);\n        }\n\n        compilation.updateAsset(commentsFilename, source);\n        return {\n          source,\n          commentsFilename,\n          from: mergedName\n        };\n      }\n\n      const existingAsset = compilation.getAsset(commentsFilename);\n\n      if (existingAsset) {\n        return {\n          source: existingAsset.source,\n          commentsFilename,\n          from: commentsFilename\n        };\n      }\n\n      compilation.emitAsset(commentsFilename, extractedCommentsSource, {\n        extractedComments: true\n      });\n      return {\n        source: extractedCommentsSource,\n        commentsFilename,\n        from\n      };\n    },\n    /** @type {Promise<unknown>} */\n    Promise.resolve());\n  }\n  /**\n   * @private\n   * @param {any} environment\n   * @returns {TerserECMA}\n   */\n\n\n  static getEcmaVersion(environment) {\n    // ES 6th\n    if (environment.arrowFunction || environment.const || environment.destructuring || environment.forOf || environment.module) {\n      return 2015;\n    } // ES 11th\n\n\n    if (environment.bigIntLiteral || environment.dynamicImport) {\n      return 2020;\n    }\n\n    return 5;\n  }\n  /**\n   * @param {Compiler} compiler\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const pluginName = this.constructor.name;\n    const availableNumberOfCores = TerserPlugin.getAvailableNumberOfCores(this.options.parallel);\n    compiler.hooks.compilation.tap(pluginName, compilation => {\n      const hooks = compiler.webpack.javascript.JavascriptModulesPlugin.getCompilationHooks(compilation);\n      const data = serialize({\n        minimizer: typeof this.options.minimizer.implementation.getMinimizerVersion !== \"undefined\" ? this.options.minimizer.implementation.getMinimizerVersion() || \"0.0.0\" : \"0.0.0\",\n        options: this.options.minimizer.options\n      });\n      hooks.chunkHash.tap(pluginName, (chunk, hash) => {\n        hash.update(\"TerserPlugin\");\n        hash.update(data);\n      });\n      compilation.hooks.processAssets.tapPromise({\n        name: pluginName,\n        stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n        additionalAssets: true\n      }, assets => this.optimize(compiler, compilation, assets, {\n        availableNumberOfCores\n      }));\n      compilation.hooks.statsPrinter.tap(pluginName, stats => {\n        stats.hooks.print.for(\"asset.info.minimized\").tap(\"terser-webpack-plugin\", (minimized, {\n          green,\n          formatFlag\n        }) => minimized ?\n        /** @type {Function} */\n        green(\n        /** @type {Function} */\n        formatFlag(\"minimized\")) : \"\");\n      });\n    });\n  }\n\n}\n\nTerserPlugin.terserMinify = terserMinify;\nTerserPlugin.uglifyJsMinify = uglifyJsMinify;\nTerserPlugin.swcMinify = swcMinify;\nTerserPlugin.esbuildMinify = esbuildMinify;\nmodule.exports = TerserPlugin;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}