{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nvar _slicedToArray = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _defineProperty = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar RuntimeGlobals = require(\"../RuntimeGlobals\");\nvar RuntimeModule = require(\"../RuntimeModule\");\nvar Template = require(\"../Template\");\nvar _require = require(\"../util/SetHelpers\"),\n  first = _require.first;\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Compilation\").AssetInfo} AssetInfo */\n/** @typedef {import(\"../Compilation\").PathData} PathData */\n\n/** @typedef {function(PathData, AssetInfo=): string} FilenameFunction */\nvar GetChunkFilenameRuntimeModule = /*#__PURE__*/function (_RuntimeModule) {\n  _inherits(GetChunkFilenameRuntimeModule, _RuntimeModule);\n  var _super = _createSuper(GetChunkFilenameRuntimeModule);\n  /**\n   * @param {string} contentType the contentType to use the content hash for\n   * @param {string} name kind of filename\n   * @param {string} global function name to be assigned\n   * @param {function(Chunk): string | FilenameFunction} getFilenameForChunk functor to get the filename or function\n   * @param {boolean} allChunks when false, only async chunks are included\n   */\n  function GetChunkFilenameRuntimeModule(contentType, name, global, getFilenameForChunk, allChunks) {\n    var _this;\n    _classCallCheck(this, GetChunkFilenameRuntimeModule);\n    _this = _super.call(this, \"get \".concat(name, \" chunk filename\"));\n    _this.contentType = contentType;\n    _this.global = global;\n    _this.getFilenameForChunk = getFilenameForChunk;\n    _this.allChunks = allChunks;\n    _this.dependentHash = true;\n    return _this;\n  }\n\n  /**\n   * @returns {string} runtime code\n   */\n  _createClass(GetChunkFilenameRuntimeModule, [{\n    key: \"generate\",\n    value: function generate() {\n      var global = this.global,\n        chunk = this.chunk,\n        chunkGraph = this.chunkGraph,\n        contentType = this.contentType,\n        getFilenameForChunk = this.getFilenameForChunk,\n        allChunks = this.allChunks,\n        compilation = this.compilation;\n      var runtimeTemplate = compilation.runtimeTemplate;\n\n      /** @type {Map<string | FilenameFunction, Set<Chunk>>} */\n      var chunkFilenames = new Map();\n      var maxChunks = 0;\n      /** @type {string} */\n      var dynamicFilename;\n\n      /**\n       * @param {Chunk} c the chunk\n       * @returns {void}\n       */\n      var addChunk = function addChunk(c) {\n        var chunkFilename = getFilenameForChunk(c);\n        if (chunkFilename) {\n          var set = chunkFilenames.get(chunkFilename);\n          if (set === undefined) {\n            chunkFilenames.set(chunkFilename, set = new Set());\n          }\n          set.add(c);\n          if (typeof chunkFilename === \"string\") {\n            if (set.size < maxChunks) return;\n            if (set.size === maxChunks) {\n              if (chunkFilename.length < dynamicFilename.length) return;\n              if (chunkFilename.length === dynamicFilename.length) {\n                if (chunkFilename < dynamicFilename) return;\n              }\n            }\n            maxChunks = set.size;\n            dynamicFilename = chunkFilename;\n          }\n        }\n      };\n\n      /** @type {string[]} */\n      var includedChunksMessages = [];\n      if (allChunks) {\n        includedChunksMessages.push(\"all chunks\");\n        var _iterator = _createForOfIteratorHelper(chunk.getAllReferencedChunks()),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var c = _step.value;\n            addChunk(c);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else {\n        includedChunksMessages.push(\"async chunks\");\n        var _iterator2 = _createForOfIteratorHelper(chunk.getAllAsyncChunks()),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _c2 = _step2.value;\n            addChunk(_c2);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n        var includeEntries = chunkGraph.getTreeRuntimeRequirements(chunk).has(RuntimeGlobals.ensureChunkIncludeEntries);\n        if (includeEntries) {\n          includedChunksMessages.push(\"sibling chunks for the entrypoint\");\n          var _iterator3 = _createForOfIteratorHelper(chunkGraph.getChunkEntryDependentChunksIterable(chunk)),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var _c = _step3.value;\n              addChunk(_c);\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        }\n      }\n      var _iterator4 = _createForOfIteratorHelper(chunk.getAllReferencedAsyncEntrypoints()),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var entrypoint = _step4.value;\n          addChunk(entrypoint.chunks[entrypoint.chunks.length - 1]);\n        }\n\n        /** @type {Map<string, Set<string | number>>} */\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      var staticUrls = new Map();\n      /** @type {Set<Chunk>} */\n      var dynamicUrlChunks = new Set();\n\n      /**\n       * @param {Chunk} c the chunk\n       * @param {string | FilenameFunction} chunkFilename the filename template for the chunk\n       * @returns {void}\n       */\n      var addStaticUrl = function addStaticUrl(c, chunkFilename) {\n        /**\n         * @param {string | number} value a value\n         * @returns {string} string to put in quotes\n         */\n        var unquotedStringify = function unquotedStringify(value) {\n          var str = \"\".concat(value);\n          if (str.length >= 5 && str === \"\".concat(c.id)) {\n            // This is shorter and generates the same result\n            return '\" + chunkId + \"';\n          }\n          var s = JSON.stringify(str);\n          return s.slice(1, s.length - 1);\n        };\n        var unquotedStringifyWithLength = function unquotedStringifyWithLength(value) {\n          return function (length) {\n            return unquotedStringify(\"\".concat(value).slice(0, length));\n          };\n        };\n        var chunkFilenameValue = typeof chunkFilename === \"function\" ? JSON.stringify(chunkFilename({\n          chunk: c,\n          contentHashType: contentType\n        })) : JSON.stringify(chunkFilename);\n        var staticChunkFilename = compilation.getPath(chunkFilenameValue, {\n          hash: \"\\\" + \".concat(RuntimeGlobals.getFullHash, \"() + \\\"\"),\n          hashWithLength: function hashWithLength(length) {\n            return \"\\\" + \".concat(RuntimeGlobals.getFullHash, \"().slice(0, \").concat(length, \") + \\\"\");\n          },\n          chunk: {\n            id: unquotedStringify(c.id),\n            hash: unquotedStringify(c.renderedHash),\n            hashWithLength: unquotedStringifyWithLength(c.renderedHash),\n            name: unquotedStringify(c.name || c.id),\n            contentHash: _defineProperty({}, contentType, unquotedStringify(c.contentHash[contentType])),\n            contentHashWithLength: _defineProperty({}, contentType, unquotedStringifyWithLength(c.contentHash[contentType]))\n          },\n          contentHashType: contentType\n        });\n        var set = staticUrls.get(staticChunkFilename);\n        if (set === undefined) {\n          staticUrls.set(staticChunkFilename, set = new Set());\n        }\n        set.add(c.id);\n      };\n      var _iterator5 = _createForOfIteratorHelper(chunkFilenames),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _step5$value = _slicedToArray(_step5.value, 2),\n            filename = _step5$value[0],\n            chunks = _step5$value[1];\n          if (filename !== dynamicFilename) {\n            var _iterator7 = _createForOfIteratorHelper(chunks),\n              _step7;\n            try {\n              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                var _c4 = _step7.value;\n                addStaticUrl(_c4, filename);\n              }\n            } catch (err) {\n              _iterator7.e(err);\n            } finally {\n              _iterator7.f();\n            }\n          } else {\n            var _iterator8 = _createForOfIteratorHelper(chunks),\n              _step8;\n            try {\n              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                var _c5 = _step8.value;\n                dynamicUrlChunks.add(_c5);\n              }\n            } catch (err) {\n              _iterator8.e(err);\n            } finally {\n              _iterator8.f();\n            }\n          }\n        }\n\n        /**\n         * @param {function(Chunk): string | number} fn function from chunk to value\n         * @returns {string} code with static mapping of results of fn\n         */\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      var createMap = function createMap(fn) {\n        var obj = {};\n        var useId = false;\n        var lastKey;\n        var entries = 0;\n        var _iterator6 = _createForOfIteratorHelper(dynamicUrlChunks),\n          _step6;\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var _c3 = _step6.value;\n            var value = fn(_c3);\n            if (value === _c3.id) {\n              useId = true;\n            } else {\n              obj[_c3.id] = value;\n              lastKey = _c3.id;\n              entries++;\n            }\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n        if (entries === 0) return \"chunkId\";\n        if (entries === 1) {\n          return useId ? \"(chunkId === \".concat(JSON.stringify(lastKey), \" ? \").concat(JSON.stringify(obj[lastKey]), \" : chunkId)\") : JSON.stringify(obj[lastKey]);\n        }\n        return useId ? \"(\".concat(JSON.stringify(obj), \"[chunkId] || chunkId)\") : \"\".concat(JSON.stringify(obj), \"[chunkId]\");\n      };\n\n      /**\n       * @param {function(Chunk): string | number} fn function from chunk to value\n       * @returns {string} code with static mapping of results of fn for including in quoted string\n       */\n      var mapExpr = function mapExpr(fn) {\n        return \"\\\" + \".concat(createMap(fn), \" + \\\"\");\n      };\n\n      /**\n       * @param {function(Chunk): string | number} fn function from chunk to value\n       * @returns {function(number): string} function which generates code with static mapping of results of fn for including in quoted string for specific length\n       */\n      var mapExprWithLength = function mapExprWithLength(fn) {\n        return function (length) {\n          return \"\\\" + \".concat(createMap(function (c) {\n            return \"\".concat(fn(c)).slice(0, length);\n          }), \" + \\\"\");\n        };\n      };\n      var url = dynamicFilename && compilation.getPath(JSON.stringify(dynamicFilename), {\n        hash: \"\\\" + \".concat(RuntimeGlobals.getFullHash, \"() + \\\"\"),\n        hashWithLength: function hashWithLength(length) {\n          return \"\\\" + \".concat(RuntimeGlobals.getFullHash, \"().slice(0, \").concat(length, \") + \\\"\");\n        },\n        chunk: {\n          id: \"\\\" + chunkId + \\\"\",\n          hash: mapExpr(function (c) {\n            return c.renderedHash;\n          }),\n          hashWithLength: mapExprWithLength(function (c) {\n            return c.renderedHash;\n          }),\n          name: mapExpr(function (c) {\n            return c.name || c.id;\n          }),\n          contentHash: _defineProperty({}, contentType, mapExpr(function (c) {\n            return c.contentHash[contentType];\n          })),\n          contentHashWithLength: _defineProperty({}, contentType, mapExprWithLength(function (c) {\n            return c.contentHash[contentType];\n          }))\n        },\n        contentHashType: contentType\n      });\n      return Template.asString([\"// This function allow to reference \".concat(includedChunksMessages.join(\" and \")), \"\".concat(global, \" = \").concat(runtimeTemplate.basicFunction(\"chunkId\", staticUrls.size > 0 ? [\"// return url for filenames not based on template\",\n      // it minimizes to `x===1?\"...\":x===2?\"...\":\"...\"`\n      Template.asString(Array.from(staticUrls, function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          url = _ref2[0],\n          ids = _ref2[1];\n        var condition = ids.size === 1 ? \"chunkId === \".concat(JSON.stringify(first(ids))) : \"{\".concat(Array.from(ids, function (id) {\n          return \"\".concat(JSON.stringify(id), \":1\");\n        }).join(\",\"), \"}[chunkId]\");\n        return \"if (\".concat(condition, \") return \").concat(url, \";\");\n      })), \"// return url for filenames based on template\", \"return \".concat(url, \";\")] : [\"// return url for filenames based on template\", \"return \".concat(url, \";\")]), \";\")]);\n    }\n  }]);\n  return GetChunkFilenameRuntimeModule;\n}(RuntimeModule);\nmodule.exports = GetChunkFilenameRuntimeModule;","map":{"version":3,"names":["RuntimeGlobals","require","RuntimeModule","Template","first","GetChunkFilenameRuntimeModule","contentType","name","global","getFilenameForChunk","allChunks","dependentHash","chunk","chunkGraph","compilation","runtimeTemplate","chunkFilenames","Map","maxChunks","dynamicFilename","addChunk","c","chunkFilename","set","get","undefined","Set","add","size","length","includedChunksMessages","push","getAllReferencedChunks","getAllAsyncChunks","includeEntries","getTreeRuntimeRequirements","has","ensureChunkIncludeEntries","getChunkEntryDependentChunksIterable","getAllReferencedAsyncEntrypoints","entrypoint","chunks","staticUrls","dynamicUrlChunks","addStaticUrl","unquotedStringify","value","str","id","s","JSON","stringify","slice","unquotedStringifyWithLength","chunkFilenameValue","contentHashType","staticChunkFilename","getPath","hash","getFullHash","hashWithLength","renderedHash","contentHash","contentHashWithLength","filename","createMap","fn","obj","useId","lastKey","entries","mapExpr","mapExprWithLength","url","asString","join","basicFunction","Array","from","ids","condition","module","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/runtime/GetChunkFilenameRuntimeModule.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst RuntimeModule = require(\"../RuntimeModule\");\nconst Template = require(\"../Template\");\nconst { first } = require(\"../util/SetHelpers\");\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Compilation\").AssetInfo} AssetInfo */\n/** @typedef {import(\"../Compilation\").PathData} PathData */\n\n/** @typedef {function(PathData, AssetInfo=): string} FilenameFunction */\n\nclass GetChunkFilenameRuntimeModule extends RuntimeModule {\n\t/**\n\t * @param {string} contentType the contentType to use the content hash for\n\t * @param {string} name kind of filename\n\t * @param {string} global function name to be assigned\n\t * @param {function(Chunk): string | FilenameFunction} getFilenameForChunk functor to get the filename or function\n\t * @param {boolean} allChunks when false, only async chunks are included\n\t */\n\tconstructor(contentType, name, global, getFilenameForChunk, allChunks) {\n\t\tsuper(`get ${name} chunk filename`);\n\t\tthis.contentType = contentType;\n\t\tthis.global = global;\n\t\tthis.getFilenameForChunk = getFilenameForChunk;\n\t\tthis.allChunks = allChunks;\n\t\tthis.dependentHash = true;\n\t}\n\n\t/**\n\t * @returns {string} runtime code\n\t */\n\tgenerate() {\n\t\tconst {\n\t\t\tglobal,\n\t\t\tchunk,\n\t\t\tchunkGraph,\n\t\t\tcontentType,\n\t\t\tgetFilenameForChunk,\n\t\t\tallChunks,\n\t\t\tcompilation\n\t\t} = this;\n\t\tconst { runtimeTemplate } = compilation;\n\n\t\t/** @type {Map<string | FilenameFunction, Set<Chunk>>} */\n\t\tconst chunkFilenames = new Map();\n\t\tlet maxChunks = 0;\n\t\t/** @type {string} */\n\t\tlet dynamicFilename;\n\n\t\t/**\n\t\t * @param {Chunk} c the chunk\n\t\t * @returns {void}\n\t\t */\n\t\tconst addChunk = c => {\n\t\t\tconst chunkFilename = getFilenameForChunk(c);\n\t\t\tif (chunkFilename) {\n\t\t\t\tlet set = chunkFilenames.get(chunkFilename);\n\t\t\t\tif (set === undefined) {\n\t\t\t\t\tchunkFilenames.set(chunkFilename, (set = new Set()));\n\t\t\t\t}\n\t\t\t\tset.add(c);\n\t\t\t\tif (typeof chunkFilename === \"string\") {\n\t\t\t\t\tif (set.size < maxChunks) return;\n\t\t\t\t\tif (set.size === maxChunks) {\n\t\t\t\t\t\tif (chunkFilename.length < dynamicFilename.length) return;\n\t\t\t\t\t\tif (chunkFilename.length === dynamicFilename.length) {\n\t\t\t\t\t\t\tif (chunkFilename < dynamicFilename) return;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tmaxChunks = set.size;\n\t\t\t\t\tdynamicFilename = chunkFilename;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/** @type {string[]} */\n\t\tconst includedChunksMessages = [];\n\t\tif (allChunks) {\n\t\t\tincludedChunksMessages.push(\"all chunks\");\n\t\t\tfor (const c of chunk.getAllReferencedChunks()) {\n\t\t\t\taddChunk(c);\n\t\t\t}\n\t\t} else {\n\t\t\tincludedChunksMessages.push(\"async chunks\");\n\t\t\tfor (const c of chunk.getAllAsyncChunks()) {\n\t\t\t\taddChunk(c);\n\t\t\t}\n\t\t\tconst includeEntries = chunkGraph\n\t\t\t\t.getTreeRuntimeRequirements(chunk)\n\t\t\t\t.has(RuntimeGlobals.ensureChunkIncludeEntries);\n\t\t\tif (includeEntries) {\n\t\t\t\tincludedChunksMessages.push(\"sibling chunks for the entrypoint\");\n\t\t\t\tfor (const c of chunkGraph.getChunkEntryDependentChunksIterable(\n\t\t\t\t\tchunk\n\t\t\t\t)) {\n\t\t\t\t\taddChunk(c);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const entrypoint of chunk.getAllReferencedAsyncEntrypoints()) {\n\t\t\taddChunk(entrypoint.chunks[entrypoint.chunks.length - 1]);\n\t\t}\n\n\t\t/** @type {Map<string, Set<string | number>>} */\n\t\tconst staticUrls = new Map();\n\t\t/** @type {Set<Chunk>} */\n\t\tconst dynamicUrlChunks = new Set();\n\n\t\t/**\n\t\t * @param {Chunk} c the chunk\n\t\t * @param {string | FilenameFunction} chunkFilename the filename template for the chunk\n\t\t * @returns {void}\n\t\t */\n\t\tconst addStaticUrl = (c, chunkFilename) => {\n\t\t\t/**\n\t\t\t * @param {string | number} value a value\n\t\t\t * @returns {string} string to put in quotes\n\t\t\t */\n\t\t\tconst unquotedStringify = value => {\n\t\t\t\tconst str = `${value}`;\n\t\t\t\tif (str.length >= 5 && str === `${c.id}`) {\n\t\t\t\t\t// This is shorter and generates the same result\n\t\t\t\t\treturn '\" + chunkId + \"';\n\t\t\t\t}\n\t\t\t\tconst s = JSON.stringify(str);\n\t\t\t\treturn s.slice(1, s.length - 1);\n\t\t\t};\n\t\t\tconst unquotedStringifyWithLength = value => length =>\n\t\t\t\tunquotedStringify(`${value}`.slice(0, length));\n\t\t\tconst chunkFilenameValue =\n\t\t\t\ttypeof chunkFilename === \"function\"\n\t\t\t\t\t? JSON.stringify(\n\t\t\t\t\t\t\tchunkFilename({\n\t\t\t\t\t\t\t\tchunk: c,\n\t\t\t\t\t\t\t\tcontentHashType: contentType\n\t\t\t\t\t\t\t})\n\t\t\t\t\t  )\n\t\t\t\t\t: JSON.stringify(chunkFilename);\n\t\t\tconst staticChunkFilename = compilation.getPath(chunkFilenameValue, {\n\t\t\t\thash: `\" + ${RuntimeGlobals.getFullHash}() + \"`,\n\t\t\t\thashWithLength: length =>\n\t\t\t\t\t`\" + ${RuntimeGlobals.getFullHash}().slice(0, ${length}) + \"`,\n\t\t\t\tchunk: {\n\t\t\t\t\tid: unquotedStringify(c.id),\n\t\t\t\t\thash: unquotedStringify(c.renderedHash),\n\t\t\t\t\thashWithLength: unquotedStringifyWithLength(c.renderedHash),\n\t\t\t\t\tname: unquotedStringify(c.name || c.id),\n\t\t\t\t\tcontentHash: {\n\t\t\t\t\t\t[contentType]: unquotedStringify(c.contentHash[contentType])\n\t\t\t\t\t},\n\t\t\t\t\tcontentHashWithLength: {\n\t\t\t\t\t\t[contentType]: unquotedStringifyWithLength(\n\t\t\t\t\t\t\tc.contentHash[contentType]\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontentHashType: contentType\n\t\t\t});\n\t\t\tlet set = staticUrls.get(staticChunkFilename);\n\t\t\tif (set === undefined) {\n\t\t\t\tstaticUrls.set(staticChunkFilename, (set = new Set()));\n\t\t\t}\n\t\t\tset.add(c.id);\n\t\t};\n\n\t\tfor (const [filename, chunks] of chunkFilenames) {\n\t\t\tif (filename !== dynamicFilename) {\n\t\t\t\tfor (const c of chunks) addStaticUrl(c, filename);\n\t\t\t} else {\n\t\t\t\tfor (const c of chunks) dynamicUrlChunks.add(c);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {function(Chunk): string | number} fn function from chunk to value\n\t\t * @returns {string} code with static mapping of results of fn\n\t\t */\n\t\tconst createMap = fn => {\n\t\t\tconst obj = {};\n\t\t\tlet useId = false;\n\t\t\tlet lastKey;\n\t\t\tlet entries = 0;\n\t\t\tfor (const c of dynamicUrlChunks) {\n\t\t\t\tconst value = fn(c);\n\t\t\t\tif (value === c.id) {\n\t\t\t\t\tuseId = true;\n\t\t\t\t} else {\n\t\t\t\t\tobj[c.id] = value;\n\t\t\t\t\tlastKey = c.id;\n\t\t\t\t\tentries++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (entries === 0) return \"chunkId\";\n\t\t\tif (entries === 1) {\n\t\t\t\treturn useId\n\t\t\t\t\t? `(chunkId === ${JSON.stringify(lastKey)} ? ${JSON.stringify(\n\t\t\t\t\t\t\tobj[lastKey]\n\t\t\t\t\t  )} : chunkId)`\n\t\t\t\t\t: JSON.stringify(obj[lastKey]);\n\t\t\t}\n\t\t\treturn useId\n\t\t\t\t? `(${JSON.stringify(obj)}[chunkId] || chunkId)`\n\t\t\t\t: `${JSON.stringify(obj)}[chunkId]`;\n\t\t};\n\n\t\t/**\n\t\t * @param {function(Chunk): string | number} fn function from chunk to value\n\t\t * @returns {string} code with static mapping of results of fn for including in quoted string\n\t\t */\n\t\tconst mapExpr = fn => {\n\t\t\treturn `\" + ${createMap(fn)} + \"`;\n\t\t};\n\n\t\t/**\n\t\t * @param {function(Chunk): string | number} fn function from chunk to value\n\t\t * @returns {function(number): string} function which generates code with static mapping of results of fn for including in quoted string for specific length\n\t\t */\n\t\tconst mapExprWithLength = fn => length => {\n\t\t\treturn `\" + ${createMap(c => `${fn(c)}`.slice(0, length))} + \"`;\n\t\t};\n\n\t\tconst url =\n\t\t\tdynamicFilename &&\n\t\t\tcompilation.getPath(JSON.stringify(dynamicFilename), {\n\t\t\t\thash: `\" + ${RuntimeGlobals.getFullHash}() + \"`,\n\t\t\t\thashWithLength: length =>\n\t\t\t\t\t`\" + ${RuntimeGlobals.getFullHash}().slice(0, ${length}) + \"`,\n\t\t\t\tchunk: {\n\t\t\t\t\tid: `\" + chunkId + \"`,\n\t\t\t\t\thash: mapExpr(c => c.renderedHash),\n\t\t\t\t\thashWithLength: mapExprWithLength(c => c.renderedHash),\n\t\t\t\t\tname: mapExpr(c => c.name || c.id),\n\t\t\t\t\tcontentHash: {\n\t\t\t\t\t\t[contentType]: mapExpr(c => c.contentHash[contentType])\n\t\t\t\t\t},\n\t\t\t\t\tcontentHashWithLength: {\n\t\t\t\t\t\t[contentType]: mapExprWithLength(c => c.contentHash[contentType])\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontentHashType: contentType\n\t\t\t});\n\n\t\treturn Template.asString([\n\t\t\t`// This function allow to reference ${includedChunksMessages.join(\n\t\t\t\t\" and \"\n\t\t\t)}`,\n\t\t\t`${global} = ${runtimeTemplate.basicFunction(\n\t\t\t\t\"chunkId\",\n\n\t\t\t\tstaticUrls.size > 0\n\t\t\t\t\t? [\n\t\t\t\t\t\t\t\"// return url for filenames not based on template\",\n\t\t\t\t\t\t\t// it minimizes to `x===1?\"...\":x===2?\"...\":\"...\"`\n\t\t\t\t\t\t\tTemplate.asString(\n\t\t\t\t\t\t\t\tArray.from(staticUrls, ([url, ids]) => {\n\t\t\t\t\t\t\t\t\tconst condition =\n\t\t\t\t\t\t\t\t\t\tids.size === 1\n\t\t\t\t\t\t\t\t\t\t\t? `chunkId === ${JSON.stringify(first(ids))}`\n\t\t\t\t\t\t\t\t\t\t\t: `{${Array.from(\n\t\t\t\t\t\t\t\t\t\t\t\t\tids,\n\t\t\t\t\t\t\t\t\t\t\t\t\tid => `${JSON.stringify(id)}:1`\n\t\t\t\t\t\t\t\t\t\t\t  ).join(\",\")}}[chunkId]`;\n\t\t\t\t\t\t\t\t\treturn `if (${condition}) return ${url};`;\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\"// return url for filenames based on template\",\n\t\t\t\t\t\t\t`return ${url};`\n\t\t\t\t\t  ]\n\t\t\t\t\t: [\"// return url for filenames based on template\", `return ${url};`]\n\t\t\t)};`\n\t\t]);\n\t}\n}\n\nmodule.exports = GetChunkFilenameRuntimeModule;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}