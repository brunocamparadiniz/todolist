{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {string | ResolveStepHook} target target\n   */\n  function DirectoryExistsPlugin(source, target) {\n    _classCallCheck(this, DirectoryExistsPlugin);\n    this.source = source;\n    this.target = target;\n  }\n\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n  _createClass(DirectoryExistsPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"DirectoryExistsPlugin\", function (request, resolveContext, callback) {\n        var fs = resolver.fileSystem;\n        var directory = request.path;\n        if (!directory) return callback();\n        fs.stat(directory, function (err, stat) {\n          if (err || !stat) {\n            if (resolveContext.missingDependencies) resolveContext.missingDependencies.add(directory);\n            if (resolveContext.log) resolveContext.log(directory + \" doesn't exist\");\n            return callback();\n          }\n          if (!stat.isDirectory()) {\n            if (resolveContext.missingDependencies) resolveContext.missingDependencies.add(directory);\n            if (resolveContext.log) resolveContext.log(directory + \" is not a directory\");\n            return callback();\n          }\n          if (resolveContext.fileDependencies) resolveContext.fileDependencies.add(directory);\n          resolver.doResolve(target, request, \"existing directory \".concat(directory), resolveContext, callback);\n        });\n      });\n    }\n  }]);\n  return DirectoryExistsPlugin;\n}();","map":{"version":3,"names":["module","exports","source","target","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","fs","fileSystem","directory","path","stat","err","missingDependencies","add","log","isDirectory","fileDependencies","doResolve"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/enhanced-resolve/lib/DirectoryExistsPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class DirectoryExistsPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, target) {\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\n\t\t\t\t\"DirectoryExistsPlugin\",\n\t\t\t\t(request, resolveContext, callback) => {\n\t\t\t\t\tconst fs = resolver.fileSystem;\n\t\t\t\t\tconst directory = request.path;\n\t\t\t\t\tif (!directory) return callback();\n\t\t\t\t\tfs.stat(directory, (err, stat) => {\n\t\t\t\t\t\tif (err || !stat) {\n\t\t\t\t\t\t\tif (resolveContext.missingDependencies)\n\t\t\t\t\t\t\t\tresolveContext.missingDependencies.add(directory);\n\t\t\t\t\t\t\tif (resolveContext.log)\n\t\t\t\t\t\t\t\tresolveContext.log(directory + \" doesn't exist\");\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!stat.isDirectory()) {\n\t\t\t\t\t\t\tif (resolveContext.missingDependencies)\n\t\t\t\t\t\t\t\tresolveContext.missingDependencies.add(directory);\n\t\t\t\t\t\t\tif (resolveContext.log)\n\t\t\t\t\t\t\t\tresolveContext.log(directory + \" is not a directory\");\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (resolveContext.fileDependencies)\n\t\t\t\t\t\t\tresolveContext.fileDependencies.add(directory);\n\t\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\trequest,\n\t\t\t\t\t\t\t`existing directory ${directory}`,\n\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AAAA;AAAA;AAEAA,MAAM,CAACC,OAAO;EACb;AACD;AACA;AACA;EACC,+BAAYC,MAAM,EAAEC,MAAM,EAAE;IAAA;IAC3B,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACrB;;EAEA;AACD;AACA;AACA;EAHC;IAAA;IAAA,OAIA,eAAMC,QAAQ,EAAE;MACf,IAAMD,MAAM,GAAGC,QAAQ,CAACC,UAAU,CAAC,IAAI,CAACF,MAAM,CAAC;MAC/CC,QAAQ,CACNE,OAAO,CAAC,IAAI,CAACJ,MAAM,CAAC,CACpBK,QAAQ,CACR,uBAAuB,EACvB,UAACC,OAAO,EAAEC,cAAc,EAAEC,QAAQ,EAAK;QACtC,IAAMC,EAAE,GAAGP,QAAQ,CAACQ,UAAU;QAC9B,IAAMC,SAAS,GAAGL,OAAO,CAACM,IAAI;QAC9B,IAAI,CAACD,SAAS,EAAE,OAAOH,QAAQ,EAAE;QACjCC,EAAE,CAACI,IAAI,CAACF,SAAS,EAAE,UAACG,GAAG,EAAED,IAAI,EAAK;UACjC,IAAIC,GAAG,IAAI,CAACD,IAAI,EAAE;YACjB,IAAIN,cAAc,CAACQ,mBAAmB,EACrCR,cAAc,CAACQ,mBAAmB,CAACC,GAAG,CAACL,SAAS,CAAC;YAClD,IAAIJ,cAAc,CAACU,GAAG,EACrBV,cAAc,CAACU,GAAG,CAACN,SAAS,GAAG,gBAAgB,CAAC;YACjD,OAAOH,QAAQ,EAAE;UAClB;UACA,IAAI,CAACK,IAAI,CAACK,WAAW,EAAE,EAAE;YACxB,IAAIX,cAAc,CAACQ,mBAAmB,EACrCR,cAAc,CAACQ,mBAAmB,CAACC,GAAG,CAACL,SAAS,CAAC;YAClD,IAAIJ,cAAc,CAACU,GAAG,EACrBV,cAAc,CAACU,GAAG,CAACN,SAAS,GAAG,qBAAqB,CAAC;YACtD,OAAOH,QAAQ,EAAE;UAClB;UACA,IAAID,cAAc,CAACY,gBAAgB,EAClCZ,cAAc,CAACY,gBAAgB,CAACH,GAAG,CAACL,SAAS,CAAC;UAC/CT,QAAQ,CAACkB,SAAS,CACjBnB,MAAM,EACNK,OAAO,+BACeK,SAAS,GAC/BJ,cAAc,EACdC,QAAQ,CACR;QACF,CAAC,CAAC;MACH,CAAC,CACD;IACH;EAAC;EAAA;AAAA,GACD"},"metadata":{},"sourceType":"script","externalDependencies":[]}