{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _require = require(\"tapable\"),\n  SyncWaterfallHook = _require.SyncWaterfallHook;\nvar Compilation = require(\"../Compilation\");\nvar Generator = require(\"../Generator\");\nvar _require2 = require(\"../HookWebpackError\"),\n  tryRunOrWebpackError = _require2.tryRunOrWebpackError;\nvar WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\nvar _require3 = require(\"../util/comparators\"),\n  compareModulesByIdentifier = _require3.compareModulesByIdentifier;\nvar memoize = require(\"../util/memoize\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"../Template\").RenderManifestEntry} RenderManifestEntry */\n/** @typedef {import(\"../Template\").RenderManifestOptions} RenderManifestOptions */\n\nvar getAsyncWebAssemblyGenerator = memoize(function () {\n  return require(\"./AsyncWebAssemblyGenerator\");\n});\nvar getAsyncWebAssemblyJavascriptGenerator = memoize(function () {\n  return require(\"./AsyncWebAssemblyJavascriptGenerator\");\n});\nvar getAsyncWebAssemblyParser = memoize(function () {\n  return require(\"./AsyncWebAssemblyParser\");\n});\n\n/**\n * @typedef {Object} WebAssemblyRenderContext\n * @property {Chunk} chunk the chunk\n * @property {DependencyTemplates} dependencyTemplates the dependency templates\n * @property {RuntimeTemplate} runtimeTemplate the runtime template\n * @property {ModuleGraph} moduleGraph the module graph\n * @property {ChunkGraph} chunkGraph the chunk graph\n * @property {CodeGenerationResults} codeGenerationResults results of code generation\n */\n\n/**\n * @typedef {Object} CompilationHooks\n * @property {SyncWaterfallHook<[Source, Module, WebAssemblyRenderContext]>} renderModuleContent\n */\n\n/** @type {WeakMap<Compilation, CompilationHooks>} */\nvar compilationHooksMap = new WeakMap();\nvar AsyncWebAssemblyModulesPlugin = /*#__PURE__*/function () {\n  function AsyncWebAssemblyModulesPlugin(options) {\n    _classCallCheck(this, AsyncWebAssemblyModulesPlugin);\n    this.options = options;\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  _createClass(AsyncWebAssemblyModulesPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n      compiler.hooks.compilation.tap(\"AsyncWebAssemblyModulesPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        var hooks = AsyncWebAssemblyModulesPlugin.getCompilationHooks(compilation);\n        compilation.dependencyFactories.set(WebAssemblyImportDependency, normalModuleFactory);\n        normalModuleFactory.hooks.createParser.for(\"webassembly/async\").tap(\"AsyncWebAssemblyModulesPlugin\", function () {\n          var AsyncWebAssemblyParser = getAsyncWebAssemblyParser();\n          return new AsyncWebAssemblyParser();\n        });\n        normalModuleFactory.hooks.createGenerator.for(\"webassembly/async\").tap(\"AsyncWebAssemblyModulesPlugin\", function () {\n          var AsyncWebAssemblyJavascriptGenerator = getAsyncWebAssemblyJavascriptGenerator();\n          var AsyncWebAssemblyGenerator = getAsyncWebAssemblyGenerator();\n          return Generator.byType({\n            javascript: new AsyncWebAssemblyJavascriptGenerator(compilation.outputOptions.webassemblyModuleFilename),\n            webassembly: new AsyncWebAssemblyGenerator(_this.options)\n          });\n        });\n        compilation.hooks.renderManifest.tap(\"WebAssemblyModulesPlugin\", function (result, options) {\n          var moduleGraph = compilation.moduleGraph,\n            chunkGraph = compilation.chunkGraph,\n            runtimeTemplate = compilation.runtimeTemplate;\n          var chunk = options.chunk,\n            outputOptions = options.outputOptions,\n            dependencyTemplates = options.dependencyTemplates,\n            codeGenerationResults = options.codeGenerationResults;\n          var _iterator = _createForOfIteratorHelper(chunkGraph.getOrderedChunkModulesIterable(chunk, compareModulesByIdentifier)),\n            _step;\n          try {\n            var _loop = function _loop() {\n              var module = _step.value;\n              if (module.type === \"webassembly/async\") {\n                var filenameTemplate = outputOptions.webassemblyModuleFilename;\n                result.push({\n                  render: function render() {\n                    return _this.renderModule(module, {\n                      chunk: chunk,\n                      dependencyTemplates: dependencyTemplates,\n                      runtimeTemplate: runtimeTemplate,\n                      moduleGraph: moduleGraph,\n                      chunkGraph: chunkGraph,\n                      codeGenerationResults: codeGenerationResults\n                    }, hooks);\n                  },\n                  filenameTemplate: filenameTemplate,\n                  pathOptions: {\n                    module: module,\n                    runtime: chunk.runtime,\n                    chunkGraph: chunkGraph\n                  },\n                  auxiliary: true,\n                  identifier: \"webassemblyAsyncModule\".concat(chunkGraph.getModuleId(module)),\n                  hash: chunkGraph.getModuleHash(module, chunk.runtime)\n                });\n              }\n            };\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              _loop();\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n          return result;\n        });\n      });\n    }\n  }, {\n    key: \"renderModule\",\n    value: function renderModule(module, renderContext, hooks) {\n      var codeGenerationResults = renderContext.codeGenerationResults,\n        chunk = renderContext.chunk;\n      try {\n        var moduleSource = codeGenerationResults.getSource(module, chunk.runtime, \"webassembly\");\n        return tryRunOrWebpackError(function () {\n          return hooks.renderModuleContent.call(moduleSource, module, renderContext);\n        }, \"AsyncWebAssemblyModulesPlugin.getCompilationHooks().renderModuleContent\");\n      } catch (e) {\n        e.module = module;\n        throw e;\n      }\n    }\n  }], [{\n    key: \"getCompilationHooks\",\n    value:\n    /**\n     * @param {Compilation} compilation the compilation\n     * @returns {CompilationHooks} the attached hooks\n     */\n    function getCompilationHooks(compilation) {\n      if (!(compilation instanceof Compilation)) {\n        throw new TypeError(\"The 'compilation' argument must be an instance of Compilation\");\n      }\n      var hooks = compilationHooksMap.get(compilation);\n      if (hooks === undefined) {\n        hooks = {\n          renderModuleContent: new SyncWaterfallHook([\"source\", \"module\", \"renderContext\"])\n        };\n        compilationHooksMap.set(compilation, hooks);\n      }\n      return hooks;\n    }\n  }]);\n  return AsyncWebAssemblyModulesPlugin;\n}();\nmodule.exports = AsyncWebAssemblyModulesPlugin;","map":{"version":3,"names":["require","SyncWaterfallHook","Compilation","Generator","tryRunOrWebpackError","WebAssemblyImportDependency","compareModulesByIdentifier","memoize","getAsyncWebAssemblyGenerator","getAsyncWebAssemblyJavascriptGenerator","getAsyncWebAssemblyParser","compilationHooksMap","WeakMap","AsyncWebAssemblyModulesPlugin","options","compiler","hooks","compilation","tap","normalModuleFactory","getCompilationHooks","dependencyFactories","set","createParser","for","AsyncWebAssemblyParser","createGenerator","AsyncWebAssemblyJavascriptGenerator","AsyncWebAssemblyGenerator","byType","javascript","outputOptions","webassemblyModuleFilename","webassembly","renderManifest","result","moduleGraph","chunkGraph","runtimeTemplate","chunk","dependencyTemplates","codeGenerationResults","getOrderedChunkModulesIterable","module","type","filenameTemplate","push","render","renderModule","pathOptions","runtime","auxiliary","identifier","getModuleId","hash","getModuleHash","renderContext","moduleSource","getSource","renderModuleContent","call","e","TypeError","get","undefined","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/wasm-async/AsyncWebAssemblyModulesPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { SyncWaterfallHook } = require(\"tapable\");\nconst Compilation = require(\"../Compilation\");\nconst Generator = require(\"../Generator\");\nconst { tryRunOrWebpackError } = require(\"../HookWebpackError\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\nconst { compareModulesByIdentifier } = require(\"../util/comparators\");\nconst memoize = require(\"../util/memoize\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"../Template\").RenderManifestEntry} RenderManifestEntry */\n/** @typedef {import(\"../Template\").RenderManifestOptions} RenderManifestOptions */\n\nconst getAsyncWebAssemblyGenerator = memoize(() =>\n\trequire(\"./AsyncWebAssemblyGenerator\")\n);\nconst getAsyncWebAssemblyJavascriptGenerator = memoize(() =>\n\trequire(\"./AsyncWebAssemblyJavascriptGenerator\")\n);\nconst getAsyncWebAssemblyParser = memoize(() =>\n\trequire(\"./AsyncWebAssemblyParser\")\n);\n\n/**\n * @typedef {Object} WebAssemblyRenderContext\n * @property {Chunk} chunk the chunk\n * @property {DependencyTemplates} dependencyTemplates the dependency templates\n * @property {RuntimeTemplate} runtimeTemplate the runtime template\n * @property {ModuleGraph} moduleGraph the module graph\n * @property {ChunkGraph} chunkGraph the chunk graph\n * @property {CodeGenerationResults} codeGenerationResults results of code generation\n */\n\n/**\n * @typedef {Object} CompilationHooks\n * @property {SyncWaterfallHook<[Source, Module, WebAssemblyRenderContext]>} renderModuleContent\n */\n\n/** @type {WeakMap<Compilation, CompilationHooks>} */\nconst compilationHooksMap = new WeakMap();\n\nclass AsyncWebAssemblyModulesPlugin {\n\t/**\n\t * @param {Compilation} compilation the compilation\n\t * @returns {CompilationHooks} the attached hooks\n\t */\n\tstatic getCompilationHooks(compilation) {\n\t\tif (!(compilation instanceof Compilation)) {\n\t\t\tthrow new TypeError(\n\t\t\t\t\"The 'compilation' argument must be an instance of Compilation\"\n\t\t\t);\n\t\t}\n\t\tlet hooks = compilationHooksMap.get(compilation);\n\t\tif (hooks === undefined) {\n\t\t\thooks = {\n\t\t\t\trenderModuleContent: new SyncWaterfallHook([\n\t\t\t\t\t\"source\",\n\t\t\t\t\t\"module\",\n\t\t\t\t\t\"renderContext\"\n\t\t\t\t])\n\t\t\t};\n\t\t\tcompilationHooksMap.set(compilation, hooks);\n\t\t}\n\t\treturn hooks;\n\t}\n\n\tconstructor(options) {\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"AsyncWebAssemblyModulesPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tconst hooks =\n\t\t\t\t\tAsyncWebAssemblyModulesPlugin.getCompilationHooks(compilation);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tWebAssemblyImportDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(\"webassembly/async\")\n\t\t\t\t\t.tap(\"AsyncWebAssemblyModulesPlugin\", () => {\n\t\t\t\t\t\tconst AsyncWebAssemblyParser = getAsyncWebAssemblyParser();\n\n\t\t\t\t\t\treturn new AsyncWebAssemblyParser();\n\t\t\t\t\t});\n\t\t\t\tnormalModuleFactory.hooks.createGenerator\n\t\t\t\t\t.for(\"webassembly/async\")\n\t\t\t\t\t.tap(\"AsyncWebAssemblyModulesPlugin\", () => {\n\t\t\t\t\t\tconst AsyncWebAssemblyJavascriptGenerator =\n\t\t\t\t\t\t\tgetAsyncWebAssemblyJavascriptGenerator();\n\t\t\t\t\t\tconst AsyncWebAssemblyGenerator = getAsyncWebAssemblyGenerator();\n\n\t\t\t\t\t\treturn Generator.byType({\n\t\t\t\t\t\t\tjavascript: new AsyncWebAssemblyJavascriptGenerator(\n\t\t\t\t\t\t\t\tcompilation.outputOptions.webassemblyModuleFilename\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\twebassembly: new AsyncWebAssemblyGenerator(this.options)\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\tcompilation.hooks.renderManifest.tap(\n\t\t\t\t\t\"WebAssemblyModulesPlugin\",\n\t\t\t\t\t(result, options) => {\n\t\t\t\t\t\tconst { moduleGraph, chunkGraph, runtimeTemplate } = compilation;\n\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\toutputOptions,\n\t\t\t\t\t\t\tdependencyTemplates,\n\t\t\t\t\t\t\tcodeGenerationResults\n\t\t\t\t\t\t} = options;\n\n\t\t\t\t\t\tfor (const module of chunkGraph.getOrderedChunkModulesIterable(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tcompareModulesByIdentifier\n\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\tif (module.type === \"webassembly/async\") {\n\t\t\t\t\t\t\t\tconst filenameTemplate =\n\t\t\t\t\t\t\t\t\toutputOptions.webassemblyModuleFilename;\n\n\t\t\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\t\t\trender: () =>\n\t\t\t\t\t\t\t\t\t\tthis.renderModule(\n\t\t\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\t\t\t\t\tdependencyTemplates,\n\t\t\t\t\t\t\t\t\t\t\t\truntimeTemplate,\n\t\t\t\t\t\t\t\t\t\t\t\tmoduleGraph,\n\t\t\t\t\t\t\t\t\t\t\t\tchunkGraph,\n\t\t\t\t\t\t\t\t\t\t\t\tcodeGenerationResults\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\thooks\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tfilenameTemplate,\n\t\t\t\t\t\t\t\t\tpathOptions: {\n\t\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\t\truntime: chunk.runtime,\n\t\t\t\t\t\t\t\t\t\tchunkGraph\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tauxiliary: true,\n\t\t\t\t\t\t\t\t\tidentifier: `webassemblyAsyncModule${chunkGraph.getModuleId(\n\t\t\t\t\t\t\t\t\t\tmodule\n\t\t\t\t\t\t\t\t\t)}`,\n\t\t\t\t\t\t\t\t\thash: chunkGraph.getModuleHash(module, chunk.runtime)\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n\n\trenderModule(module, renderContext, hooks) {\n\t\tconst { codeGenerationResults, chunk } = renderContext;\n\t\ttry {\n\t\t\tconst moduleSource = codeGenerationResults.getSource(\n\t\t\t\tmodule,\n\t\t\t\tchunk.runtime,\n\t\t\t\t\"webassembly\"\n\t\t\t);\n\t\t\treturn tryRunOrWebpackError(\n\t\t\t\t() =>\n\t\t\t\t\thooks.renderModuleContent.call(moduleSource, module, renderContext),\n\t\t\t\t\"AsyncWebAssemblyModulesPlugin.getCompilationHooks().renderModuleContent\"\n\t\t\t);\n\t\t} catch (e) {\n\t\t\te.module = module;\n\t\t\tthrow e;\n\t\t}\n\t}\n}\n\nmodule.exports = AsyncWebAssemblyModulesPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}