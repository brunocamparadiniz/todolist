{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _require = require(\"webpack-sources\"),\n  ConcatSource = _require.ConcatSource;\nvar ExternalModule = require(\"../ExternalModule\");\nvar Template = require(\"../Template\");\nvar AbstractLibraryPlugin = require(\"./AbstractLibraryPlugin\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryOptions} LibraryOptions */\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryType} LibraryType */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compilation\").ChunkHashContext} ChunkHashContext */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @template T @typedef {import(\"./AbstractLibraryPlugin\").LibraryContext<T>} LibraryContext<T> */\n\n/**\n * @typedef {Object} AmdLibraryPluginOptions\n * @property {LibraryType} type\n * @property {boolean=} requireAsWrapper\n */\n\n/**\n * @typedef {Object} AmdLibraryPluginParsed\n * @property {string} name\n */\n\n/**\n * @typedef {AmdLibraryPluginParsed} T\n * @extends {AbstractLibraryPlugin<AmdLibraryPluginParsed>}\n */\nvar AmdLibraryPlugin = /*#__PURE__*/function (_AbstractLibraryPlugi) {\n  _inherits(AmdLibraryPlugin, _AbstractLibraryPlugi);\n  var _super = _createSuper(AmdLibraryPlugin);\n  /**\n   * @param {AmdLibraryPluginOptions} options the plugin options\n   */\n  function AmdLibraryPlugin(options) {\n    var _this;\n    _classCallCheck(this, AmdLibraryPlugin);\n    _this = _super.call(this, {\n      pluginName: \"AmdLibraryPlugin\",\n      type: options.type\n    });\n    _this.requireAsWrapper = options.requireAsWrapper;\n    return _this;\n  }\n\n  /**\n   * @param {LibraryOptions} library normalized library option\n   * @returns {T | false} preprocess as needed by overriding\n   */\n  _createClass(AmdLibraryPlugin, [{\n    key: \"parseOptions\",\n    value: function parseOptions(library) {\n      var name = library.name;\n      if (this.requireAsWrapper) {\n        if (name) {\n          throw new Error(\"AMD library name must be unset. \".concat(AbstractLibraryPlugin.COMMON_LIBRARY_NAME_MESSAGE));\n        }\n      } else {\n        if (name && typeof name !== \"string\") {\n          throw new Error(\"AMD library name must be a simple string or unset. \".concat(AbstractLibraryPlugin.COMMON_LIBRARY_NAME_MESSAGE));\n        }\n      }\n      return {\n        name: /** @type {string=} */name\n      };\n    }\n\n    /**\n     * @param {Source} source source\n     * @param {RenderContext} renderContext render context\n     * @param {LibraryContext<T>} libraryContext context\n     * @returns {Source} source with library export\n     */\n  }, {\n    key: \"render\",\n    value: function render(source, _ref, _ref2) {\n      var chunkGraph = _ref.chunkGraph,\n        chunk = _ref.chunk,\n        runtimeTemplate = _ref.runtimeTemplate;\n      var options = _ref2.options,\n        compilation = _ref2.compilation;\n      var modern = runtimeTemplate.supportsArrowFunction();\n      var modules = chunkGraph.getChunkModules(chunk).filter(function (m) {\n        return m instanceof ExternalModule;\n      });\n      var externals = /** @type {ExternalModule[]} */modules;\n      var externalsDepsArray = JSON.stringify(externals.map(function (m) {\n        return typeof m.request === \"object\" && !Array.isArray(m.request) ? m.request.amd : m.request;\n      }));\n      var externalsArguments = externals.map(function (m) {\n        return \"__WEBPACK_EXTERNAL_MODULE_\".concat(Template.toIdentifier(\"\".concat(chunkGraph.getModuleId(m))), \"__\");\n      }).join(\", \");\n      var iife = runtimeTemplate.isIIFE();\n      var fnStart = (modern ? \"(\".concat(externalsArguments, \") => {\") : \"function(\".concat(externalsArguments, \") {\")) + (iife || !chunk.hasRuntime() ? \" return \" : \"\\n\");\n      var fnEnd = iife ? \";\\n}\" : \"\\n}\";\n      if (this.requireAsWrapper) {\n        return new ConcatSource(\"require(\".concat(externalsDepsArray, \", \").concat(fnStart), source, \"\".concat(fnEnd, \");\"));\n      } else if (options.name) {\n        var name = compilation.getPath(options.name, {\n          chunk: chunk\n        });\n        return new ConcatSource(\"define(\".concat(JSON.stringify(name), \", \").concat(externalsDepsArray, \", \").concat(fnStart), source, \"\".concat(fnEnd, \");\"));\n      } else if (externalsArguments) {\n        return new ConcatSource(\"define(\".concat(externalsDepsArray, \", \").concat(fnStart), source, \"\".concat(fnEnd, \");\"));\n      } else {\n        return new ConcatSource(\"define(\".concat(fnStart), source, \"\".concat(fnEnd, \");\"));\n      }\n    }\n\n    /**\n     * @param {Chunk} chunk the chunk\n     * @param {Hash} hash hash\n     * @param {ChunkHashContext} chunkHashContext chunk hash context\n     * @param {LibraryContext<T>} libraryContext context\n     * @returns {void}\n     */\n  }, {\n    key: \"chunkHash\",\n    value: function chunkHash(chunk, hash, chunkHashContext, _ref3) {\n      var options = _ref3.options,\n        compilation = _ref3.compilation;\n      hash.update(\"AmdLibraryPlugin\");\n      if (this.requireAsWrapper) {\n        hash.update(\"requireAsWrapper\");\n      } else if (options.name) {\n        hash.update(\"named\");\n        var name = compilation.getPath(options.name, {\n          chunk: chunk\n        });\n        hash.update(name);\n      }\n    }\n  }]);\n  return AmdLibraryPlugin;\n}(AbstractLibraryPlugin);\nmodule.exports = AmdLibraryPlugin;","map":{"version":3,"names":["require","ConcatSource","ExternalModule","Template","AbstractLibraryPlugin","AmdLibraryPlugin","options","pluginName","type","requireAsWrapper","library","name","Error","COMMON_LIBRARY_NAME_MESSAGE","source","chunkGraph","chunk","runtimeTemplate","compilation","modern","supportsArrowFunction","modules","getChunkModules","filter","m","externals","externalsDepsArray","JSON","stringify","map","request","Array","isArray","amd","externalsArguments","toIdentifier","getModuleId","join","iife","isIIFE","fnStart","hasRuntime","fnEnd","getPath","hash","chunkHashContext","update","module","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/library/AmdLibraryPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { ConcatSource } = require(\"webpack-sources\");\nconst ExternalModule = require(\"../ExternalModule\");\nconst Template = require(\"../Template\");\nconst AbstractLibraryPlugin = require(\"./AbstractLibraryPlugin\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryOptions} LibraryOptions */\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryType} LibraryType */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compilation\").ChunkHashContext} ChunkHashContext */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @template T @typedef {import(\"./AbstractLibraryPlugin\").LibraryContext<T>} LibraryContext<T> */\n\n/**\n * @typedef {Object} AmdLibraryPluginOptions\n * @property {LibraryType} type\n * @property {boolean=} requireAsWrapper\n */\n\n/**\n * @typedef {Object} AmdLibraryPluginParsed\n * @property {string} name\n */\n\n/**\n * @typedef {AmdLibraryPluginParsed} T\n * @extends {AbstractLibraryPlugin<AmdLibraryPluginParsed>}\n */\nclass AmdLibraryPlugin extends AbstractLibraryPlugin {\n\t/**\n\t * @param {AmdLibraryPluginOptions} options the plugin options\n\t */\n\tconstructor(options) {\n\t\tsuper({\n\t\t\tpluginName: \"AmdLibraryPlugin\",\n\t\t\ttype: options.type\n\t\t});\n\t\tthis.requireAsWrapper = options.requireAsWrapper;\n\t}\n\n\t/**\n\t * @param {LibraryOptions} library normalized library option\n\t * @returns {T | false} preprocess as needed by overriding\n\t */\n\tparseOptions(library) {\n\t\tconst { name } = library;\n\t\tif (this.requireAsWrapper) {\n\t\t\tif (name) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`AMD library name must be unset. ${AbstractLibraryPlugin.COMMON_LIBRARY_NAME_MESSAGE}`\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tif (name && typeof name !== \"string\") {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`AMD library name must be a simple string or unset. ${AbstractLibraryPlugin.COMMON_LIBRARY_NAME_MESSAGE}`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tname: /** @type {string=} */ (name)\n\t\t};\n\t}\n\n\t/**\n\t * @param {Source} source source\n\t * @param {RenderContext} renderContext render context\n\t * @param {LibraryContext<T>} libraryContext context\n\t * @returns {Source} source with library export\n\t */\n\trender(\n\t\tsource,\n\t\t{ chunkGraph, chunk, runtimeTemplate },\n\t\t{ options, compilation }\n\t) {\n\t\tconst modern = runtimeTemplate.supportsArrowFunction();\n\t\tconst modules = chunkGraph\n\t\t\t.getChunkModules(chunk)\n\t\t\t.filter(m => m instanceof ExternalModule);\n\t\tconst externals = /** @type {ExternalModule[]} */ (modules);\n\t\tconst externalsDepsArray = JSON.stringify(\n\t\t\texternals.map(m =>\n\t\t\t\ttypeof m.request === \"object\" && !Array.isArray(m.request)\n\t\t\t\t\t? m.request.amd\n\t\t\t\t\t: m.request\n\t\t\t)\n\t\t);\n\t\tconst externalsArguments = externals\n\t\t\t.map(\n\t\t\t\tm =>\n\t\t\t\t\t`__WEBPACK_EXTERNAL_MODULE_${Template.toIdentifier(\n\t\t\t\t\t\t`${chunkGraph.getModuleId(m)}`\n\t\t\t\t\t)}__`\n\t\t\t)\n\t\t\t.join(\", \");\n\n\t\tconst iife = runtimeTemplate.isIIFE();\n\t\tconst fnStart =\n\t\t\t(modern\n\t\t\t\t? `(${externalsArguments}) => {`\n\t\t\t\t: `function(${externalsArguments}) {`) +\n\t\t\t(iife || !chunk.hasRuntime() ? \" return \" : \"\\n\");\n\t\tconst fnEnd = iife ? \";\\n}\" : \"\\n}\";\n\n\t\tif (this.requireAsWrapper) {\n\t\t\treturn new ConcatSource(\n\t\t\t\t`require(${externalsDepsArray}, ${fnStart}`,\n\t\t\t\tsource,\n\t\t\t\t`${fnEnd});`\n\t\t\t);\n\t\t} else if (options.name) {\n\t\t\tconst name = compilation.getPath(options.name, {\n\t\t\t\tchunk\n\t\t\t});\n\n\t\t\treturn new ConcatSource(\n\t\t\t\t`define(${JSON.stringify(name)}, ${externalsDepsArray}, ${fnStart}`,\n\t\t\t\tsource,\n\t\t\t\t`${fnEnd});`\n\t\t\t);\n\t\t} else if (externalsArguments) {\n\t\t\treturn new ConcatSource(\n\t\t\t\t`define(${externalsDepsArray}, ${fnStart}`,\n\t\t\t\tsource,\n\t\t\t\t`${fnEnd});`\n\t\t\t);\n\t\t} else {\n\t\t\treturn new ConcatSource(`define(${fnStart}`, source, `${fnEnd});`);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Chunk} chunk the chunk\n\t * @param {Hash} hash hash\n\t * @param {ChunkHashContext} chunkHashContext chunk hash context\n\t * @param {LibraryContext<T>} libraryContext context\n\t * @returns {void}\n\t */\n\tchunkHash(chunk, hash, chunkHashContext, { options, compilation }) {\n\t\thash.update(\"AmdLibraryPlugin\");\n\t\tif (this.requireAsWrapper) {\n\t\t\thash.update(\"requireAsWrapper\");\n\t\t} else if (options.name) {\n\t\t\thash.update(\"named\");\n\t\t\tconst name = compilation.getPath(options.name, {\n\t\t\t\tchunk\n\t\t\t});\n\t\t\thash.update(name);\n\t\t}\n\t}\n}\n\nmodule.exports = AmdLibraryPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}