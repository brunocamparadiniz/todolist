{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Yuta Hiroto @hiroppy\n*/\n\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _objectSpread = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _require = require(\"../util/cleverMerge\"),\n  cleverMerge = _require.cleverMerge;\nvar _require2 = require(\"../util/comparators\"),\n  compareModulesByIdentifier = _require2.compareModulesByIdentifier;\nvar createSchemaValidation = require(\"../util/create-schema-validation\");\nvar memoize = require(\"../util/memoize\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n\nvar getSchema = function getSchema(name) {\n  var _require3 = require(\"../../schemas/WebpackOptions.json\"),\n    definitions = _require3.definitions;\n  return {\n    definitions: definitions,\n    oneOf: [{\n      $ref: \"#/definitions/\".concat(name)\n    }]\n  };\n};\nvar generatorValidationOptions = {\n  name: \"Asset Modules Plugin\",\n  baseDataPath: \"generator\"\n};\nvar validateGeneratorOptions = {\n  asset: createSchemaValidation(require(\"../../schemas/plugins/asset/AssetGeneratorOptions.check.js\"), function () {\n    return getSchema(\"AssetGeneratorOptions\");\n  }, generatorValidationOptions),\n  \"asset/resource\": createSchemaValidation(require(\"../../schemas/plugins/asset/AssetResourceGeneratorOptions.check.js\"), function () {\n    return getSchema(\"AssetResourceGeneratorOptions\");\n  }, generatorValidationOptions),\n  \"asset/inline\": createSchemaValidation(require(\"../../schemas/plugins/asset/AssetInlineGeneratorOptions.check.js\"), function () {\n    return getSchema(\"AssetInlineGeneratorOptions\");\n  }, generatorValidationOptions)\n};\nvar validateParserOptions = createSchemaValidation(require(\"../../schemas/plugins/asset/AssetParserOptions.check.js\"), function () {\n  return getSchema(\"AssetParserOptions\");\n}, {\n  name: \"Asset Modules Plugin\",\n  baseDataPath: \"parser\"\n});\nvar getAssetGenerator = memoize(function () {\n  return require(\"./AssetGenerator\");\n});\nvar getAssetParser = memoize(function () {\n  return require(\"./AssetParser\");\n});\nvar getAssetSourceParser = memoize(function () {\n  return require(\"./AssetSourceParser\");\n});\nvar getAssetSourceGenerator = memoize(function () {\n  return require(\"./AssetSourceGenerator\");\n});\nvar type = \"asset\";\nvar plugin = \"AssetModulesPlugin\";\nvar AssetModulesPlugin = /*#__PURE__*/function () {\n  function AssetModulesPlugin() {\n    _classCallCheck(this, AssetModulesPlugin);\n  }\n  _createClass(AssetModulesPlugin, [{\n    key: \"apply\",\n    value:\n    /**\n     * Apply the plugin\n     * @param {Compiler} compiler the compiler instance\n     * @returns {void}\n     */\n    function apply(compiler) {\n      compiler.hooks.compilation.tap(plugin, function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        normalModuleFactory.hooks.createParser.for(\"asset\").tap(plugin, function (parserOptions) {\n          validateParserOptions(parserOptions);\n          parserOptions = cleverMerge(compiler.options.module.parser.asset, parserOptions);\n          var dataUrlCondition = parserOptions.dataUrlCondition;\n          if (!dataUrlCondition || typeof dataUrlCondition === \"object\") {\n            dataUrlCondition = _objectSpread({\n              maxSize: 8096\n            }, dataUrlCondition);\n          }\n          var AssetParser = getAssetParser();\n          return new AssetParser(dataUrlCondition);\n        });\n        normalModuleFactory.hooks.createParser.for(\"asset/inline\").tap(plugin, function (parserOptions) {\n          var AssetParser = getAssetParser();\n          return new AssetParser(true);\n        });\n        normalModuleFactory.hooks.createParser.for(\"asset/resource\").tap(plugin, function (parserOptions) {\n          var AssetParser = getAssetParser();\n          return new AssetParser(false);\n        });\n        normalModuleFactory.hooks.createParser.for(\"asset/source\").tap(plugin, function (parserOptions) {\n          var AssetSourceParser = getAssetSourceParser();\n          return new AssetSourceParser();\n        });\n        var _loop = function _loop() {\n          var type = _arr[_i];\n          normalModuleFactory.hooks.createGenerator.for(type).tap(plugin, function (generatorOptions) {\n            validateGeneratorOptions[type](generatorOptions);\n            var dataUrl = undefined;\n            if (type !== \"asset/resource\") {\n              dataUrl = generatorOptions.dataUrl;\n              if (!dataUrl || typeof dataUrl === \"object\") {\n                dataUrl = _objectSpread({\n                  encoding: undefined,\n                  mimetype: undefined\n                }, dataUrl);\n              }\n            }\n            var filename = undefined;\n            var publicPath = undefined;\n            var outputPath = undefined;\n            if (type !== \"asset/inline\") {\n              filename = generatorOptions.filename;\n              publicPath = generatorOptions.publicPath;\n              outputPath = generatorOptions.outputPath;\n            }\n            var AssetGenerator = getAssetGenerator();\n            return new AssetGenerator(dataUrl, filename, publicPath, outputPath, generatorOptions.emit !== false);\n          });\n        };\n        for (var _i = 0, _arr = [\"asset\", \"asset/inline\", \"asset/resource\"]; _i < _arr.length; _i++) {\n          _loop();\n        }\n        normalModuleFactory.hooks.createGenerator.for(\"asset/source\").tap(plugin, function () {\n          var AssetSourceGenerator = getAssetSourceGenerator();\n          return new AssetSourceGenerator();\n        });\n        compilation.hooks.renderManifest.tap(plugin, function (result, options) {\n          var chunkGraph = compilation.chunkGraph;\n          var chunk = options.chunk,\n            codeGenerationResults = options.codeGenerationResults;\n          var modules = chunkGraph.getOrderedChunkModulesIterableBySourceType(chunk, \"asset\", compareModulesByIdentifier);\n          if (modules) {\n            var _iterator = _createForOfIteratorHelper(modules),\n              _step;\n            try {\n              var _loop2 = function _loop2() {\n                var module = _step.value;\n                try {\n                  var codeGenResult = codeGenerationResults.get(module, chunk.runtime);\n                  result.push({\n                    render: function render() {\n                      return codeGenResult.sources.get(type);\n                    },\n                    filename: module.buildInfo.filename || codeGenResult.data.get(\"filename\"),\n                    info: module.buildInfo.assetInfo || codeGenResult.data.get(\"assetInfo\"),\n                    auxiliary: true,\n                    identifier: \"assetModule\".concat(chunkGraph.getModuleId(module)),\n                    hash: module.buildInfo.fullContentHash || codeGenResult.data.get(\"fullContentHash\")\n                  });\n                } catch (e) {\n                  e.message += \"\\nduring rendering of asset \".concat(module.identifier());\n                  throw e;\n                }\n              };\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                _loop2();\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n          }\n          return result;\n        });\n        compilation.hooks.prepareModuleExecution.tap(\"AssetModulesPlugin\", function (options, context) {\n          var codeGenerationResult = options.codeGenerationResult;\n          var source = codeGenerationResult.sources.get(\"asset\");\n          if (source === undefined) return;\n          context.assets.set(codeGenerationResult.data.get(\"filename\"), {\n            source: source,\n            info: codeGenerationResult.data.get(\"assetInfo\")\n          });\n        });\n      });\n    }\n  }]);\n  return AssetModulesPlugin;\n}();\nmodule.exports = AssetModulesPlugin;","map":{"version":3,"names":["require","cleverMerge","compareModulesByIdentifier","createSchemaValidation","memoize","getSchema","name","definitions","oneOf","$ref","generatorValidationOptions","baseDataPath","validateGeneratorOptions","asset","validateParserOptions","getAssetGenerator","getAssetParser","getAssetSourceParser","getAssetSourceGenerator","type","plugin","AssetModulesPlugin","compiler","hooks","compilation","tap","normalModuleFactory","createParser","for","parserOptions","options","module","parser","dataUrlCondition","maxSize","AssetParser","AssetSourceParser","createGenerator","generatorOptions","dataUrl","undefined","encoding","mimetype","filename","publicPath","outputPath","AssetGenerator","emit","AssetSourceGenerator","renderManifest","result","chunkGraph","chunk","codeGenerationResults","modules","getOrderedChunkModulesIterableBySourceType","codeGenResult","get","runtime","push","render","sources","buildInfo","data","info","assetInfo","auxiliary","identifier","getModuleId","hash","fullContentHash","e","message","prepareModuleExecution","context","codeGenerationResult","source","assets","set","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/asset/AssetModulesPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Yuta Hiroto @hiroppy\n*/\n\n\"use strict\";\n\nconst { cleverMerge } = require(\"../util/cleverMerge\");\nconst { compareModulesByIdentifier } = require(\"../util/comparators\");\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\nconst memoize = require(\"../util/memoize\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n\nconst getSchema = name => {\n\tconst { definitions } = require(\"../../schemas/WebpackOptions.json\");\n\treturn {\n\t\tdefinitions,\n\t\toneOf: [{ $ref: `#/definitions/${name}` }]\n\t};\n};\n\nconst generatorValidationOptions = {\n\tname: \"Asset Modules Plugin\",\n\tbaseDataPath: \"generator\"\n};\nconst validateGeneratorOptions = {\n\tasset: createSchemaValidation(\n\t\trequire(\"../../schemas/plugins/asset/AssetGeneratorOptions.check.js\"),\n\t\t() => getSchema(\"AssetGeneratorOptions\"),\n\t\tgeneratorValidationOptions\n\t),\n\t\"asset/resource\": createSchemaValidation(\n\t\trequire(\"../../schemas/plugins/asset/AssetResourceGeneratorOptions.check.js\"),\n\t\t() => getSchema(\"AssetResourceGeneratorOptions\"),\n\t\tgeneratorValidationOptions\n\t),\n\t\"asset/inline\": createSchemaValidation(\n\t\trequire(\"../../schemas/plugins/asset/AssetInlineGeneratorOptions.check.js\"),\n\t\t() => getSchema(\"AssetInlineGeneratorOptions\"),\n\t\tgeneratorValidationOptions\n\t)\n};\n\nconst validateParserOptions = createSchemaValidation(\n\trequire(\"../../schemas/plugins/asset/AssetParserOptions.check.js\"),\n\t() => getSchema(\"AssetParserOptions\"),\n\t{\n\t\tname: \"Asset Modules Plugin\",\n\t\tbaseDataPath: \"parser\"\n\t}\n);\n\nconst getAssetGenerator = memoize(() => require(\"./AssetGenerator\"));\nconst getAssetParser = memoize(() => require(\"./AssetParser\"));\nconst getAssetSourceParser = memoize(() => require(\"./AssetSourceParser\"));\nconst getAssetSourceGenerator = memoize(() =>\n\trequire(\"./AssetSourceGenerator\")\n);\n\nconst type = \"asset\";\nconst plugin = \"AssetModulesPlugin\";\n\nclass AssetModulesPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\tplugin,\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(\"asset\")\n\t\t\t\t\t.tap(plugin, parserOptions => {\n\t\t\t\t\t\tvalidateParserOptions(parserOptions);\n\t\t\t\t\t\tparserOptions = cleverMerge(\n\t\t\t\t\t\t\tcompiler.options.module.parser.asset,\n\t\t\t\t\t\t\tparserOptions\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tlet dataUrlCondition = parserOptions.dataUrlCondition;\n\t\t\t\t\t\tif (!dataUrlCondition || typeof dataUrlCondition === \"object\") {\n\t\t\t\t\t\t\tdataUrlCondition = {\n\t\t\t\t\t\t\t\tmaxSize: 8096,\n\t\t\t\t\t\t\t\t...dataUrlCondition\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst AssetParser = getAssetParser();\n\n\t\t\t\t\t\treturn new AssetParser(dataUrlCondition);\n\t\t\t\t\t});\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(\"asset/inline\")\n\t\t\t\t\t.tap(plugin, parserOptions => {\n\t\t\t\t\t\tconst AssetParser = getAssetParser();\n\n\t\t\t\t\t\treturn new AssetParser(true);\n\t\t\t\t\t});\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(\"asset/resource\")\n\t\t\t\t\t.tap(plugin, parserOptions => {\n\t\t\t\t\t\tconst AssetParser = getAssetParser();\n\n\t\t\t\t\t\treturn new AssetParser(false);\n\t\t\t\t\t});\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(\"asset/source\")\n\t\t\t\t\t.tap(plugin, parserOptions => {\n\t\t\t\t\t\tconst AssetSourceParser = getAssetSourceParser();\n\n\t\t\t\t\t\treturn new AssetSourceParser();\n\t\t\t\t\t});\n\n\t\t\t\tfor (const type of [\"asset\", \"asset/inline\", \"asset/resource\"]) {\n\t\t\t\t\tnormalModuleFactory.hooks.createGenerator\n\t\t\t\t\t\t.for(type)\n\t\t\t\t\t\t.tap(plugin, generatorOptions => {\n\t\t\t\t\t\t\tvalidateGeneratorOptions[type](generatorOptions);\n\n\t\t\t\t\t\t\tlet dataUrl = undefined;\n\t\t\t\t\t\t\tif (type !== \"asset/resource\") {\n\t\t\t\t\t\t\t\tdataUrl = generatorOptions.dataUrl;\n\t\t\t\t\t\t\t\tif (!dataUrl || typeof dataUrl === \"object\") {\n\t\t\t\t\t\t\t\t\tdataUrl = {\n\t\t\t\t\t\t\t\t\t\tencoding: undefined,\n\t\t\t\t\t\t\t\t\t\tmimetype: undefined,\n\t\t\t\t\t\t\t\t\t\t...dataUrl\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet filename = undefined;\n\t\t\t\t\t\t\tlet publicPath = undefined;\n\t\t\t\t\t\t\tlet outputPath = undefined;\n\t\t\t\t\t\t\tif (type !== \"asset/inline\") {\n\t\t\t\t\t\t\t\tfilename = generatorOptions.filename;\n\t\t\t\t\t\t\t\tpublicPath = generatorOptions.publicPath;\n\t\t\t\t\t\t\t\toutputPath = generatorOptions.outputPath;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst AssetGenerator = getAssetGenerator();\n\n\t\t\t\t\t\t\treturn new AssetGenerator(\n\t\t\t\t\t\t\t\tdataUrl,\n\t\t\t\t\t\t\t\tfilename,\n\t\t\t\t\t\t\t\tpublicPath,\n\t\t\t\t\t\t\t\toutputPath,\n\t\t\t\t\t\t\t\tgeneratorOptions.emit !== false\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tnormalModuleFactory.hooks.createGenerator\n\t\t\t\t\t.for(\"asset/source\")\n\t\t\t\t\t.tap(plugin, () => {\n\t\t\t\t\t\tconst AssetSourceGenerator = getAssetSourceGenerator();\n\n\t\t\t\t\t\treturn new AssetSourceGenerator();\n\t\t\t\t\t});\n\n\t\t\t\tcompilation.hooks.renderManifest.tap(plugin, (result, options) => {\n\t\t\t\t\tconst { chunkGraph } = compilation;\n\t\t\t\t\tconst { chunk, codeGenerationResults } = options;\n\n\t\t\t\t\tconst modules = chunkGraph.getOrderedChunkModulesIterableBySourceType(\n\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\"asset\",\n\t\t\t\t\t\tcompareModulesByIdentifier\n\t\t\t\t\t);\n\t\t\t\t\tif (modules) {\n\t\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconst codeGenResult = codeGenerationResults.get(\n\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\tchunk.runtime\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\t\t\trender: () => codeGenResult.sources.get(type),\n\t\t\t\t\t\t\t\t\tfilename:\n\t\t\t\t\t\t\t\t\t\tmodule.buildInfo.filename ||\n\t\t\t\t\t\t\t\t\t\tcodeGenResult.data.get(\"filename\"),\n\t\t\t\t\t\t\t\t\tinfo:\n\t\t\t\t\t\t\t\t\t\tmodule.buildInfo.assetInfo ||\n\t\t\t\t\t\t\t\t\t\tcodeGenResult.data.get(\"assetInfo\"),\n\t\t\t\t\t\t\t\t\tauxiliary: true,\n\t\t\t\t\t\t\t\t\tidentifier: `assetModule${chunkGraph.getModuleId(module)}`,\n\t\t\t\t\t\t\t\t\thash:\n\t\t\t\t\t\t\t\t\t\tmodule.buildInfo.fullContentHash ||\n\t\t\t\t\t\t\t\t\t\tcodeGenResult.data.get(\"fullContentHash\")\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\te.message += `\\nduring rendering of asset ${module.identifier()}`;\n\t\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn result;\n\t\t\t\t});\n\n\t\t\t\tcompilation.hooks.prepareModuleExecution.tap(\n\t\t\t\t\t\"AssetModulesPlugin\",\n\t\t\t\t\t(options, context) => {\n\t\t\t\t\t\tconst { codeGenerationResult } = options;\n\t\t\t\t\t\tconst source = codeGenerationResult.sources.get(\"asset\");\n\t\t\t\t\t\tif (source === undefined) return;\n\t\t\t\t\t\tcontext.assets.set(codeGenerationResult.data.get(\"filename\"), {\n\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\tinfo: codeGenerationResult.data.get(\"assetInfo\")\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = AssetModulesPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}