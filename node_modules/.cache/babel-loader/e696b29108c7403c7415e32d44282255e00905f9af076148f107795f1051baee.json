{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar Hash = require(\"./Hash\");\nvar BULK_SIZE = 2000;\n\n// We are using an object instead of a Map as this will stay static during the runtime\n// so access to it can be optimized by v8\nvar digestCaches = {};\nvar BulkUpdateDecorator = /*#__PURE__*/function (_Hash) {\n  _inherits(BulkUpdateDecorator, _Hash);\n  var _super = _createSuper(BulkUpdateDecorator);\n  /**\n   * @param {Hash | function(): Hash} hashOrFactory function to create a hash\n   * @param {string=} hashKey key for caching\n   */\n  function BulkUpdateDecorator(hashOrFactory, hashKey) {\n    var _this;\n    _classCallCheck(this, BulkUpdateDecorator);\n    _this = _super.call(this);\n    _this.hashKey = hashKey;\n    if (typeof hashOrFactory === \"function\") {\n      _this.hashFactory = hashOrFactory;\n      _this.hash = undefined;\n    } else {\n      _this.hashFactory = undefined;\n      _this.hash = hashOrFactory;\n    }\n    _this.buffer = \"\";\n    return _this;\n  }\n\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n  _createClass(BulkUpdateDecorator, [{\n    key: \"update\",\n    value: function update(data, inputEncoding) {\n      if (inputEncoding !== undefined || typeof data !== \"string\" || data.length > BULK_SIZE) {\n        if (this.hash === undefined) this.hash = this.hashFactory();\n        if (this.buffer.length > 0) {\n          this.hash.update(this.buffer);\n          this.buffer = \"\";\n        }\n        this.hash.update(data, inputEncoding);\n      } else {\n        this.buffer += data;\n        if (this.buffer.length > BULK_SIZE) {\n          if (this.hash === undefined) this.hash = this.hashFactory();\n          this.hash.update(this.buffer);\n          this.buffer = \"\";\n        }\n      }\n      return this;\n    }\n\n    /**\n     * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n     * @param {string=} encoding encoding of the return value\n     * @returns {string|Buffer} digest\n     */\n  }, {\n    key: \"digest\",\n    value: function digest(encoding) {\n      var digestCache;\n      var buffer = this.buffer;\n      if (this.hash === undefined) {\n        // short data for hash, we can use caching\n        var cacheKey = \"\".concat(this.hashKey, \"-\").concat(encoding);\n        digestCache = digestCaches[cacheKey];\n        if (digestCache === undefined) {\n          digestCache = digestCaches[cacheKey] = new Map();\n        }\n        var cacheEntry = digestCache.get(buffer);\n        if (cacheEntry !== undefined) return cacheEntry;\n        this.hash = this.hashFactory();\n      }\n      if (buffer.length > 0) {\n        this.hash.update(buffer);\n      }\n      var digestResult = this.hash.digest(encoding);\n      var result = typeof digestResult === \"string\" ? digestResult : digestResult.toString();\n      if (digestCache !== undefined) {\n        digestCache.set(buffer, result);\n      }\n      return result;\n    }\n  }]);\n  return BulkUpdateDecorator;\n}(Hash);\n/* istanbul ignore next */\nvar DebugHash = /*#__PURE__*/function (_Hash2) {\n  _inherits(DebugHash, _Hash2);\n  var _super2 = _createSuper(DebugHash);\n  function DebugHash() {\n    var _this2;\n    _classCallCheck(this, DebugHash);\n    _this2 = _super2.call(this);\n    _this2.string = \"\";\n    return _this2;\n  }\n\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n  _createClass(DebugHash, [{\n    key: \"update\",\n    value: function update(data, inputEncoding) {\n      if (typeof data !== \"string\") data = data.toString(\"utf-8\");\n      if (data.startsWith(\"debug-digest-\")) {\n        data = Buffer.from(data.slice(\"debug-digest-\".length), \"hex\").toString();\n      }\n      this.string += \"[\".concat(data, \"](\").concat(new Error().stack.split(\"\\n\", 3)[2], \")\\n\");\n      return this;\n    }\n\n    /**\n     * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n     * @param {string=} encoding encoding of the return value\n     * @returns {string|Buffer} digest\n     */\n  }, {\n    key: \"digest\",\n    value: function digest(encoding) {\n      return \"debug-digest-\" + Buffer.from(this.string).toString(\"hex\");\n    }\n  }]);\n  return DebugHash;\n}(Hash);\nvar crypto = undefined;\nvar createXXHash64 = undefined;\nvar createMd4 = undefined;\nvar BatchedHash = undefined;\n\n/**\n * Creates a hash by name or function\n * @param {string | typeof Hash} algorithm the algorithm name or a constructor creating a hash\n * @returns {Hash} the hash\n */\nmodule.exports = function (algorithm) {\n  if (typeof algorithm === \"function\") {\n    return new BulkUpdateDecorator(function () {\n      return new algorithm();\n    });\n  }\n  switch (algorithm) {\n    // TODO add non-cryptographic algorithm here\n    case \"debug\":\n      return new DebugHash();\n    case \"xxhash64\":\n      if (createXXHash64 === undefined) {\n        createXXHash64 = require(\"./hash/xxhash64\");\n        if (BatchedHash === undefined) {\n          BatchedHash = require(\"./hash/BatchedHash\");\n        }\n      }\n      return new BatchedHash(createXXHash64());\n    case \"md4\":\n      if (createMd4 === undefined) {\n        createMd4 = require(\"./hash/md4\");\n        if (BatchedHash === undefined) {\n          BatchedHash = require(\"./hash/BatchedHash\");\n        }\n      }\n      return new BatchedHash(createMd4());\n    case \"native-md4\":\n      if (crypto === undefined) crypto = require(\"crypto\");\n      return new BulkUpdateDecorator(function () {\n        return crypto.createHash(\"md4\");\n      }, \"md4\");\n    default:\n      if (crypto === undefined) crypto = require(\"crypto\");\n      return new BulkUpdateDecorator(function () {\n        return crypto.createHash(algorithm);\n      }, algorithm);\n  }\n};","map":{"version":3,"names":["Hash","require","BULK_SIZE","digestCaches","BulkUpdateDecorator","hashOrFactory","hashKey","hashFactory","hash","undefined","buffer","data","inputEncoding","length","update","encoding","digestCache","cacheKey","Map","cacheEntry","get","digestResult","digest","result","toString","set","DebugHash","string","startsWith","Buffer","from","slice","Error","stack","split","crypto","createXXHash64","createMd4","BatchedHash","module","exports","algorithm","createHash"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/util/createHash.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Hash = require(\"./Hash\");\n\nconst BULK_SIZE = 2000;\n\n// We are using an object instead of a Map as this will stay static during the runtime\n// so access to it can be optimized by v8\nconst digestCaches = {};\n\nclass BulkUpdateDecorator extends Hash {\n\t/**\n\t * @param {Hash | function(): Hash} hashOrFactory function to create a hash\n\t * @param {string=} hashKey key for caching\n\t */\n\tconstructor(hashOrFactory, hashKey) {\n\t\tsuper();\n\t\tthis.hashKey = hashKey;\n\t\tif (typeof hashOrFactory === \"function\") {\n\t\t\tthis.hashFactory = hashOrFactory;\n\t\t\tthis.hash = undefined;\n\t\t} else {\n\t\t\tthis.hashFactory = undefined;\n\t\t\tthis.hash = hashOrFactory;\n\t\t}\n\t\tthis.buffer = \"\";\n\t}\n\n\t/**\n\t * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n\t * @param {string|Buffer} data data\n\t * @param {string=} inputEncoding data encoding\n\t * @returns {this} updated hash\n\t */\n\tupdate(data, inputEncoding) {\n\t\tif (\n\t\t\tinputEncoding !== undefined ||\n\t\t\ttypeof data !== \"string\" ||\n\t\t\tdata.length > BULK_SIZE\n\t\t) {\n\t\t\tif (this.hash === undefined) this.hash = this.hashFactory();\n\t\t\tif (this.buffer.length > 0) {\n\t\t\t\tthis.hash.update(this.buffer);\n\t\t\t\tthis.buffer = \"\";\n\t\t\t}\n\t\t\tthis.hash.update(data, inputEncoding);\n\t\t} else {\n\t\t\tthis.buffer += data;\n\t\t\tif (this.buffer.length > BULK_SIZE) {\n\t\t\t\tif (this.hash === undefined) this.hash = this.hashFactory();\n\t\t\t\tthis.hash.update(this.buffer);\n\t\t\t\tthis.buffer = \"\";\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n\t * @param {string=} encoding encoding of the return value\n\t * @returns {string|Buffer} digest\n\t */\n\tdigest(encoding) {\n\t\tlet digestCache;\n\t\tconst buffer = this.buffer;\n\t\tif (this.hash === undefined) {\n\t\t\t// short data for hash, we can use caching\n\t\t\tconst cacheKey = `${this.hashKey}-${encoding}`;\n\t\t\tdigestCache = digestCaches[cacheKey];\n\t\t\tif (digestCache === undefined) {\n\t\t\t\tdigestCache = digestCaches[cacheKey] = new Map();\n\t\t\t}\n\t\t\tconst cacheEntry = digestCache.get(buffer);\n\t\t\tif (cacheEntry !== undefined) return cacheEntry;\n\t\t\tthis.hash = this.hashFactory();\n\t\t}\n\t\tif (buffer.length > 0) {\n\t\t\tthis.hash.update(buffer);\n\t\t}\n\t\tconst digestResult = this.hash.digest(encoding);\n\t\tconst result =\n\t\t\ttypeof digestResult === \"string\" ? digestResult : digestResult.toString();\n\t\tif (digestCache !== undefined) {\n\t\t\tdigestCache.set(buffer, result);\n\t\t}\n\t\treturn result;\n\t}\n}\n\n/* istanbul ignore next */\nclass DebugHash extends Hash {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.string = \"\";\n\t}\n\n\t/**\n\t * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n\t * @param {string|Buffer} data data\n\t * @param {string=} inputEncoding data encoding\n\t * @returns {this} updated hash\n\t */\n\tupdate(data, inputEncoding) {\n\t\tif (typeof data !== \"string\") data = data.toString(\"utf-8\");\n\t\tif (data.startsWith(\"debug-digest-\")) {\n\t\t\tdata = Buffer.from(data.slice(\"debug-digest-\".length), \"hex\").toString();\n\t\t}\n\t\tthis.string += `[${data}](${new Error().stack.split(\"\\n\", 3)[2]})\\n`;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n\t * @param {string=} encoding encoding of the return value\n\t * @returns {string|Buffer} digest\n\t */\n\tdigest(encoding) {\n\t\treturn \"debug-digest-\" + Buffer.from(this.string).toString(\"hex\");\n\t}\n}\n\nlet crypto = undefined;\nlet createXXHash64 = undefined;\nlet createMd4 = undefined;\nlet BatchedHash = undefined;\n\n/**\n * Creates a hash by name or function\n * @param {string | typeof Hash} algorithm the algorithm name or a constructor creating a hash\n * @returns {Hash} the hash\n */\nmodule.exports = algorithm => {\n\tif (typeof algorithm === \"function\") {\n\t\treturn new BulkUpdateDecorator(() => new algorithm());\n\t}\n\tswitch (algorithm) {\n\t\t// TODO add non-cryptographic algorithm here\n\t\tcase \"debug\":\n\t\t\treturn new DebugHash();\n\t\tcase \"xxhash64\":\n\t\t\tif (createXXHash64 === undefined) {\n\t\t\t\tcreateXXHash64 = require(\"./hash/xxhash64\");\n\t\t\t\tif (BatchedHash === undefined) {\n\t\t\t\t\tBatchedHash = require(\"./hash/BatchedHash\");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new BatchedHash(createXXHash64());\n\t\tcase \"md4\":\n\t\t\tif (createMd4 === undefined) {\n\t\t\t\tcreateMd4 = require(\"./hash/md4\");\n\t\t\t\tif (BatchedHash === undefined) {\n\t\t\t\t\tBatchedHash = require(\"./hash/BatchedHash\");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new BatchedHash(createMd4());\n\t\tcase \"native-md4\":\n\t\t\tif (crypto === undefined) crypto = require(\"crypto\");\n\t\t\treturn new BulkUpdateDecorator(() => crypto.createHash(\"md4\"), \"md4\");\n\t\tdefault:\n\t\t\tif (crypto === undefined) crypto = require(\"crypto\");\n\t\t\treturn new BulkUpdateDecorator(\n\t\t\t\t() => crypto.createHash(algorithm),\n\t\t\t\talgorithm\n\t\t\t);\n\t}\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}