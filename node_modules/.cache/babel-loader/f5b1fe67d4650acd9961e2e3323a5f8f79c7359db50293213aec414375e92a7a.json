{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _toConsumableArray = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _slicedToArray = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar eslintScope = require(\"eslint-scope\");\nvar Referencer = require(\"eslint-scope/lib/referencer\");\nvar _require = require(\"webpack-sources\"),\n  CachedSource = _require.CachedSource,\n  ConcatSource = _require.ConcatSource,\n  ReplaceSource = _require.ReplaceSource;\nvar ConcatenationScope = require(\"../ConcatenationScope\");\nvar _require2 = require(\"../ExportsInfo\"),\n  UsageState = _require2.UsageState;\nvar Module = require(\"../Module\");\nvar RuntimeGlobals = require(\"../RuntimeGlobals\");\nvar Template = require(\"../Template\");\nvar HarmonyImportDependency = require(\"../dependencies/HarmonyImportDependency\");\nvar JavascriptParser = require(\"../javascript/JavascriptParser\");\nvar _require3 = require(\"../util/ArrayHelpers\"),\n  equals = _require3.equals;\nvar LazySet = require(\"../util/LazySet\");\nvar _require4 = require(\"../util/comparators\"),\n  concatComparators = _require4.concatComparators;\nvar createHash = require(\"../util/createHash\");\nvar _require5 = require(\"../util/identifier\"),\n  makePathsRelative = _require5.makePathsRelative;\nvar makeSerializable = require(\"../util/makeSerializable\");\nvar propertyAccess = require(\"../util/propertyAccess\");\nvar _require6 = require(\"../util/runtime\"),\n  filterRuntime = _require6.filterRuntime,\n  intersectRuntime = _require6.intersectRuntime,\n  mergeRuntimeCondition = _require6.mergeRuntimeCondition,\n  mergeRuntimeConditionNonFalse = _require6.mergeRuntimeConditionNonFalse,\n  runtimeConditionToString = _require6.runtimeConditionToString,\n  subtractRuntimeCondition = _require6.subtractRuntimeCondition;\n\n/** @typedef {import(\"eslint-scope\").Scope} Scope */\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").WebpackOptionsNormalized} WebpackOptions */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"../ExportsInfo\").ExportInfo} ExportInfo */\n/** @template T @typedef {import(\"../InitFragment\")<T>} InitFragment */\n/** @typedef {import(\"../Module\").CodeGenerationContext} CodeGenerationContext */\n/** @typedef {import(\"../Module\").CodeGenerationResult} CodeGenerationResult */\n/** @typedef {import(\"../Module\").LibIdentOptions} LibIdentOptions */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n/** @typedef {import(\"../ModuleGraphConnection\").ConnectionState} ConnectionState */\n/** @typedef {import(\"../RequestShortener\")} RequestShortener */\n/** @typedef {import(\"../ResolverFactory\").ResolverWithOptions} ResolverWithOptions */\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"../WebpackError\")} WebpackError */\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").ChunkRenderContext} ChunkRenderContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @typedef {typeof import(\"../util/Hash\")} HashConstructor */\n/** @typedef {import(\"../util/fs\").InputFileSystem} InputFileSystem */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\n// fix eslint-scope to support class properties correctly\n// cspell:word Referencer\nvar ReferencerClass = Referencer;\nif (!ReferencerClass.prototype.PropertyDefinition) {\n  ReferencerClass.prototype.PropertyDefinition = ReferencerClass.prototype.Property;\n}\n\n/**\n * @typedef {Object} ReexportInfo\n * @property {Module} module\n * @property {string[]} export\n */\n\n/** @typedef {RawBinding | SymbolBinding} Binding */\n\n/**\n * @typedef {Object} RawBinding\n * @property {ModuleInfo} info\n * @property {string} rawName\n * @property {string=} comment\n * @property {string[]} ids\n * @property {string[]} exportName\n */\n\n/**\n * @typedef {Object} SymbolBinding\n * @property {ConcatenatedModuleInfo} info\n * @property {string} name\n * @property {string=} comment\n * @property {string[]} ids\n * @property {string[]} exportName\n */\n\n/** @typedef {ConcatenatedModuleInfo | ExternalModuleInfo } ModuleInfo */\n/** @typedef {ConcatenatedModuleInfo | ExternalModuleInfo | ReferenceToModuleInfo } ModuleInfoOrReference */\n\n/**\n * @typedef {Object} ConcatenatedModuleInfo\n * @property {\"concatenated\"} type\n * @property {Module} module\n * @property {number} index\n * @property {Object} ast\n * @property {Source} internalSource\n * @property {ReplaceSource} source\n * @property {InitFragment<ChunkRenderContext>[]=} chunkInitFragments\n * @property {Iterable<string>} runtimeRequirements\n * @property {Scope} globalScope\n * @property {Scope} moduleScope\n * @property {Map<string, string>} internalNames\n * @property {Map<string, string>} exportMap\n * @property {Map<string, string>} rawExportMap\n * @property {string=} namespaceExportSymbol\n * @property {string} namespaceObjectName\n * @property {boolean} interopNamespaceObjectUsed\n * @property {string} interopNamespaceObjectName\n * @property {boolean} interopNamespaceObject2Used\n * @property {string} interopNamespaceObject2Name\n * @property {boolean} interopDefaultAccessUsed\n * @property {string} interopDefaultAccessName\n */\n\n/**\n * @typedef {Object} ExternalModuleInfo\n * @property {\"external\"} type\n * @property {Module} module\n * @property {RuntimeSpec | boolean} runtimeCondition\n * @property {number} index\n * @property {string} name\n * @property {boolean} interopNamespaceObjectUsed\n * @property {string} interopNamespaceObjectName\n * @property {boolean} interopNamespaceObject2Used\n * @property {string} interopNamespaceObject2Name\n * @property {boolean} interopDefaultAccessUsed\n * @property {string} interopDefaultAccessName\n */\n\n/**\n * @typedef {Object} ReferenceToModuleInfo\n * @property {\"reference\"} type\n * @property {RuntimeSpec | boolean} runtimeCondition\n * @property {ConcatenatedModuleInfo | ExternalModuleInfo} target\n */\n\nvar RESERVED_NAMES = new Set([\n// internal names (should always be renamed)\nConcatenationScope.DEFAULT_EXPORT, ConcatenationScope.NAMESPACE_OBJECT_EXPORT,\n// keywords\n\"abstract,arguments,async,await,boolean,break,byte,case,catch,char,class,const,continue\", \"debugger,default,delete,do,double,else,enum,eval,export,extends,false,final,finally,float\", \"for,function,goto,if,implements,import,in,instanceof,int,interface,let,long,native,new,null\", \"package,private,protected,public,return,short,static,super,switch,synchronized,this,throw\", \"throws,transient,true,try,typeof,var,void,volatile,while,with,yield\",\n// commonjs/amd\n\"module,__dirname,__filename,exports,require,define\",\n// js globals\n\"Array,Date,eval,function,hasOwnProperty,Infinity,isFinite,isNaN,isPrototypeOf,length,Math\", \"NaN,name,Number,Object,prototype,String,toString,undefined,valueOf\",\n// browser globals\n\"alert,all,anchor,anchors,area,assign,blur,button,checkbox,clearInterval,clearTimeout\", \"clientInformation,close,closed,confirm,constructor,crypto,decodeURI,decodeURIComponent\", \"defaultStatus,document,element,elements,embed,embeds,encodeURI,encodeURIComponent,escape\", \"event,fileUpload,focus,form,forms,frame,innerHeight,innerWidth,layer,layers,link,location\", \"mimeTypes,navigate,navigator,frames,frameRate,hidden,history,image,images,offscreenBuffering\", \"open,opener,option,outerHeight,outerWidth,packages,pageXOffset,pageYOffset,parent,parseFloat\", \"parseInt,password,pkcs11,plugin,prompt,propertyIsEnum,radio,reset,screenX,screenY,scroll\", \"secure,select,self,setInterval,setTimeout,status,submit,taint,text,textarea,top,unescape\", \"untaint,window\",\n// window events\n\"onblur,onclick,onerror,onfocus,onkeydown,onkeypress,onkeyup,onmouseover,onload,onmouseup,onmousedown,onsubmit\"].join(\",\").split(\",\"));\nvar createComparator = function createComparator(property, comparator) {\n  return function (a, b) {\n    return comparator(a[property], b[property]);\n  };\n};\nvar compareNumbers = function compareNumbers(a, b) {\n  if (isNaN(a)) {\n    if (!isNaN(b)) {\n      return 1;\n    }\n  } else {\n    if (isNaN(b)) {\n      return -1;\n    }\n    if (a !== b) {\n      return a < b ? -1 : 1;\n    }\n  }\n  return 0;\n};\nvar bySourceOrder = createComparator(\"sourceOrder\", compareNumbers);\nvar byRangeStart = createComparator(\"rangeStart\", compareNumbers);\nvar joinIterableWithComma = function joinIterableWithComma(iterable) {\n  // This is more performant than Array.from().join(\", \")\n  // as it doesn't create an array\n  var str = \"\";\n  var first = true;\n  var _iterator = _createForOfIteratorHelper(iterable),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n      if (first) {\n        first = false;\n      } else {\n        str += \", \";\n      }\n      str += item;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return str;\n};\n\n/**\n * @typedef {Object} ConcatenationEntry\n * @property {\"concatenated\" | \"external\"} type\n * @property {Module} module\n * @property {RuntimeSpec | boolean} runtimeCondition\n */\n\n/**\n * @param {ModuleGraph} moduleGraph the module graph\n * @param {ModuleInfo} info module info\n * @param {string[]} exportName exportName\n * @param {Map<Module, ModuleInfo>} moduleToInfoMap moduleToInfoMap\n * @param {RuntimeSpec} runtime for which runtime\n * @param {RequestShortener} requestShortener the request shortener\n * @param {RuntimeTemplate} runtimeTemplate the runtime template\n * @param {Set<ConcatenatedModuleInfo>} neededNamespaceObjects modules for which a namespace object should be generated\n * @param {boolean} asCall asCall\n * @param {boolean} strictHarmonyModule strictHarmonyModule\n * @param {boolean | undefined} asiSafe asiSafe\n * @param {Set<ExportInfo>} alreadyVisited alreadyVisited\n * @returns {Binding} the final variable\n */\nvar getFinalBinding = function getFinalBinding(moduleGraph, info, exportName, moduleToInfoMap, runtime, requestShortener, runtimeTemplate, neededNamespaceObjects, asCall, strictHarmonyModule, asiSafe) {\n  var alreadyVisited = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : new Set();\n  var exportsType = info.module.getExportsType(moduleGraph, strictHarmonyModule);\n  if (exportName.length === 0) {\n    switch (exportsType) {\n      case \"default-only\":\n        info.interopNamespaceObject2Used = true;\n        return {\n          info: info,\n          rawName: info.interopNamespaceObject2Name,\n          ids: exportName,\n          exportName: exportName\n        };\n      case \"default-with-named\":\n        info.interopNamespaceObjectUsed = true;\n        return {\n          info: info,\n          rawName: info.interopNamespaceObjectName,\n          ids: exportName,\n          exportName: exportName\n        };\n      case \"namespace\":\n      case \"dynamic\":\n        break;\n      default:\n        throw new Error(\"Unexpected exportsType \".concat(exportsType));\n    }\n  } else {\n    switch (exportsType) {\n      case \"namespace\":\n        break;\n      case \"default-with-named\":\n        switch (exportName[0]) {\n          case \"default\":\n            exportName = exportName.slice(1);\n            break;\n          case \"__esModule\":\n            return {\n              info: info,\n              rawName: \"/* __esModule */true\",\n              ids: exportName.slice(1),\n              exportName: exportName\n            };\n        }\n        break;\n      case \"default-only\":\n        {\n          var exportId = exportName[0];\n          if (exportId === \"__esModule\") {\n            return {\n              info: info,\n              rawName: \"/* __esModule */true\",\n              ids: exportName.slice(1),\n              exportName: exportName\n            };\n          }\n          exportName = exportName.slice(1);\n          if (exportId !== \"default\") {\n            return {\n              info: info,\n              rawName: \"/* non-default import from default-exporting module */undefined\",\n              ids: exportName,\n              exportName: exportName\n            };\n          }\n          break;\n        }\n      case \"dynamic\":\n        switch (exportName[0]) {\n          case \"default\":\n            {\n              exportName = exportName.slice(1);\n              info.interopDefaultAccessUsed = true;\n              var defaultExport = asCall ? \"\".concat(info.interopDefaultAccessName, \"()\") : asiSafe ? \"(\".concat(info.interopDefaultAccessName, \"())\") : asiSafe === false ? \";(\".concat(info.interopDefaultAccessName, \"())\") : \"\".concat(info.interopDefaultAccessName, \".a\");\n              return {\n                info: info,\n                rawName: defaultExport,\n                ids: exportName,\n                exportName: exportName\n              };\n            }\n          case \"__esModule\":\n            return {\n              info: info,\n              rawName: \"/* __esModule */true\",\n              ids: exportName.slice(1),\n              exportName: exportName\n            };\n        }\n        break;\n      default:\n        throw new Error(\"Unexpected exportsType \".concat(exportsType));\n    }\n  }\n  if (exportName.length === 0) {\n    switch (info.type) {\n      case \"concatenated\":\n        neededNamespaceObjects.add(info);\n        return {\n          info: info,\n          rawName: info.namespaceObjectName,\n          ids: exportName,\n          exportName: exportName\n        };\n      case \"external\":\n        return {\n          info: info,\n          rawName: info.name,\n          ids: exportName,\n          exportName: exportName\n        };\n    }\n  }\n  var exportsInfo = moduleGraph.getExportsInfo(info.module);\n  var exportInfo = exportsInfo.getExportInfo(exportName[0]);\n  if (alreadyVisited.has(exportInfo)) {\n    return {\n      info: info,\n      rawName: \"/* circular reexport */ Object(function x() { x() }())\",\n      ids: [],\n      exportName: exportName\n    };\n  }\n  alreadyVisited.add(exportInfo);\n  switch (info.type) {\n    case \"concatenated\":\n      {\n        var _exportId = exportName[0];\n        if (exportInfo.provided === false) {\n          // It's not provided, but it could be on the prototype\n          neededNamespaceObjects.add(info);\n          return {\n            info: info,\n            rawName: info.namespaceObjectName,\n            ids: exportName,\n            exportName: exportName\n          };\n        }\n        var directExport = info.exportMap && info.exportMap.get(_exportId);\n        if (directExport) {\n          var usedName = /** @type {string[]} */\n          exportsInfo.getUsedName(exportName, runtime);\n          if (!usedName) {\n            return {\n              info: info,\n              rawName: \"/* unused export */ undefined\",\n              ids: exportName.slice(1),\n              exportName: exportName\n            };\n          }\n          return {\n            info: info,\n            name: directExport,\n            ids: usedName.slice(1),\n            exportName: exportName\n          };\n        }\n        var rawExport = info.rawExportMap && info.rawExportMap.get(_exportId);\n        if (rawExport) {\n          return {\n            info: info,\n            rawName: rawExport,\n            ids: exportName.slice(1),\n            exportName: exportName\n          };\n        }\n        var reexport = exportInfo.findTarget(moduleGraph, function (module) {\n          return moduleToInfoMap.has(module);\n        });\n        if (reexport === false) {\n          throw new Error(\"Target module of reexport from '\".concat(info.module.readableIdentifier(requestShortener), \"' is not part of the concatenation (export '\").concat(_exportId, \"')\\nModules in the concatenation:\\n\").concat(Array.from(moduleToInfoMap, function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n              m = _ref2[0],\n              info = _ref2[1];\n            return \" * \".concat(info.type, \" \").concat(m.readableIdentifier(requestShortener));\n          }).join(\"\\n\")));\n        }\n        if (reexport) {\n          var refInfo = moduleToInfoMap.get(reexport.module);\n          return getFinalBinding(moduleGraph, refInfo, reexport.export ? [].concat(_toConsumableArray(reexport.export), _toConsumableArray(exportName.slice(1))) : exportName.slice(1), moduleToInfoMap, runtime, requestShortener, runtimeTemplate, neededNamespaceObjects, asCall, info.module.buildMeta.strictHarmonyModule, asiSafe, alreadyVisited);\n        }\n        if (info.namespaceExportSymbol) {\n          var _usedName = /** @type {string[]} */\n          exportsInfo.getUsedName(exportName, runtime);\n          return {\n            info: info,\n            rawName: info.namespaceObjectName,\n            ids: _usedName,\n            exportName: exportName\n          };\n        }\n        throw new Error(\"Cannot get final name for export '\".concat(exportName.join(\".\"), \"' of \").concat(info.module.readableIdentifier(requestShortener)));\n      }\n    case \"external\":\n      {\n        var used = /** @type {string[]} */\n        exportsInfo.getUsedName(exportName, runtime);\n        if (!used) {\n          return {\n            info: info,\n            rawName: \"/* unused export */ undefined\",\n            ids: exportName.slice(1),\n            exportName: exportName\n          };\n        }\n        var comment = equals(used, exportName) ? \"\" : Template.toNormalComment(\"\".concat(exportName.join(\".\")));\n        return {\n          info: info,\n          rawName: info.name + comment,\n          ids: used,\n          exportName: exportName\n        };\n      }\n  }\n};\n\n/**\n * @param {ModuleGraph} moduleGraph the module graph\n * @param {ModuleInfo} info module info\n * @param {string[]} exportName exportName\n * @param {Map<Module, ModuleInfo>} moduleToInfoMap moduleToInfoMap\n * @param {RuntimeSpec} runtime for which runtime\n * @param {RequestShortener} requestShortener the request shortener\n * @param {RuntimeTemplate} runtimeTemplate the runtime template\n * @param {Set<ConcatenatedModuleInfo>} neededNamespaceObjects modules for which a namespace object should be generated\n * @param {boolean} asCall asCall\n * @param {boolean} callContext callContext\n * @param {boolean} strictHarmonyModule strictHarmonyModule\n * @param {boolean | undefined} asiSafe asiSafe\n * @returns {string} the final name\n */\nvar getFinalName = function getFinalName(moduleGraph, info, exportName, moduleToInfoMap, runtime, requestShortener, runtimeTemplate, neededNamespaceObjects, asCall, callContext, strictHarmonyModule, asiSafe) {\n  var binding = getFinalBinding(moduleGraph, info, exportName, moduleToInfoMap, runtime, requestShortener, runtimeTemplate, neededNamespaceObjects, asCall, strictHarmonyModule, asiSafe);\n  {\n    var ids = binding.ids,\n      comment = binding.comment;\n    var reference;\n    var isPropertyAccess;\n    if (\"rawName\" in binding) {\n      reference = \"\".concat(binding.rawName).concat(comment || \"\").concat(propertyAccess(ids));\n      isPropertyAccess = ids.length > 0;\n    } else {\n      var _info = binding.info,\n        exportId = binding.name;\n      var name = _info.internalNames.get(exportId);\n      if (!name) {\n        throw new Error(\"The export \\\"\".concat(exportId, \"\\\" in \\\"\").concat(_info.module.readableIdentifier(requestShortener), \"\\\" has no internal name (existing names: \").concat(Array.from(_info.internalNames, function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n            name = _ref4[0],\n            symbol = _ref4[1];\n          return \"\".concat(name, \": \").concat(symbol);\n        }).join(\", \") || \"none\", \")\"));\n      }\n      reference = \"\".concat(name).concat(comment || \"\").concat(propertyAccess(ids));\n      isPropertyAccess = ids.length > 1;\n    }\n    if (isPropertyAccess && asCall && callContext === false) {\n      return asiSafe ? \"(0,\".concat(reference, \")\") : asiSafe === false ? \";(0,\".concat(reference, \")\") : \"/*#__PURE__*/Object(\".concat(reference, \")\");\n    }\n    return reference;\n  }\n};\nvar addScopeSymbols = function addScopeSymbols(s, nameSet, scopeSet1, scopeSet2) {\n  var scope = s;\n  while (scope) {\n    if (scopeSet1.has(scope)) break;\n    if (scopeSet2.has(scope)) break;\n    scopeSet1.add(scope);\n    var _iterator2 = _createForOfIteratorHelper(scope.variables),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var variable = _step2.value;\n        nameSet.add(variable.name);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    scope = scope.upper;\n  }\n};\nvar getAllReferences = function getAllReferences(variable) {\n  var set = variable.references;\n  // Look for inner scope variables too (like in class Foo { t() { Foo } })\n  var identifiers = new Set(variable.identifiers);\n  var _iterator3 = _createForOfIteratorHelper(variable.scope.childScopes),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var scope = _step3.value;\n      var _iterator4 = _createForOfIteratorHelper(scope.variables),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var innerVar = _step4.value;\n          if (innerVar.identifiers.some(function (id) {\n            return identifiers.has(id);\n          })) {\n            set = set.concat(innerVar.references);\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return set;\n};\nvar getPathInAst = function getPathInAst(ast, node) {\n  if (ast === node) {\n    return [];\n  }\n  var nr = node.range;\n  var enterNode = function enterNode(n) {\n    if (!n) return undefined;\n    var r = n.range;\n    if (r) {\n      if (r[0] <= nr[0] && r[1] >= nr[1]) {\n        var path = getPathInAst(n, node);\n        if (path) {\n          path.push(n);\n          return path;\n        }\n      }\n    }\n    return undefined;\n  };\n  if (Array.isArray(ast)) {\n    for (var i = 0; i < ast.length; i++) {\n      var enterResult = enterNode(ast[i]);\n      if (enterResult !== undefined) return enterResult;\n    }\n  } else if (ast && typeof ast === \"object\") {\n    var keys = Object.keys(ast);\n    for (var _i = 0; _i < keys.length; _i++) {\n      var value = ast[keys[_i]];\n      if (Array.isArray(value)) {\n        var pathResult = getPathInAst(value, node);\n        if (pathResult !== undefined) return pathResult;\n      } else if (value && typeof value === \"object\") {\n        var _enterResult = enterNode(value);\n        if (_enterResult !== undefined) return _enterResult;\n      }\n    }\n  }\n};\nvar TYPES = new Set([\"javascript\"]);\nvar ConcatenatedModule = /*#__PURE__*/function (_Module) {\n  _inherits(ConcatenatedModule, _Module);\n  var _super = _createSuper(ConcatenatedModule);\n  /**\n   * @param {Object} options options\n   * @param {string} options.identifier the identifier of the module\n   * @param {Module=} options.rootModule the root module of the concatenation\n   * @param {RuntimeSpec} options.runtime the selected runtime\n   * @param {Set<Module>=} options.modules all concatenated modules\n   */\n  function ConcatenatedModule(_ref5) {\n    var _this;\n    var identifier = _ref5.identifier,\n      rootModule = _ref5.rootModule,\n      modules = _ref5.modules,\n      runtime = _ref5.runtime;\n    _classCallCheck(this, ConcatenatedModule);\n    _this = _super.call(this, \"javascript/esm\", null, rootModule && rootModule.layer);\n\n    // Info from Factory\n    /** @type {string} */\n    _this._identifier = identifier;\n    /** @type {Module} */\n    _this.rootModule = rootModule;\n    /** @type {Set<Module>} */\n    _this._modules = modules;\n    _this._runtime = runtime;\n    _this.factoryMeta = rootModule && rootModule.factoryMeta;\n    return _this;\n  }\n\n  /**\n   * Assuming this module is in the cache. Update the (cached) module with\n   * the fresh module from the factory. Usually updates internal references\n   * and properties.\n   * @param {Module} module fresh module\n   * @returns {void}\n   */\n  _createClass(ConcatenatedModule, [{\n    key: \"updateCacheModule\",\n    value: function updateCacheModule(module) {\n      throw new Error(\"Must not be called\");\n    }\n\n    /**\n     * @returns {Set<string>} types available (do not mutate)\n     */\n  }, {\n    key: \"getSourceTypes\",\n    value: function getSourceTypes() {\n      return TYPES;\n    }\n  }, {\n    key: \"modules\",\n    get: function get() {\n      return Array.from(this._modules);\n    }\n\n    /**\n     * @returns {string} a unique identifier of the module\n     */\n  }, {\n    key: \"identifier\",\n    value: function identifier() {\n      return this._identifier;\n    }\n\n    /**\n     * @param {RequestShortener} requestShortener the request shortener\n     * @returns {string} a user readable identifier of the module\n     */\n  }, {\n    key: \"readableIdentifier\",\n    value: function readableIdentifier(requestShortener) {\n      return this.rootModule.readableIdentifier(requestShortener) + \" + \".concat(this._modules.size - 1, \" modules\");\n    }\n\n    /**\n     * @param {LibIdentOptions} options options\n     * @returns {string | null} an identifier for library inclusion\n     */\n  }, {\n    key: \"libIdent\",\n    value: function libIdent(options) {\n      return this.rootModule.libIdent(options);\n    }\n\n    /**\n     * @returns {string | null} absolute path which should be used for condition matching (usually the resource path)\n     */\n  }, {\n    key: \"nameForCondition\",\n    value: function nameForCondition() {\n      return this.rootModule.nameForCondition();\n    }\n\n    /**\n     * @param {ModuleGraph} moduleGraph the module graph\n     * @returns {ConnectionState} how this module should be connected to referencing modules when consumed for side-effects only\n     */\n  }, {\n    key: \"getSideEffectsConnectionState\",\n    value: function getSideEffectsConnectionState(moduleGraph) {\n      return this.rootModule.getSideEffectsConnectionState(moduleGraph);\n    }\n\n    /**\n     * @param {WebpackOptions} options webpack options\n     * @param {Compilation} compilation the compilation\n     * @param {ResolverWithOptions} resolver the resolver\n     * @param {InputFileSystem} fs the file system\n     * @param {function(WebpackError=): void} callback callback function\n     * @returns {void}\n     */\n  }, {\n    key: \"build\",\n    value: function build(options, compilation, resolver, fs, callback) {\n      var _this2 = this;\n      var rootModule = this.rootModule;\n      this.buildInfo = {\n        strict: true,\n        cacheable: true,\n        moduleArgument: rootModule.buildInfo.moduleArgument,\n        exportsArgument: rootModule.buildInfo.exportsArgument,\n        fileDependencies: new LazySet(),\n        contextDependencies: new LazySet(),\n        missingDependencies: new LazySet(),\n        topLevelDeclarations: new Set(),\n        assets: undefined\n      };\n      this.buildMeta = rootModule.buildMeta;\n      this.clearDependenciesAndBlocks();\n      this.clearWarningsAndErrors();\n      var _iterator5 = _createForOfIteratorHelper(this._modules),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var m = _step5.value;\n          // populate cacheable\n          if (!m.buildInfo.cacheable) {\n            this.buildInfo.cacheable = false;\n          }\n\n          // populate dependencies\n          var _iterator6 = _createForOfIteratorHelper(m.dependencies.filter(function (dep) {\n              return !(dep instanceof HarmonyImportDependency) || !_this2._modules.has(compilation.moduleGraph.getModule(dep));\n            })),\n            _step6;\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var d = _step6.value;\n              this.dependencies.push(d);\n            }\n            // populate blocks\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n          var _iterator7 = _createForOfIteratorHelper(m.blocks),\n            _step7;\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var _d = _step7.value;\n              this.blocks.push(_d);\n            }\n\n            // populate warnings\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n          var warnings = m.getWarnings();\n          if (warnings !== undefined) {\n            var _iterator8 = _createForOfIteratorHelper(warnings),\n              _step8;\n            try {\n              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                var warning = _step8.value;\n                this.addWarning(warning);\n              }\n            } catch (err) {\n              _iterator8.e(err);\n            } finally {\n              _iterator8.f();\n            }\n          }\n\n          // populate errors\n          var errors = m.getErrors();\n          if (errors !== undefined) {\n            var _iterator9 = _createForOfIteratorHelper(errors),\n              _step9;\n            try {\n              for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                var error = _step9.value;\n                this.addError(error);\n              }\n            } catch (err) {\n              _iterator9.e(err);\n            } finally {\n              _iterator9.f();\n            }\n          }\n\n          // populate topLevelDeclarations\n          if (m.buildInfo.topLevelDeclarations) {\n            var topLevelDeclarations = this.buildInfo.topLevelDeclarations;\n            if (topLevelDeclarations !== undefined) {\n              var _iterator10 = _createForOfIteratorHelper(m.buildInfo.topLevelDeclarations),\n                _step10;\n              try {\n                for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n                  var decl = _step10.value;\n                  topLevelDeclarations.add(decl);\n                }\n              } catch (err) {\n                _iterator10.e(err);\n              } finally {\n                _iterator10.f();\n              }\n            }\n          } else {\n            this.buildInfo.topLevelDeclarations = undefined;\n          }\n\n          // populate assets\n          if (m.buildInfo.assets) {\n            if (this.buildInfo.assets === undefined) {\n              this.buildInfo.assets = Object.create(null);\n            }\n            Object.assign(this.buildInfo.assets, m.buildInfo.assets);\n          }\n          if (m.buildInfo.assetsInfo) {\n            if (this.buildInfo.assetsInfo === undefined) {\n              this.buildInfo.assetsInfo = new Map();\n            }\n            var _iterator11 = _createForOfIteratorHelper(m.buildInfo.assetsInfo),\n              _step11;\n            try {\n              for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n                var _step11$value = _slicedToArray(_step11.value, 2),\n                  key = _step11$value[0],\n                  value = _step11$value[1];\n                this.buildInfo.assetsInfo.set(key, value);\n              }\n            } catch (err) {\n              _iterator11.e(err);\n            } finally {\n              _iterator11.f();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      callback();\n    }\n\n    /**\n     * @param {string=} type the source type for which the size should be estimated\n     * @returns {number} the estimated size of the module (must be non-zero)\n     */\n  }, {\n    key: \"size\",\n    value: function size(type) {\n      // Guess size from embedded modules\n      var size = 0;\n      var _iterator12 = _createForOfIteratorHelper(this._modules),\n        _step12;\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var _module = _step12.value;\n          size += _module.size(type);\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n      return size;\n    }\n\n    /**\n     * @private\n     * @param {Module} rootModule the root of the concatenation\n     * @param {Set<Module>} modulesSet a set of modules which should be concatenated\n     * @param {RuntimeSpec} runtime for this runtime\n     * @param {ModuleGraph} moduleGraph the module graph\n     * @returns {ConcatenationEntry[]} concatenation list\n     */\n  }, {\n    key: \"_createConcatenationList\",\n    value: function _createConcatenationList(rootModule, modulesSet, runtime, moduleGraph) {\n      var _this3 = this;\n      /** @type {ConcatenationEntry[]} */\n      var list = [];\n      /** @type {Map<Module, RuntimeSpec | true>} */\n      var existingEntries = new Map();\n\n      /**\n       * @param {Module} module a module\n       * @returns {Iterable<{ connection: ModuleGraphConnection, runtimeCondition: RuntimeSpec | true }>} imported modules in order\n       */\n      var getConcatenatedImports = function getConcatenatedImports(module) {\n        var connections = Array.from(moduleGraph.getOutgoingConnections(module));\n        if (module === rootModule) {\n          var _iterator13 = _createForOfIteratorHelper(moduleGraph.getOutgoingConnections(_this3)),\n            _step13;\n          try {\n            for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n              var c = _step13.value;\n              connections.push(c);\n            }\n          } catch (err) {\n            _iterator13.e(err);\n          } finally {\n            _iterator13.f();\n          }\n        }\n        /**\n         * @type {Array<{ connection: ModuleGraphConnection, sourceOrder: number, rangeStart: number }>}\n         */\n        var references = connections.filter(function (connection) {\n          if (!(connection.dependency instanceof HarmonyImportDependency)) return false;\n          return connection && connection.resolvedOriginModule === module && connection.module && connection.isTargetActive(runtime);\n        }).map(function (connection) {\n          var dep = /** @type {HarmonyImportDependency} */\n          connection.dependency;\n          return {\n            connection: connection,\n            sourceOrder: dep.sourceOrder,\n            rangeStart: dep.range && dep.range[0]\n          };\n        });\n        /**\n         * bySourceOrder\n         * @example\n         * import a from \"a\"; // sourceOrder=1\n         * import b from \"b\"; // sourceOrder=2\n         *\n         * byRangeStart\n         * @example\n         * import {a, b} from \"a\"; // sourceOrder=1\n         * a.a(); // first range\n         * b.b(); // second range\n         *\n         * If there is no reexport, we have the same source.\n         * If there is reexport, but module has side effects, this will lead to reexport module only.\n         * If there is side-effects-free reexport, we can get simple deterministic result with range start comparison.\n         */\n        references.sort(concatComparators(bySourceOrder, byRangeStart));\n        /** @type {Map<Module, { connection: ModuleGraphConnection, runtimeCondition: RuntimeSpec | true }>} */\n        var referencesMap = new Map();\n        var _iterator14 = _createForOfIteratorHelper(references),\n          _step14;\n        try {\n          var _loop = function _loop() {\n            var connection = _step14.value.connection;\n            var runtimeCondition = filterRuntime(runtime, function (r) {\n              return connection.isTargetActive(r);\n            });\n            if (runtimeCondition === false) return \"continue\";\n            var module = connection.module;\n            var entry = referencesMap.get(module);\n            if (entry === undefined) {\n              referencesMap.set(module, {\n                connection: connection,\n                runtimeCondition: runtimeCondition\n              });\n              return \"continue\";\n            }\n            entry.runtimeCondition = mergeRuntimeConditionNonFalse(entry.runtimeCondition, runtimeCondition, runtime);\n          };\n          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n            var _ret = _loop();\n            if (_ret === \"continue\") continue;\n          }\n        } catch (err) {\n          _iterator14.e(err);\n        } finally {\n          _iterator14.f();\n        }\n        return referencesMap.values();\n      };\n\n      /**\n       * @param {ModuleGraphConnection} connection graph connection\n       * @param {RuntimeSpec | true} runtimeCondition runtime condition\n       * @returns {void}\n       */\n      var enterModule = function enterModule(connection, runtimeCondition) {\n        var module = connection.module;\n        if (!module) return;\n        var existingEntry = existingEntries.get(module);\n        if (existingEntry === true) {\n          return;\n        }\n        if (modulesSet.has(module)) {\n          existingEntries.set(module, true);\n          if (runtimeCondition !== true) {\n            throw new Error(\"Cannot runtime-conditional concatenate a module (\".concat(module.identifier(), \" in \").concat(_this3.rootModule.identifier(), \", \").concat(runtimeConditionToString(runtimeCondition), \"). This should not happen.\"));\n          }\n          var _imports = getConcatenatedImports(module);\n          var _iterator15 = _createForOfIteratorHelper(_imports),\n            _step15;\n          try {\n            for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n              var _step15$value = _step15.value,\n                _connection = _step15$value.connection,\n                _runtimeCondition = _step15$value.runtimeCondition;\n              enterModule(_connection, _runtimeCondition);\n            }\n          } catch (err) {\n            _iterator15.e(err);\n          } finally {\n            _iterator15.f();\n          }\n          list.push({\n            type: \"concatenated\",\n            module: connection.module,\n            runtimeCondition: runtimeCondition\n          });\n        } else {\n          if (existingEntry !== undefined) {\n            var reducedRuntimeCondition = subtractRuntimeCondition(runtimeCondition, existingEntry, runtime);\n            if (reducedRuntimeCondition === false) return;\n            runtimeCondition = reducedRuntimeCondition;\n            existingEntries.set(connection.module, mergeRuntimeConditionNonFalse(existingEntry, runtimeCondition, runtime));\n          } else {\n            existingEntries.set(connection.module, runtimeCondition);\n          }\n          if (list.length > 0) {\n            var lastItem = list[list.length - 1];\n            if (lastItem.type === \"external\" && lastItem.module === connection.module) {\n              lastItem.runtimeCondition = mergeRuntimeCondition(lastItem.runtimeCondition, runtimeCondition, runtime);\n              return;\n            }\n          }\n          list.push({\n            type: \"external\",\n            get module() {\n              // We need to use a getter here, because the module in the dependency\n              // could be replaced by some other process (i. e. also replaced with a\n              // concatenated module)\n              return connection.module;\n            },\n            runtimeCondition: runtimeCondition\n          });\n        }\n      };\n      existingEntries.set(rootModule, true);\n      var imports = getConcatenatedImports(rootModule);\n      var _iterator16 = _createForOfIteratorHelper(imports),\n        _step16;\n      try {\n        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n          var _step16$value = _step16.value,\n            connection = _step16$value.connection,\n            runtimeCondition = _step16$value.runtimeCondition;\n          enterModule(connection, runtimeCondition);\n        }\n      } catch (err) {\n        _iterator16.e(err);\n      } finally {\n        _iterator16.f();\n      }\n      list.push({\n        type: \"concatenated\",\n        module: rootModule,\n        runtimeCondition: true\n      });\n      return list;\n    }\n\n    /**\n     * @param {Module} rootModule the root module of the concatenation\n     * @param {Set<Module>} modules all modules in the concatenation (including the root module)\n     * @param {Object=} associatedObjectForCache object for caching\n     * @param {string | HashConstructor=} hashFunction hash function to use\n     * @returns {string} the identifier\n     */\n  }, {\n    key: \"addCacheDependencies\",\n    value:\n    /**\n     * @param {LazySet<string>} fileDependencies set where file dependencies are added to\n     * @param {LazySet<string>} contextDependencies set where context dependencies are added to\n     * @param {LazySet<string>} missingDependencies set where missing dependencies are added to\n     * @param {LazySet<string>} buildDependencies set where build dependencies are added to\n     */\n    function addCacheDependencies(fileDependencies, contextDependencies, missingDependencies, buildDependencies) {\n      var _iterator17 = _createForOfIteratorHelper(this._modules),\n        _step17;\n      try {\n        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n          var _module2 = _step17.value;\n          _module2.addCacheDependencies(fileDependencies, contextDependencies, missingDependencies, buildDependencies);\n        }\n      } catch (err) {\n        _iterator17.e(err);\n      } finally {\n        _iterator17.f();\n      }\n    }\n\n    /**\n     * @param {CodeGenerationContext} context context for code generation\n     * @returns {CodeGenerationResult} result\n     */\n  }, {\n    key: \"codeGeneration\",\n    value: function codeGeneration(_ref6) {\n      var dependencyTemplates = _ref6.dependencyTemplates,\n        runtimeTemplate = _ref6.runtimeTemplate,\n        moduleGraph = _ref6.moduleGraph,\n        chunkGraph = _ref6.chunkGraph,\n        generationRuntime = _ref6.runtime,\n        codeGenerationResults = _ref6.codeGenerationResults;\n      /** @type {Set<string>} */\n      var runtimeRequirements = new Set();\n      var runtime = intersectRuntime(generationRuntime, this._runtime);\n      var requestShortener = runtimeTemplate.requestShortener;\n      // Meta info for each module\n      var _this$_getModulesWith = this._getModulesWithInfo(moduleGraph, runtime),\n        _this$_getModulesWith2 = _slicedToArray(_this$_getModulesWith, 2),\n        modulesWithInfo = _this$_getModulesWith2[0],\n        moduleToInfoMap = _this$_getModulesWith2[1];\n\n      // Set with modules that need a generated namespace object\n      /** @type {Set<ConcatenatedModuleInfo>} */\n      var neededNamespaceObjects = new Set();\n\n      // Generate source code and analyse scopes\n      // Prepare a ReplaceSource for the final source\n      var _iterator18 = _createForOfIteratorHelper(moduleToInfoMap.values()),\n        _step18;\n      try {\n        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n          var info = _step18.value;\n          this._analyseModule(moduleToInfoMap, info, dependencyTemplates, runtimeTemplate, moduleGraph, chunkGraph, runtime, codeGenerationResults);\n        }\n\n        // List of all used names to avoid conflicts\n      } catch (err) {\n        _iterator18.e(err);\n      } finally {\n        _iterator18.f();\n      }\n      var allUsedNames = new Set(RESERVED_NAMES);\n      // Updated Top level declarations are created by renaming\n      var topLevelDeclarations = new Set();\n\n      // List of additional names in scope for module references\n      /** @type {Map<string, { usedNames: Set<string>, alreadyCheckedScopes: Set<TODO> }>} */\n      var usedNamesInScopeInfo = new Map();\n      /**\n       * @param {string} module module identifier\n       * @param {string} id export id\n       * @returns {{ usedNames: Set<string>, alreadyCheckedScopes: Set<TODO> }} info\n       */\n      var getUsedNamesInScopeInfo = function getUsedNamesInScopeInfo(module, id) {\n        var key = \"\".concat(module, \"-\").concat(id);\n        var info = usedNamesInScopeInfo.get(key);\n        if (info === undefined) {\n          info = {\n            usedNames: new Set(),\n            alreadyCheckedScopes: new Set()\n          };\n          usedNamesInScopeInfo.set(key, info);\n        }\n        return info;\n      };\n\n      // Set of already checked scopes\n      var ignoredScopes = new Set();\n\n      // get all global names\n      var _iterator19 = _createForOfIteratorHelper(modulesWithInfo),\n        _step19;\n      try {\n        var _loop2 = function _loop2() {\n          var info = _step19.value;\n          if (info.type === \"concatenated\") {\n            // ignore symbols from moduleScope\n            if (info.moduleScope) {\n              ignoredScopes.add(info.moduleScope);\n            }\n\n            // The super class expression in class scopes behaves weird\n            // We get ranges of all super class expressions to make\n            // renaming to work correctly\n            var superClassCache = new WeakMap();\n            var getSuperClassExpressions = function getSuperClassExpressions(scope) {\n              var cacheEntry = superClassCache.get(scope);\n              if (cacheEntry !== undefined) return cacheEntry;\n              var superClassExpressions = [];\n              var _iterator27 = _createForOfIteratorHelper(scope.childScopes),\n                _step27;\n              try {\n                for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {\n                  var childScope = _step27.value;\n                  if (childScope.type !== \"class\") continue;\n                  var block = childScope.block;\n                  if ((block.type === \"ClassDeclaration\" || block.type === \"ClassExpression\") && block.superClass) {\n                    superClassExpressions.push({\n                      range: block.superClass.range,\n                      variables: childScope.variables\n                    });\n                  }\n                }\n              } catch (err) {\n                _iterator27.e(err);\n              } finally {\n                _iterator27.f();\n              }\n              superClassCache.set(scope, superClassExpressions);\n              return superClassExpressions;\n            };\n\n            // add global symbols\n            if (info.globalScope) {\n              var _iterator28 = _createForOfIteratorHelper(info.globalScope.through),\n                _step28;\n              try {\n                for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {\n                  var reference = _step28.value;\n                  var name = reference.identifier.name;\n                  if (ConcatenationScope.isModuleReference(name)) {\n                    var match = ConcatenationScope.matchModuleReference(name);\n                    if (!match) continue;\n                    var referencedInfo = modulesWithInfo[match.index];\n                    if (referencedInfo.type === \"reference\") throw new Error(\"Module reference can't point to a reference\");\n                    var binding = getFinalBinding(moduleGraph, referencedInfo, match.ids, moduleToInfoMap, runtime, requestShortener, runtimeTemplate, neededNamespaceObjects, false, info.module.buildMeta.strictHarmonyModule, true);\n                    if (!binding.ids) continue;\n                    var _getUsedNamesInScopeI = getUsedNamesInScopeInfo(binding.info.module.identifier(), \"name\" in binding ? binding.name : \"\"),\n                      usedNames = _getUsedNamesInScopeI.usedNames,\n                      alreadyCheckedScopes = _getUsedNamesInScopeI.alreadyCheckedScopes;\n                    var _iterator29 = _createForOfIteratorHelper(getSuperClassExpressions(reference.from)),\n                      _step29;\n                    try {\n                      for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {\n                        var expr = _step29.value;\n                        if (expr.range[0] <= reference.identifier.range[0] && expr.range[1] >= reference.identifier.range[1]) {\n                          var _iterator30 = _createForOfIteratorHelper(expr.variables),\n                            _step30;\n                          try {\n                            for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {\n                              var variable = _step30.value;\n                              usedNames.add(variable.name);\n                            }\n                          } catch (err) {\n                            _iterator30.e(err);\n                          } finally {\n                            _iterator30.f();\n                          }\n                        }\n                      }\n                    } catch (err) {\n                      _iterator29.e(err);\n                    } finally {\n                      _iterator29.f();\n                    }\n                    addScopeSymbols(reference.from, usedNames, alreadyCheckedScopes, ignoredScopes);\n                  } else {\n                    allUsedNames.add(name);\n                  }\n                }\n              } catch (err) {\n                _iterator28.e(err);\n              } finally {\n                _iterator28.f();\n              }\n            }\n          }\n        };\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n          _loop2();\n        }\n\n        // generate names for symbols\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n      var _iterator20 = _createForOfIteratorHelper(moduleToInfoMap.values()),\n        _step20;\n      try {\n        for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n          var _info2 = _step20.value;\n          var _getUsedNamesInScopeI2 = getUsedNamesInScopeInfo(_info2.module.identifier(), \"\"),\n            namespaceObjectUsedNames = _getUsedNamesInScopeI2.usedNames;\n          switch (_info2.type) {\n            case \"concatenated\":\n              {\n                var _iterator31 = _createForOfIteratorHelper(_info2.moduleScope.variables),\n                  _step31;\n                try {\n                  for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {\n                    var variable = _step31.value;\n                    var name = variable.name;\n                    var _getUsedNamesInScopeI3 = getUsedNamesInScopeInfo(_info2.module.identifier(), name),\n                      usedNames = _getUsedNamesInScopeI3.usedNames,\n                      alreadyCheckedScopes = _getUsedNamesInScopeI3.alreadyCheckedScopes;\n                    if (allUsedNames.has(name) || usedNames.has(name)) {\n                      var references = getAllReferences(variable);\n                      var _iterator32 = _createForOfIteratorHelper(references),\n                        _step32;\n                      try {\n                        for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {\n                          var ref = _step32.value;\n                          addScopeSymbols(ref.from, usedNames, alreadyCheckedScopes, ignoredScopes);\n                        }\n                      } catch (err) {\n                        _iterator32.e(err);\n                      } finally {\n                        _iterator32.f();\n                      }\n                      var newName = this.findNewName(name, allUsedNames, usedNames, _info2.module.readableIdentifier(requestShortener));\n                      allUsedNames.add(newName);\n                      _info2.internalNames.set(name, newName);\n                      topLevelDeclarations.add(newName);\n                      var source = _info2.source;\n                      var allIdentifiers = new Set(references.map(function (r) {\n                        return r.identifier;\n                      }).concat(variable.identifiers));\n                      var _iterator33 = _createForOfIteratorHelper(allIdentifiers),\n                        _step33;\n                      try {\n                        for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {\n                          var identifier = _step33.value;\n                          var r = identifier.range;\n                          var path = getPathInAst(_info2.ast, identifier);\n                          if (path && path.length > 1) {\n                            var maybeProperty = path[1].type === \"AssignmentPattern\" && path[1].left === path[0] ? path[2] : path[1];\n                            if (maybeProperty.type === \"Property\" && maybeProperty.shorthand) {\n                              source.insert(r[1], \": \".concat(newName));\n                              continue;\n                            }\n                          }\n                          source.replace(r[0], r[1] - 1, newName);\n                        }\n                      } catch (err) {\n                        _iterator33.e(err);\n                      } finally {\n                        _iterator33.f();\n                      }\n                    } else {\n                      allUsedNames.add(name);\n                      _info2.internalNames.set(name, name);\n                      topLevelDeclarations.add(name);\n                    }\n                  }\n                } catch (err) {\n                  _iterator31.e(err);\n                } finally {\n                  _iterator31.f();\n                }\n                var namespaceObjectName = void 0;\n                if (_info2.namespaceExportSymbol) {\n                  namespaceObjectName = _info2.internalNames.get(_info2.namespaceExportSymbol);\n                } else {\n                  namespaceObjectName = this.findNewName(\"namespaceObject\", allUsedNames, namespaceObjectUsedNames, _info2.module.readableIdentifier(requestShortener));\n                  allUsedNames.add(namespaceObjectName);\n                }\n                _info2.namespaceObjectName = namespaceObjectName;\n                topLevelDeclarations.add(namespaceObjectName);\n                break;\n              }\n            case \"external\":\n              {\n                var externalName = this.findNewName(\"\", allUsedNames, namespaceObjectUsedNames, _info2.module.readableIdentifier(requestShortener));\n                allUsedNames.add(externalName);\n                _info2.name = externalName;\n                topLevelDeclarations.add(externalName);\n                break;\n              }\n          }\n          if (_info2.module.buildMeta.exportsType !== \"namespace\") {\n            var externalNameInterop = this.findNewName(\"namespaceObject\", allUsedNames, namespaceObjectUsedNames, _info2.module.readableIdentifier(requestShortener));\n            allUsedNames.add(externalNameInterop);\n            _info2.interopNamespaceObjectName = externalNameInterop;\n            topLevelDeclarations.add(externalNameInterop);\n          }\n          if (_info2.module.buildMeta.exportsType === \"default\" && _info2.module.buildMeta.defaultObject !== \"redirect\") {\n            var _externalNameInterop = this.findNewName(\"namespaceObject2\", allUsedNames, namespaceObjectUsedNames, _info2.module.readableIdentifier(requestShortener));\n            allUsedNames.add(_externalNameInterop);\n            _info2.interopNamespaceObject2Name = _externalNameInterop;\n            topLevelDeclarations.add(_externalNameInterop);\n          }\n          if (_info2.module.buildMeta.exportsType === \"dynamic\" || !_info2.module.buildMeta.exportsType) {\n            var _externalNameInterop2 = this.findNewName(\"default\", allUsedNames, namespaceObjectUsedNames, _info2.module.readableIdentifier(requestShortener));\n            allUsedNames.add(_externalNameInterop2);\n            _info2.interopDefaultAccessName = _externalNameInterop2;\n            topLevelDeclarations.add(_externalNameInterop2);\n          }\n        }\n\n        // Find and replace references to modules\n      } catch (err) {\n        _iterator20.e(err);\n      } finally {\n        _iterator20.f();\n      }\n      var _iterator21 = _createForOfIteratorHelper(moduleToInfoMap.values()),\n        _step21;\n      try {\n        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n          var _info3 = _step21.value;\n          if (_info3.type === \"concatenated\") {\n            var _iterator34 = _createForOfIteratorHelper(_info3.globalScope.through),\n              _step34;\n            try {\n              for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {\n                var reference = _step34.value;\n                var _name = reference.identifier.name;\n                var match = ConcatenationScope.matchModuleReference(_name);\n                if (match) {\n                  var referencedInfo = modulesWithInfo[match.index];\n                  if (referencedInfo.type === \"reference\") throw new Error(\"Module reference can't point to a reference\");\n                  var finalName = getFinalName(moduleGraph, referencedInfo, match.ids, moduleToInfoMap, runtime, requestShortener, runtimeTemplate, neededNamespaceObjects, match.call, !match.directImport, _info3.module.buildMeta.strictHarmonyModule, match.asiSafe);\n                  var _r = reference.identifier.range;\n                  var _source = _info3.source;\n                  // range is extended by 2 chars to cover the appended \"._\"\n                  _source.replace(_r[0], _r[1] + 1, finalName);\n                }\n              }\n            } catch (err) {\n              _iterator34.e(err);\n            } finally {\n              _iterator34.f();\n            }\n          }\n        }\n\n        // Map with all root exposed used exports\n        /** @type {Map<string, function(RequestShortener): string>} */\n      } catch (err) {\n        _iterator21.e(err);\n      } finally {\n        _iterator21.f();\n      }\n      var exportsMap = new Map();\n\n      // Set with all root exposed unused exports\n      /** @type {Set<string>} */\n      var unusedExports = new Set();\n      var rootInfo = /** @type {ConcatenatedModuleInfo} */\n      moduleToInfoMap.get(this.rootModule);\n      var strictHarmonyModule = rootInfo.module.buildMeta.strictHarmonyModule;\n      var exportsInfo = moduleGraph.getExportsInfo(rootInfo.module);\n      var _iterator22 = _createForOfIteratorHelper(exportsInfo.orderedExports),\n        _step22;\n      try {\n        var _loop3 = function _loop3() {\n          var exportInfo = _step22.value;\n          var name = exportInfo.name;\n          if (exportInfo.provided === false) return \"continue\";\n          var used = exportInfo.getUsedName(undefined, runtime);\n          if (!used) {\n            unusedExports.add(name);\n            return \"continue\";\n          }\n          exportsMap.set(used, function (requestShortener) {\n            try {\n              var _finalName = getFinalName(moduleGraph, rootInfo, [name], moduleToInfoMap, runtime, requestShortener, runtimeTemplate, neededNamespaceObjects, false, false, strictHarmonyModule, true);\n              return \"/* \".concat(exportInfo.isReexport() ? \"reexport\" : \"binding\", \" */ \").concat(_finalName);\n            } catch (e) {\n              e.message += \"\\nwhile generating the root export '\".concat(name, \"' (used name: '\").concat(used, \"')\");\n              throw e;\n            }\n          });\n        };\n        for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n          var _ret2 = _loop3();\n          if (_ret2 === \"continue\") continue;\n        }\n      } catch (err) {\n        _iterator22.e(err);\n      } finally {\n        _iterator22.f();\n      }\n      var result = new ConcatSource();\n\n      // add harmony compatibility flag (must be first because of possible circular dependencies)\n      if (moduleGraph.getExportsInfo(this).otherExportsInfo.getUsed(runtime) !== UsageState.Unused) {\n        result.add(\"// ESM COMPAT FLAG\\n\");\n        result.add(runtimeTemplate.defineEsModuleFlagStatement({\n          exportsArgument: this.exportsArgument,\n          runtimeRequirements: runtimeRequirements\n        }));\n      }\n\n      // define exports\n      if (exportsMap.size > 0) {\n        runtimeRequirements.add(RuntimeGlobals.exports);\n        runtimeRequirements.add(RuntimeGlobals.definePropertyGetters);\n        var definitions = [];\n        var _iterator23 = _createForOfIteratorHelper(exportsMap),\n          _step23;\n        try {\n          for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n            var _step23$value = _slicedToArray(_step23.value, 2),\n              key = _step23$value[0],\n              value = _step23$value[1];\n            definitions.push(\"\\n  \".concat(JSON.stringify(key), \": \").concat(runtimeTemplate.returningFunction(value(requestShortener))));\n          }\n        } catch (err) {\n          _iterator23.e(err);\n        } finally {\n          _iterator23.f();\n        }\n        result.add(\"\\n// EXPORTS\\n\");\n        result.add(\"\".concat(RuntimeGlobals.definePropertyGetters, \"(\").concat(this.exportsArgument, \", {\").concat(definitions.join(\",\"), \"\\n});\\n\"));\n      }\n\n      // list unused exports\n      if (unusedExports.size > 0) {\n        result.add(\"\\n// UNUSED EXPORTS: \".concat(joinIterableWithComma(unusedExports), \"\\n\"));\n      }\n\n      // generate namespace objects\n      var namespaceObjectSources = new Map();\n      var _iterator24 = _createForOfIteratorHelper(neededNamespaceObjects),\n        _step24;\n      try {\n        for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n          var _info4 = _step24.value;\n          if (_info4.namespaceExportSymbol) continue;\n          var nsObj = [];\n          var _exportsInfo = moduleGraph.getExportsInfo(_info4.module);\n          var _iterator35 = _createForOfIteratorHelper(_exportsInfo.orderedExports),\n            _step35;\n          try {\n            for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {\n              var exportInfo = _step35.value;\n              if (exportInfo.provided === false) continue;\n              var usedName = exportInfo.getUsedName(undefined, runtime);\n              if (usedName) {\n                var _finalName2 = getFinalName(moduleGraph, _info4, [exportInfo.name], moduleToInfoMap, runtime, requestShortener, runtimeTemplate, neededNamespaceObjects, false, undefined, _info4.module.buildMeta.strictHarmonyModule, true);\n                nsObj.push(\"\\n  \".concat(JSON.stringify(usedName), \": \").concat(runtimeTemplate.returningFunction(_finalName2)));\n              }\n            }\n          } catch (err) {\n            _iterator35.e(err);\n          } finally {\n            _iterator35.f();\n          }\n          var _name2 = _info4.namespaceObjectName;\n          var defineGetters = nsObj.length > 0 ? \"\".concat(RuntimeGlobals.definePropertyGetters, \"(\").concat(_name2, \", {\").concat(nsObj.join(\",\"), \"\\n});\\n\") : \"\";\n          if (nsObj.length > 0) runtimeRequirements.add(RuntimeGlobals.definePropertyGetters);\n          namespaceObjectSources.set(_info4, \"\\n// NAMESPACE OBJECT: \".concat(_info4.module.readableIdentifier(requestShortener), \"\\nvar \").concat(_name2, \" = {};\\n\").concat(RuntimeGlobals.makeNamespaceObject, \"(\").concat(_name2, \");\\n\").concat(defineGetters));\n          runtimeRequirements.add(RuntimeGlobals.makeNamespaceObject);\n        }\n\n        // define required namespace objects (must be before evaluation modules)\n      } catch (err) {\n        _iterator24.e(err);\n      } finally {\n        _iterator24.f();\n      }\n      var _iterator25 = _createForOfIteratorHelper(modulesWithInfo),\n        _step25;\n      try {\n        for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n          var _info5 = _step25.value;\n          if (_info5.type === \"concatenated\") {\n            var _source2 = namespaceObjectSources.get(_info5);\n            if (!_source2) continue;\n            result.add(_source2);\n          }\n        }\n      } catch (err) {\n        _iterator25.e(err);\n      } finally {\n        _iterator25.f();\n      }\n      var chunkInitFragments = [];\n\n      // evaluate modules in order\n      var _iterator26 = _createForOfIteratorHelper(modulesWithInfo),\n        _step26;\n      try {\n        for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {\n          var rawInfo = _step26.value;\n          var _name3 = void 0;\n          var isConditional = false;\n          var _info6 = rawInfo.type === \"reference\" ? rawInfo.target : rawInfo;\n          switch (_info6.type) {\n            case \"concatenated\":\n              {\n                result.add(\"\\n;// CONCATENATED MODULE: \".concat(_info6.module.readableIdentifier(requestShortener), \"\\n\"));\n                result.add(_info6.source);\n                if (_info6.chunkInitFragments) {\n                  var _iterator36 = _createForOfIteratorHelper(_info6.chunkInitFragments),\n                    _step36;\n                  try {\n                    for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {\n                      var f = _step36.value;\n                      chunkInitFragments.push(f);\n                    }\n                  } catch (err) {\n                    _iterator36.e(err);\n                  } finally {\n                    _iterator36.f();\n                  }\n                }\n                if (_info6.runtimeRequirements) {\n                  var _iterator37 = _createForOfIteratorHelper(_info6.runtimeRequirements),\n                    _step37;\n                  try {\n                    for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {\n                      var _r2 = _step37.value;\n                      runtimeRequirements.add(_r2);\n                    }\n                  } catch (err) {\n                    _iterator37.e(err);\n                  } finally {\n                    _iterator37.f();\n                  }\n                }\n                _name3 = _info6.namespaceObjectName;\n                break;\n              }\n            case \"external\":\n              {\n                result.add(\"\\n// EXTERNAL MODULE: \".concat(_info6.module.readableIdentifier(requestShortener), \"\\n\"));\n                runtimeRequirements.add(RuntimeGlobals.require);\n                var runtimeCondition = /** @type {ExternalModuleInfo | ReferenceToModuleInfo} */rawInfo.runtimeCondition;\n                var condition = runtimeTemplate.runtimeConditionExpression({\n                  chunkGraph: chunkGraph,\n                  runtimeCondition: runtimeCondition,\n                  runtime: runtime,\n                  runtimeRequirements: runtimeRequirements\n                });\n                if (condition !== \"true\") {\n                  isConditional = true;\n                  result.add(\"if (\".concat(condition, \") {\\n\"));\n                }\n                result.add(\"var \".concat(_info6.name, \" = __webpack_require__(\").concat(JSON.stringify(chunkGraph.getModuleId(_info6.module)), \");\"));\n                _name3 = _info6.name;\n                break;\n              }\n            default:\n              // @ts-expect-error never is expected here\n              throw new Error(\"Unsupported concatenation entry type \".concat(_info6.type));\n          }\n          if (_info6.interopNamespaceObjectUsed) {\n            runtimeRequirements.add(RuntimeGlobals.createFakeNamespaceObject);\n            result.add(\"\\nvar \".concat(_info6.interopNamespaceObjectName, \" = /*#__PURE__*/\").concat(RuntimeGlobals.createFakeNamespaceObject, \"(\").concat(_name3, \", 2);\"));\n          }\n          if (_info6.interopNamespaceObject2Used) {\n            runtimeRequirements.add(RuntimeGlobals.createFakeNamespaceObject);\n            result.add(\"\\nvar \".concat(_info6.interopNamespaceObject2Name, \" = /*#__PURE__*/\").concat(RuntimeGlobals.createFakeNamespaceObject, \"(\").concat(_name3, \");\"));\n          }\n          if (_info6.interopDefaultAccessUsed) {\n            runtimeRequirements.add(RuntimeGlobals.compatGetDefaultExport);\n            result.add(\"\\nvar \".concat(_info6.interopDefaultAccessName, \" = /*#__PURE__*/\").concat(RuntimeGlobals.compatGetDefaultExport, \"(\").concat(_name3, \");\"));\n          }\n          if (isConditional) {\n            result.add(\"\\n}\");\n          }\n        }\n      } catch (err) {\n        _iterator26.e(err);\n      } finally {\n        _iterator26.f();\n      }\n      var data = new Map();\n      if (chunkInitFragments.length > 0) data.set(\"chunkInitFragments\", chunkInitFragments);\n      data.set(\"topLevelDeclarations\", topLevelDeclarations);\n\n      /** @type {CodeGenerationResult} */\n      var resultEntry = {\n        sources: new Map([[\"javascript\", new CachedSource(result)]]),\n        data: data,\n        runtimeRequirements: runtimeRequirements\n      };\n      return resultEntry;\n    }\n\n    /**\n     * @param {Map<Module, ModuleInfo>} modulesMap modulesMap\n     * @param {ModuleInfo} info info\n     * @param {DependencyTemplates} dependencyTemplates dependencyTemplates\n     * @param {RuntimeTemplate} runtimeTemplate runtimeTemplate\n     * @param {ModuleGraph} moduleGraph moduleGraph\n     * @param {ChunkGraph} chunkGraph chunkGraph\n     * @param {RuntimeSpec} runtime runtime\n     * @param {CodeGenerationResults} codeGenerationResults codeGenerationResults\n     */\n  }, {\n    key: \"_analyseModule\",\n    value: function _analyseModule(modulesMap, info, dependencyTemplates, runtimeTemplate, moduleGraph, chunkGraph, runtime, codeGenerationResults) {\n      if (info.type === \"concatenated\") {\n        var m = info.module;\n        try {\n          // Create a concatenation scope to track and capture information\n          var concatenationScope = new ConcatenationScope(modulesMap, info);\n\n          // TODO cache codeGeneration results\n          var codeGenResult = m.codeGeneration({\n            dependencyTemplates: dependencyTemplates,\n            runtimeTemplate: runtimeTemplate,\n            moduleGraph: moduleGraph,\n            chunkGraph: chunkGraph,\n            runtime: runtime,\n            concatenationScope: concatenationScope,\n            codeGenerationResults: codeGenerationResults,\n            sourceTypes: TYPES\n          });\n          var source = codeGenResult.sources.get(\"javascript\");\n          var data = codeGenResult.data;\n          var chunkInitFragments = data && data.get(\"chunkInitFragments\");\n          var code = source.source().toString();\n          var ast;\n          try {\n            ast = JavascriptParser._parse(code, {\n              sourceType: \"module\"\n            });\n          } catch (err) {\n            if (err.loc && typeof err.loc === \"object\" && typeof err.loc.line === \"number\") {\n              var lineNumber = err.loc.line;\n              var lines = code.split(\"\\n\");\n              err.message += \"\\n| \" + lines.slice(Math.max(0, lineNumber - 3), lineNumber + 2).join(\"\\n| \");\n            }\n            throw err;\n          }\n          var scopeManager = eslintScope.analyze(ast, {\n            ecmaVersion: 6,\n            sourceType: \"module\",\n            optimistic: true,\n            ignoreEval: true,\n            impliedStrict: true\n          });\n          var globalScope = scopeManager.acquire(ast);\n          var moduleScope = globalScope.childScopes[0];\n          var resultSource = new ReplaceSource(source);\n          info.runtimeRequirements = codeGenResult.runtimeRequirements;\n          info.ast = ast;\n          info.internalSource = source;\n          info.source = resultSource;\n          info.chunkInitFragments = chunkInitFragments;\n          info.globalScope = globalScope;\n          info.moduleScope = moduleScope;\n        } catch (err) {\n          err.message += \"\\nwhile analyzing module \".concat(m.identifier(), \" for concatenation\");\n          throw err;\n        }\n      }\n    }\n\n    /**\n     * @param {ModuleGraph} moduleGraph the module graph\n     * @param {RuntimeSpec} runtime the runtime\n     * @returns {[ModuleInfoOrReference[], Map<Module, ModuleInfo>]} module info items\n     */\n  }, {\n    key: \"_getModulesWithInfo\",\n    value: function _getModulesWithInfo(moduleGraph, runtime) {\n      var orderedConcatenationList = this._createConcatenationList(this.rootModule, this._modules, runtime, moduleGraph);\n      /** @type {Map<Module, ModuleInfo>} */\n      var map = new Map();\n      var list = orderedConcatenationList.map(function (info, index) {\n        var item = map.get(info.module);\n        if (item === undefined) {\n          switch (info.type) {\n            case \"concatenated\":\n              item = {\n                type: \"concatenated\",\n                module: info.module,\n                index: index,\n                ast: undefined,\n                internalSource: undefined,\n                runtimeRequirements: undefined,\n                source: undefined,\n                globalScope: undefined,\n                moduleScope: undefined,\n                internalNames: new Map(),\n                exportMap: undefined,\n                rawExportMap: undefined,\n                namespaceExportSymbol: undefined,\n                namespaceObjectName: undefined,\n                interopNamespaceObjectUsed: false,\n                interopNamespaceObjectName: undefined,\n                interopNamespaceObject2Used: false,\n                interopNamespaceObject2Name: undefined,\n                interopDefaultAccessUsed: false,\n                interopDefaultAccessName: undefined\n              };\n              break;\n            case \"external\":\n              item = {\n                type: \"external\",\n                module: info.module,\n                runtimeCondition: info.runtimeCondition,\n                index: index,\n                name: undefined,\n                interopNamespaceObjectUsed: false,\n                interopNamespaceObjectName: undefined,\n                interopNamespaceObject2Used: false,\n                interopNamespaceObject2Name: undefined,\n                interopDefaultAccessUsed: false,\n                interopDefaultAccessName: undefined\n              };\n              break;\n            default:\n              throw new Error(\"Unsupported concatenation entry type \".concat(info.type));\n          }\n          map.set(item.module, item);\n          return item;\n        } else {\n          /** @type {ReferenceToModuleInfo} */\n          var ref = {\n            type: \"reference\",\n            runtimeCondition: info.runtimeCondition,\n            target: item\n          };\n          return ref;\n        }\n      });\n      return [list, map];\n    }\n  }, {\n    key: \"findNewName\",\n    value: function findNewName(oldName, usedNamed1, usedNamed2, extraInfo) {\n      var name = oldName;\n      if (name === ConcatenationScope.DEFAULT_EXPORT) {\n        name = \"\";\n      }\n      if (name === ConcatenationScope.NAMESPACE_OBJECT_EXPORT) {\n        name = \"namespaceObject\";\n      }\n\n      // Remove uncool stuff\n      extraInfo = extraInfo.replace(/\\.+\\/|(\\/index)?\\.([a-zA-Z0-9]{1,4})($|\\s|\\?)|\\s*\\+\\s*\\d+\\s*modules/g, \"\");\n      var splittedInfo = extraInfo.split(\"/\");\n      while (splittedInfo.length) {\n        name = splittedInfo.pop() + (name ? \"_\" + name : \"\");\n        var nameIdent = Template.toIdentifier(name);\n        if (!usedNamed1.has(nameIdent) && (!usedNamed2 || !usedNamed2.has(nameIdent))) return nameIdent;\n      }\n      var i = 0;\n      var nameWithNumber = Template.toIdentifier(\"\".concat(name, \"_\").concat(i));\n      while (usedNamed1.has(nameWithNumber) || usedNamed2 && usedNamed2.has(nameWithNumber)) {\n        i++;\n        nameWithNumber = Template.toIdentifier(\"\".concat(name, \"_\").concat(i));\n      }\n      return nameWithNumber;\n    }\n\n    /**\n     * @param {Hash} hash the hash used to track dependencies\n     * @param {UpdateHashContext} context context\n     * @returns {void}\n     */\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash, context) {\n      var chunkGraph = context.chunkGraph,\n        runtime = context.runtime;\n      var _iterator38 = _createForOfIteratorHelper(this._createConcatenationList(this.rootModule, this._modules, intersectRuntime(runtime, this._runtime), chunkGraph.moduleGraph)),\n        _step38;\n      try {\n        for (_iterator38.s(); !(_step38 = _iterator38.n()).done;) {\n          var info = _step38.value;\n          switch (info.type) {\n            case \"concatenated\":\n              info.module.updateHash(hash, context);\n              break;\n            case \"external\":\n              hash.update(\"\".concat(chunkGraph.getModuleId(info.module)));\n              // TODO runtimeCondition\n              break;\n          }\n        }\n      } catch (err) {\n        _iterator38.e(err);\n      } finally {\n        _iterator38.f();\n      }\n      _get(_getPrototypeOf(ConcatenatedModule.prototype), \"updateHash\", this).call(this, hash, context);\n    }\n  }], [{\n    key: \"create\",\n    value:\n    /**\n     * @param {Module} rootModule the root module of the concatenation\n     * @param {Set<Module>} modules all modules in the concatenation (including the root module)\n     * @param {RuntimeSpec} runtime the runtime\n     * @param {Object=} associatedObjectForCache object for caching\n     * @param {string | HashConstructor=} hashFunction hash function to use\n     * @returns {ConcatenatedModule} the module\n     */\n    function create(rootModule, modules, runtime, associatedObjectForCache) {\n      var hashFunction = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"md4\";\n      var identifier = ConcatenatedModule._createIdentifier(rootModule, modules, associatedObjectForCache, hashFunction);\n      return new ConcatenatedModule({\n        identifier: identifier,\n        rootModule: rootModule,\n        modules: modules,\n        runtime: runtime\n      });\n    }\n  }, {\n    key: \"_createIdentifier\",\n    value: function _createIdentifier(rootModule, modules, associatedObjectForCache) {\n      var hashFunction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"md4\";\n      var cachedMakePathsRelative = makePathsRelative.bindContextCache(rootModule.context, associatedObjectForCache);\n      var identifiers = [];\n      var _iterator39 = _createForOfIteratorHelper(modules),\n        _step39;\n      try {\n        for (_iterator39.s(); !(_step39 = _iterator39.n()).done;) {\n          var _module3 = _step39.value;\n          identifiers.push(cachedMakePathsRelative(_module3.identifier()));\n        }\n      } catch (err) {\n        _iterator39.e(err);\n      } finally {\n        _iterator39.f();\n      }\n      identifiers.sort();\n      var hash = createHash(hashFunction);\n      hash.update(identifiers.join(\" \"));\n      return rootModule.identifier() + \"|\" + hash.digest(\"hex\");\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(context) {\n      var obj = new ConcatenatedModule({\n        identifier: undefined,\n        rootModule: undefined,\n        modules: undefined,\n        runtime: undefined\n      });\n      obj.deserialize(context);\n      return obj;\n    }\n  }]);\n  return ConcatenatedModule;\n}(Module);\nmakeSerializable(ConcatenatedModule, \"webpack/lib/optimize/ConcatenatedModule\");\nmodule.exports = ConcatenatedModule;","map":{"version":3,"names":["eslintScope","require","Referencer","CachedSource","ConcatSource","ReplaceSource","ConcatenationScope","UsageState","Module","RuntimeGlobals","Template","HarmonyImportDependency","JavascriptParser","equals","LazySet","concatComparators","createHash","makePathsRelative","makeSerializable","propertyAccess","filterRuntime","intersectRuntime","mergeRuntimeCondition","mergeRuntimeConditionNonFalse","runtimeConditionToString","subtractRuntimeCondition","ReferencerClass","prototype","PropertyDefinition","Property","RESERVED_NAMES","Set","DEFAULT_EXPORT","NAMESPACE_OBJECT_EXPORT","join","split","createComparator","property","comparator","a","b","compareNumbers","isNaN","bySourceOrder","byRangeStart","joinIterableWithComma","iterable","str","first","item","getFinalBinding","moduleGraph","info","exportName","moduleToInfoMap","runtime","requestShortener","runtimeTemplate","neededNamespaceObjects","asCall","strictHarmonyModule","asiSafe","alreadyVisited","exportsType","module","getExportsType","length","interopNamespaceObject2Used","rawName","interopNamespaceObject2Name","ids","interopNamespaceObjectUsed","interopNamespaceObjectName","Error","slice","exportId","interopDefaultAccessUsed","defaultExport","interopDefaultAccessName","type","add","namespaceObjectName","name","exportsInfo","getExportsInfo","exportInfo","getExportInfo","has","provided","directExport","exportMap","get","usedName","getUsedName","rawExport","rawExportMap","reexport","findTarget","readableIdentifier","Array","from","m","refInfo","export","buildMeta","namespaceExportSymbol","used","comment","toNormalComment","getFinalName","callContext","binding","reference","isPropertyAccess","internalNames","symbol","addScopeSymbols","s","nameSet","scopeSet1","scopeSet2","scope","variables","variable","upper","getAllReferences","set","references","identifiers","childScopes","innerVar","some","id","concat","getPathInAst","ast","node","nr","range","enterNode","n","undefined","r","path","push","isArray","i","enterResult","keys","Object","value","pathResult","TYPES","ConcatenatedModule","identifier","rootModule","modules","layer","_identifier","_modules","_runtime","factoryMeta","size","options","libIdent","nameForCondition","getSideEffectsConnectionState","compilation","resolver","fs","callback","buildInfo","strict","cacheable","moduleArgument","exportsArgument","fileDependencies","contextDependencies","missingDependencies","topLevelDeclarations","assets","clearDependenciesAndBlocks","clearWarningsAndErrors","dependencies","filter","dep","getModule","d","blocks","warnings","getWarnings","warning","addWarning","errors","getErrors","error","addError","decl","create","assign","assetsInfo","Map","key","modulesSet","list","existingEntries","getConcatenatedImports","connections","getOutgoingConnections","c","connection","dependency","resolvedOriginModule","isTargetActive","map","sourceOrder","rangeStart","sort","referencesMap","runtimeCondition","entry","values","enterModule","existingEntry","imports","reducedRuntimeCondition","lastItem","buildDependencies","addCacheDependencies","dependencyTemplates","chunkGraph","generationRuntime","codeGenerationResults","runtimeRequirements","_getModulesWithInfo","modulesWithInfo","_analyseModule","allUsedNames","usedNamesInScopeInfo","getUsedNamesInScopeInfo","usedNames","alreadyCheckedScopes","ignoredScopes","moduleScope","superClassCache","WeakMap","getSuperClassExpressions","cacheEntry","superClassExpressions","childScope","block","superClass","globalScope","through","isModuleReference","match","matchModuleReference","referencedInfo","index","expr","namespaceObjectUsedNames","ref","newName","findNewName","source","allIdentifiers","maybeProperty","left","shorthand","insert","replace","externalName","externalNameInterop","defaultObject","finalName","call","directImport","exportsMap","unusedExports","rootInfo","orderedExports","isReexport","e","message","result","otherExportsInfo","getUsed","Unused","defineEsModuleFlagStatement","exports","definePropertyGetters","definitions","JSON","stringify","returningFunction","namespaceObjectSources","nsObj","defineGetters","makeNamespaceObject","chunkInitFragments","rawInfo","isConditional","target","f","condition","runtimeConditionExpression","getModuleId","createFakeNamespaceObject","compatGetDefaultExport","data","resultEntry","sources","modulesMap","concatenationScope","codeGenResult","codeGeneration","sourceTypes","code","toString","_parse","sourceType","err","loc","line","lineNumber","lines","Math","max","scopeManager","analyze","ecmaVersion","optimistic","ignoreEval","impliedStrict","acquire","resultSource","internalSource","orderedConcatenationList","_createConcatenationList","oldName","usedNamed1","usedNamed2","extraInfo","splittedInfo","pop","nameIdent","toIdentifier","nameWithNumber","hash","context","updateHash","update","associatedObjectForCache","hashFunction","_createIdentifier","cachedMakePathsRelative","bindContextCache","digest","obj","deserialize"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/optimize/ConcatenatedModule.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst eslintScope = require(\"eslint-scope\");\nconst Referencer = require(\"eslint-scope/lib/referencer\");\nconst {\n\tCachedSource,\n\tConcatSource,\n\tReplaceSource\n} = require(\"webpack-sources\");\nconst ConcatenationScope = require(\"../ConcatenationScope\");\nconst { UsageState } = require(\"../ExportsInfo\");\nconst Module = require(\"../Module\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst Template = require(\"../Template\");\nconst HarmonyImportDependency = require(\"../dependencies/HarmonyImportDependency\");\nconst JavascriptParser = require(\"../javascript/JavascriptParser\");\nconst { equals } = require(\"../util/ArrayHelpers\");\nconst LazySet = require(\"../util/LazySet\");\nconst { concatComparators } = require(\"../util/comparators\");\nconst createHash = require(\"../util/createHash\");\nconst { makePathsRelative } = require(\"../util/identifier\");\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst propertyAccess = require(\"../util/propertyAccess\");\nconst {\n\tfilterRuntime,\n\tintersectRuntime,\n\tmergeRuntimeCondition,\n\tmergeRuntimeConditionNonFalse,\n\truntimeConditionToString,\n\tsubtractRuntimeCondition\n} = require(\"../util/runtime\");\n\n/** @typedef {import(\"eslint-scope\").Scope} Scope */\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").WebpackOptionsNormalized} WebpackOptions */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"../ExportsInfo\").ExportInfo} ExportInfo */\n/** @template T @typedef {import(\"../InitFragment\")<T>} InitFragment */\n/** @typedef {import(\"../Module\").CodeGenerationContext} CodeGenerationContext */\n/** @typedef {import(\"../Module\").CodeGenerationResult} CodeGenerationResult */\n/** @typedef {import(\"../Module\").LibIdentOptions} LibIdentOptions */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n/** @typedef {import(\"../ModuleGraphConnection\").ConnectionState} ConnectionState */\n/** @typedef {import(\"../RequestShortener\")} RequestShortener */\n/** @typedef {import(\"../ResolverFactory\").ResolverWithOptions} ResolverWithOptions */\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"../WebpackError\")} WebpackError */\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").ChunkRenderContext} ChunkRenderContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @typedef {typeof import(\"../util/Hash\")} HashConstructor */\n/** @typedef {import(\"../util/fs\").InputFileSystem} InputFileSystem */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\n// fix eslint-scope to support class properties correctly\n// cspell:word Referencer\nconst ReferencerClass = Referencer;\nif (!ReferencerClass.prototype.PropertyDefinition) {\n\tReferencerClass.prototype.PropertyDefinition =\n\t\tReferencerClass.prototype.Property;\n}\n\n/**\n * @typedef {Object} ReexportInfo\n * @property {Module} module\n * @property {string[]} export\n */\n\n/** @typedef {RawBinding | SymbolBinding} Binding */\n\n/**\n * @typedef {Object} RawBinding\n * @property {ModuleInfo} info\n * @property {string} rawName\n * @property {string=} comment\n * @property {string[]} ids\n * @property {string[]} exportName\n */\n\n/**\n * @typedef {Object} SymbolBinding\n * @property {ConcatenatedModuleInfo} info\n * @property {string} name\n * @property {string=} comment\n * @property {string[]} ids\n * @property {string[]} exportName\n */\n\n/** @typedef {ConcatenatedModuleInfo | ExternalModuleInfo } ModuleInfo */\n/** @typedef {ConcatenatedModuleInfo | ExternalModuleInfo | ReferenceToModuleInfo } ModuleInfoOrReference */\n\n/**\n * @typedef {Object} ConcatenatedModuleInfo\n * @property {\"concatenated\"} type\n * @property {Module} module\n * @property {number} index\n * @property {Object} ast\n * @property {Source} internalSource\n * @property {ReplaceSource} source\n * @property {InitFragment<ChunkRenderContext>[]=} chunkInitFragments\n * @property {Iterable<string>} runtimeRequirements\n * @property {Scope} globalScope\n * @property {Scope} moduleScope\n * @property {Map<string, string>} internalNames\n * @property {Map<string, string>} exportMap\n * @property {Map<string, string>} rawExportMap\n * @property {string=} namespaceExportSymbol\n * @property {string} namespaceObjectName\n * @property {boolean} interopNamespaceObjectUsed\n * @property {string} interopNamespaceObjectName\n * @property {boolean} interopNamespaceObject2Used\n * @property {string} interopNamespaceObject2Name\n * @property {boolean} interopDefaultAccessUsed\n * @property {string} interopDefaultAccessName\n */\n\n/**\n * @typedef {Object} ExternalModuleInfo\n * @property {\"external\"} type\n * @property {Module} module\n * @property {RuntimeSpec | boolean} runtimeCondition\n * @property {number} index\n * @property {string} name\n * @property {boolean} interopNamespaceObjectUsed\n * @property {string} interopNamespaceObjectName\n * @property {boolean} interopNamespaceObject2Used\n * @property {string} interopNamespaceObject2Name\n * @property {boolean} interopDefaultAccessUsed\n * @property {string} interopDefaultAccessName\n */\n\n/**\n * @typedef {Object} ReferenceToModuleInfo\n * @property {\"reference\"} type\n * @property {RuntimeSpec | boolean} runtimeCondition\n * @property {ConcatenatedModuleInfo | ExternalModuleInfo} target\n */\n\nconst RESERVED_NAMES = new Set(\n\t[\n\t\t// internal names (should always be renamed)\n\t\tConcatenationScope.DEFAULT_EXPORT,\n\t\tConcatenationScope.NAMESPACE_OBJECT_EXPORT,\n\n\t\t// keywords\n\t\t\"abstract,arguments,async,await,boolean,break,byte,case,catch,char,class,const,continue\",\n\t\t\"debugger,default,delete,do,double,else,enum,eval,export,extends,false,final,finally,float\",\n\t\t\"for,function,goto,if,implements,import,in,instanceof,int,interface,let,long,native,new,null\",\n\t\t\"package,private,protected,public,return,short,static,super,switch,synchronized,this,throw\",\n\t\t\"throws,transient,true,try,typeof,var,void,volatile,while,with,yield\",\n\n\t\t// commonjs/amd\n\t\t\"module,__dirname,__filename,exports,require,define\",\n\n\t\t// js globals\n\t\t\"Array,Date,eval,function,hasOwnProperty,Infinity,isFinite,isNaN,isPrototypeOf,length,Math\",\n\t\t\"NaN,name,Number,Object,prototype,String,toString,undefined,valueOf\",\n\n\t\t// browser globals\n\t\t\"alert,all,anchor,anchors,area,assign,blur,button,checkbox,clearInterval,clearTimeout\",\n\t\t\"clientInformation,close,closed,confirm,constructor,crypto,decodeURI,decodeURIComponent\",\n\t\t\"defaultStatus,document,element,elements,embed,embeds,encodeURI,encodeURIComponent,escape\",\n\t\t\"event,fileUpload,focus,form,forms,frame,innerHeight,innerWidth,layer,layers,link,location\",\n\t\t\"mimeTypes,navigate,navigator,frames,frameRate,hidden,history,image,images,offscreenBuffering\",\n\t\t\"open,opener,option,outerHeight,outerWidth,packages,pageXOffset,pageYOffset,parent,parseFloat\",\n\t\t\"parseInt,password,pkcs11,plugin,prompt,propertyIsEnum,radio,reset,screenX,screenY,scroll\",\n\t\t\"secure,select,self,setInterval,setTimeout,status,submit,taint,text,textarea,top,unescape\",\n\t\t\"untaint,window\",\n\n\t\t// window events\n\t\t\"onblur,onclick,onerror,onfocus,onkeydown,onkeypress,onkeyup,onmouseover,onload,onmouseup,onmousedown,onsubmit\"\n\t]\n\t\t.join(\",\")\n\t\t.split(\",\")\n);\n\nconst createComparator = (property, comparator) => (a, b) =>\n\tcomparator(a[property], b[property]);\nconst compareNumbers = (a, b) => {\n\tif (isNaN(a)) {\n\t\tif (!isNaN(b)) {\n\t\t\treturn 1;\n\t\t}\n\t} else {\n\t\tif (isNaN(b)) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (a !== b) {\n\t\t\treturn a < b ? -1 : 1;\n\t\t}\n\t}\n\treturn 0;\n};\nconst bySourceOrder = createComparator(\"sourceOrder\", compareNumbers);\nconst byRangeStart = createComparator(\"rangeStart\", compareNumbers);\n\nconst joinIterableWithComma = iterable => {\n\t// This is more performant than Array.from().join(\", \")\n\t// as it doesn't create an array\n\tlet str = \"\";\n\tlet first = true;\n\tfor (const item of iterable) {\n\t\tif (first) {\n\t\t\tfirst = false;\n\t\t} else {\n\t\t\tstr += \", \";\n\t\t}\n\t\tstr += item;\n\t}\n\treturn str;\n};\n\n/**\n * @typedef {Object} ConcatenationEntry\n * @property {\"concatenated\" | \"external\"} type\n * @property {Module} module\n * @property {RuntimeSpec | boolean} runtimeCondition\n */\n\n/**\n * @param {ModuleGraph} moduleGraph the module graph\n * @param {ModuleInfo} info module info\n * @param {string[]} exportName exportName\n * @param {Map<Module, ModuleInfo>} moduleToInfoMap moduleToInfoMap\n * @param {RuntimeSpec} runtime for which runtime\n * @param {RequestShortener} requestShortener the request shortener\n * @param {RuntimeTemplate} runtimeTemplate the runtime template\n * @param {Set<ConcatenatedModuleInfo>} neededNamespaceObjects modules for which a namespace object should be generated\n * @param {boolean} asCall asCall\n * @param {boolean} strictHarmonyModule strictHarmonyModule\n * @param {boolean | undefined} asiSafe asiSafe\n * @param {Set<ExportInfo>} alreadyVisited alreadyVisited\n * @returns {Binding} the final variable\n */\nconst getFinalBinding = (\n\tmoduleGraph,\n\tinfo,\n\texportName,\n\tmoduleToInfoMap,\n\truntime,\n\trequestShortener,\n\truntimeTemplate,\n\tneededNamespaceObjects,\n\tasCall,\n\tstrictHarmonyModule,\n\tasiSafe,\n\talreadyVisited = new Set()\n) => {\n\tconst exportsType = info.module.getExportsType(\n\t\tmoduleGraph,\n\t\tstrictHarmonyModule\n\t);\n\tif (exportName.length === 0) {\n\t\tswitch (exportsType) {\n\t\t\tcase \"default-only\":\n\t\t\t\tinfo.interopNamespaceObject2Used = true;\n\t\t\t\treturn {\n\t\t\t\t\tinfo,\n\t\t\t\t\trawName: info.interopNamespaceObject2Name,\n\t\t\t\t\tids: exportName,\n\t\t\t\t\texportName\n\t\t\t\t};\n\t\t\tcase \"default-with-named\":\n\t\t\t\tinfo.interopNamespaceObjectUsed = true;\n\t\t\t\treturn {\n\t\t\t\t\tinfo,\n\t\t\t\t\trawName: info.interopNamespaceObjectName,\n\t\t\t\t\tids: exportName,\n\t\t\t\t\texportName\n\t\t\t\t};\n\t\t\tcase \"namespace\":\n\t\t\tcase \"dynamic\":\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unexpected exportsType ${exportsType}`);\n\t\t}\n\t} else {\n\t\tswitch (exportsType) {\n\t\t\tcase \"namespace\":\n\t\t\t\tbreak;\n\t\t\tcase \"default-with-named\":\n\t\t\t\tswitch (exportName[0]) {\n\t\t\t\t\tcase \"default\":\n\t\t\t\t\t\texportName = exportName.slice(1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"__esModule\":\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tinfo,\n\t\t\t\t\t\t\trawName: \"/* __esModule */true\",\n\t\t\t\t\t\t\tids: exportName.slice(1),\n\t\t\t\t\t\t\texportName\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"default-only\": {\n\t\t\t\tconst exportId = exportName[0];\n\t\t\t\tif (exportId === \"__esModule\") {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tinfo,\n\t\t\t\t\t\trawName: \"/* __esModule */true\",\n\t\t\t\t\t\tids: exportName.slice(1),\n\t\t\t\t\t\texportName\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\texportName = exportName.slice(1);\n\t\t\t\tif (exportId !== \"default\") {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tinfo,\n\t\t\t\t\t\trawName:\n\t\t\t\t\t\t\t\"/* non-default import from default-exporting module */undefined\",\n\t\t\t\t\t\tids: exportName,\n\t\t\t\t\t\texportName\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"dynamic\":\n\t\t\t\tswitch (exportName[0]) {\n\t\t\t\t\tcase \"default\": {\n\t\t\t\t\t\texportName = exportName.slice(1);\n\t\t\t\t\t\tinfo.interopDefaultAccessUsed = true;\n\t\t\t\t\t\tconst defaultExport = asCall\n\t\t\t\t\t\t\t? `${info.interopDefaultAccessName}()`\n\t\t\t\t\t\t\t: asiSafe\n\t\t\t\t\t\t\t? `(${info.interopDefaultAccessName}())`\n\t\t\t\t\t\t\t: asiSafe === false\n\t\t\t\t\t\t\t? `;(${info.interopDefaultAccessName}())`\n\t\t\t\t\t\t\t: `${info.interopDefaultAccessName}.a`;\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tinfo,\n\t\t\t\t\t\t\trawName: defaultExport,\n\t\t\t\t\t\t\tids: exportName,\n\t\t\t\t\t\t\texportName\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tcase \"__esModule\":\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tinfo,\n\t\t\t\t\t\t\trawName: \"/* __esModule */true\",\n\t\t\t\t\t\t\tids: exportName.slice(1),\n\t\t\t\t\t\t\texportName\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unexpected exportsType ${exportsType}`);\n\t\t}\n\t}\n\tif (exportName.length === 0) {\n\t\tswitch (info.type) {\n\t\t\tcase \"concatenated\":\n\t\t\t\tneededNamespaceObjects.add(info);\n\t\t\t\treturn {\n\t\t\t\t\tinfo,\n\t\t\t\t\trawName: info.namespaceObjectName,\n\t\t\t\t\tids: exportName,\n\t\t\t\t\texportName\n\t\t\t\t};\n\t\t\tcase \"external\":\n\t\t\t\treturn { info, rawName: info.name, ids: exportName, exportName };\n\t\t}\n\t}\n\tconst exportsInfo = moduleGraph.getExportsInfo(info.module);\n\tconst exportInfo = exportsInfo.getExportInfo(exportName[0]);\n\tif (alreadyVisited.has(exportInfo)) {\n\t\treturn {\n\t\t\tinfo,\n\t\t\trawName: \"/* circular reexport */ Object(function x() { x() }())\",\n\t\t\tids: [],\n\t\t\texportName\n\t\t};\n\t}\n\talreadyVisited.add(exportInfo);\n\tswitch (info.type) {\n\t\tcase \"concatenated\": {\n\t\t\tconst exportId = exportName[0];\n\t\t\tif (exportInfo.provided === false) {\n\t\t\t\t// It's not provided, but it could be on the prototype\n\t\t\t\tneededNamespaceObjects.add(info);\n\t\t\t\treturn {\n\t\t\t\t\tinfo,\n\t\t\t\t\trawName: info.namespaceObjectName,\n\t\t\t\t\tids: exportName,\n\t\t\t\t\texportName\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst directExport = info.exportMap && info.exportMap.get(exportId);\n\t\t\tif (directExport) {\n\t\t\t\tconst usedName = /** @type {string[]} */ (\n\t\t\t\t\texportsInfo.getUsedName(exportName, runtime)\n\t\t\t\t);\n\t\t\t\tif (!usedName) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tinfo,\n\t\t\t\t\t\trawName: \"/* unused export */ undefined\",\n\t\t\t\t\t\tids: exportName.slice(1),\n\t\t\t\t\t\texportName\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tinfo,\n\t\t\t\t\tname: directExport,\n\t\t\t\t\tids: usedName.slice(1),\n\t\t\t\t\texportName\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst rawExport = info.rawExportMap && info.rawExportMap.get(exportId);\n\t\t\tif (rawExport) {\n\t\t\t\treturn {\n\t\t\t\t\tinfo,\n\t\t\t\t\trawName: rawExport,\n\t\t\t\t\tids: exportName.slice(1),\n\t\t\t\t\texportName\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst reexport = exportInfo.findTarget(moduleGraph, module =>\n\t\t\t\tmoduleToInfoMap.has(module)\n\t\t\t);\n\t\t\tif (reexport === false) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Target module of reexport from '${info.module.readableIdentifier(\n\t\t\t\t\t\trequestShortener\n\t\t\t\t\t)}' is not part of the concatenation (export '${exportId}')\\nModules in the concatenation:\\n${Array.from(\n\t\t\t\t\t\tmoduleToInfoMap,\n\t\t\t\t\t\t([m, info]) =>\n\t\t\t\t\t\t\t` * ${info.type} ${m.readableIdentifier(requestShortener)}`\n\t\t\t\t\t).join(\"\\n\")}`\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (reexport) {\n\t\t\t\tconst refInfo = moduleToInfoMap.get(reexport.module);\n\t\t\t\treturn getFinalBinding(\n\t\t\t\t\tmoduleGraph,\n\t\t\t\t\trefInfo,\n\t\t\t\t\treexport.export\n\t\t\t\t\t\t? [...reexport.export, ...exportName.slice(1)]\n\t\t\t\t\t\t: exportName.slice(1),\n\t\t\t\t\tmoduleToInfoMap,\n\t\t\t\t\truntime,\n\t\t\t\t\trequestShortener,\n\t\t\t\t\truntimeTemplate,\n\t\t\t\t\tneededNamespaceObjects,\n\t\t\t\t\tasCall,\n\t\t\t\t\tinfo.module.buildMeta.strictHarmonyModule,\n\t\t\t\t\tasiSafe,\n\t\t\t\t\talreadyVisited\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (info.namespaceExportSymbol) {\n\t\t\t\tconst usedName = /** @type {string[]} */ (\n\t\t\t\t\texportsInfo.getUsedName(exportName, runtime)\n\t\t\t\t);\n\t\t\t\treturn {\n\t\t\t\t\tinfo,\n\t\t\t\t\trawName: info.namespaceObjectName,\n\t\t\t\t\tids: usedName,\n\t\t\t\t\texportName\n\t\t\t\t};\n\t\t\t}\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot get final name for export '${exportName.join(\n\t\t\t\t\t\".\"\n\t\t\t\t)}' of ${info.module.readableIdentifier(requestShortener)}`\n\t\t\t);\n\t\t}\n\n\t\tcase \"external\": {\n\t\t\tconst used = /** @type {string[]} */ (\n\t\t\t\texportsInfo.getUsedName(exportName, runtime)\n\t\t\t);\n\t\t\tif (!used) {\n\t\t\t\treturn {\n\t\t\t\t\tinfo,\n\t\t\t\t\trawName: \"/* unused export */ undefined\",\n\t\t\t\t\tids: exportName.slice(1),\n\t\t\t\t\texportName\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst comment = equals(used, exportName)\n\t\t\t\t? \"\"\n\t\t\t\t: Template.toNormalComment(`${exportName.join(\".\")}`);\n\t\t\treturn { info, rawName: info.name + comment, ids: used, exportName };\n\t\t}\n\t}\n};\n\n/**\n * @param {ModuleGraph} moduleGraph the module graph\n * @param {ModuleInfo} info module info\n * @param {string[]} exportName exportName\n * @param {Map<Module, ModuleInfo>} moduleToInfoMap moduleToInfoMap\n * @param {RuntimeSpec} runtime for which runtime\n * @param {RequestShortener} requestShortener the request shortener\n * @param {RuntimeTemplate} runtimeTemplate the runtime template\n * @param {Set<ConcatenatedModuleInfo>} neededNamespaceObjects modules for which a namespace object should be generated\n * @param {boolean} asCall asCall\n * @param {boolean} callContext callContext\n * @param {boolean} strictHarmonyModule strictHarmonyModule\n * @param {boolean | undefined} asiSafe asiSafe\n * @returns {string} the final name\n */\nconst getFinalName = (\n\tmoduleGraph,\n\tinfo,\n\texportName,\n\tmoduleToInfoMap,\n\truntime,\n\trequestShortener,\n\truntimeTemplate,\n\tneededNamespaceObjects,\n\tasCall,\n\tcallContext,\n\tstrictHarmonyModule,\n\tasiSafe\n) => {\n\tconst binding = getFinalBinding(\n\t\tmoduleGraph,\n\t\tinfo,\n\t\texportName,\n\t\tmoduleToInfoMap,\n\t\truntime,\n\t\trequestShortener,\n\t\truntimeTemplate,\n\t\tneededNamespaceObjects,\n\t\tasCall,\n\t\tstrictHarmonyModule,\n\t\tasiSafe\n\t);\n\t{\n\t\tconst { ids, comment } = binding;\n\t\tlet reference;\n\t\tlet isPropertyAccess;\n\t\tif (\"rawName\" in binding) {\n\t\t\treference = `${binding.rawName}${comment || \"\"}${propertyAccess(ids)}`;\n\t\t\tisPropertyAccess = ids.length > 0;\n\t\t} else {\n\t\t\tconst { info, name: exportId } = binding;\n\t\t\tconst name = info.internalNames.get(exportId);\n\t\t\tif (!name) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`The export \"${exportId}\" in \"${info.module.readableIdentifier(\n\t\t\t\t\t\trequestShortener\n\t\t\t\t\t)}\" has no internal name (existing names: ${\n\t\t\t\t\t\tArray.from(\n\t\t\t\t\t\t\tinfo.internalNames,\n\t\t\t\t\t\t\t([name, symbol]) => `${name}: ${symbol}`\n\t\t\t\t\t\t).join(\", \") || \"none\"\n\t\t\t\t\t})`\n\t\t\t\t);\n\t\t\t}\n\t\t\treference = `${name}${comment || \"\"}${propertyAccess(ids)}`;\n\t\t\tisPropertyAccess = ids.length > 1;\n\t\t}\n\t\tif (isPropertyAccess && asCall && callContext === false) {\n\t\t\treturn asiSafe\n\t\t\t\t? `(0,${reference})`\n\t\t\t\t: asiSafe === false\n\t\t\t\t? `;(0,${reference})`\n\t\t\t\t: `/*#__PURE__*/Object(${reference})`;\n\t\t}\n\t\treturn reference;\n\t}\n};\n\nconst addScopeSymbols = (s, nameSet, scopeSet1, scopeSet2) => {\n\tlet scope = s;\n\twhile (scope) {\n\t\tif (scopeSet1.has(scope)) break;\n\t\tif (scopeSet2.has(scope)) break;\n\t\tscopeSet1.add(scope);\n\t\tfor (const variable of scope.variables) {\n\t\t\tnameSet.add(variable.name);\n\t\t}\n\t\tscope = scope.upper;\n\t}\n};\n\nconst getAllReferences = variable => {\n\tlet set = variable.references;\n\t// Look for inner scope variables too (like in class Foo { t() { Foo } })\n\tconst identifiers = new Set(variable.identifiers);\n\tfor (const scope of variable.scope.childScopes) {\n\t\tfor (const innerVar of scope.variables) {\n\t\t\tif (innerVar.identifiers.some(id => identifiers.has(id))) {\n\t\t\t\tset = set.concat(innerVar.references);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn set;\n};\n\nconst getPathInAst = (ast, node) => {\n\tif (ast === node) {\n\t\treturn [];\n\t}\n\n\tconst nr = node.range;\n\n\tconst enterNode = n => {\n\t\tif (!n) return undefined;\n\t\tconst r = n.range;\n\t\tif (r) {\n\t\t\tif (r[0] <= nr[0] && r[1] >= nr[1]) {\n\t\t\t\tconst path = getPathInAst(n, node);\n\t\t\t\tif (path) {\n\t\t\t\t\tpath.push(n);\n\t\t\t\t\treturn path;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t};\n\n\tif (Array.isArray(ast)) {\n\t\tfor (let i = 0; i < ast.length; i++) {\n\t\t\tconst enterResult = enterNode(ast[i]);\n\t\t\tif (enterResult !== undefined) return enterResult;\n\t\t}\n\t} else if (ast && typeof ast === \"object\") {\n\t\tconst keys = Object.keys(ast);\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tconst value = ast[keys[i]];\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tconst pathResult = getPathInAst(value, node);\n\t\t\t\tif (pathResult !== undefined) return pathResult;\n\t\t\t} else if (value && typeof value === \"object\") {\n\t\t\t\tconst enterResult = enterNode(value);\n\t\t\t\tif (enterResult !== undefined) return enterResult;\n\t\t\t}\n\t\t}\n\t}\n};\n\nconst TYPES = new Set([\"javascript\"]);\n\nclass ConcatenatedModule extends Module {\n\t/**\n\t * @param {Module} rootModule the root module of the concatenation\n\t * @param {Set<Module>} modules all modules in the concatenation (including the root module)\n\t * @param {RuntimeSpec} runtime the runtime\n\t * @param {Object=} associatedObjectForCache object for caching\n\t * @param {string | HashConstructor=} hashFunction hash function to use\n\t * @returns {ConcatenatedModule} the module\n\t */\n\tstatic create(\n\t\trootModule,\n\t\tmodules,\n\t\truntime,\n\t\tassociatedObjectForCache,\n\t\thashFunction = \"md4\"\n\t) {\n\t\tconst identifier = ConcatenatedModule._createIdentifier(\n\t\t\trootModule,\n\t\t\tmodules,\n\t\t\tassociatedObjectForCache,\n\t\t\thashFunction\n\t\t);\n\t\treturn new ConcatenatedModule({\n\t\t\tidentifier,\n\t\t\trootModule,\n\t\t\tmodules,\n\t\t\truntime\n\t\t});\n\t}\n\n\t/**\n\t * @param {Object} options options\n\t * @param {string} options.identifier the identifier of the module\n\t * @param {Module=} options.rootModule the root module of the concatenation\n\t * @param {RuntimeSpec} options.runtime the selected runtime\n\t * @param {Set<Module>=} options.modules all concatenated modules\n\t */\n\tconstructor({ identifier, rootModule, modules, runtime }) {\n\t\tsuper(\"javascript/esm\", null, rootModule && rootModule.layer);\n\n\t\t// Info from Factory\n\t\t/** @type {string} */\n\t\tthis._identifier = identifier;\n\t\t/** @type {Module} */\n\t\tthis.rootModule = rootModule;\n\t\t/** @type {Set<Module>} */\n\t\tthis._modules = modules;\n\t\tthis._runtime = runtime;\n\t\tthis.factoryMeta = rootModule && rootModule.factoryMeta;\n\t}\n\n\t/**\n\t * Assuming this module is in the cache. Update the (cached) module with\n\t * the fresh module from the factory. Usually updates internal references\n\t * and properties.\n\t * @param {Module} module fresh module\n\t * @returns {void}\n\t */\n\tupdateCacheModule(module) {\n\t\tthrow new Error(\"Must not be called\");\n\t}\n\n\t/**\n\t * @returns {Set<string>} types available (do not mutate)\n\t */\n\tgetSourceTypes() {\n\t\treturn TYPES;\n\t}\n\n\tget modules() {\n\t\treturn Array.from(this._modules);\n\t}\n\n\t/**\n\t * @returns {string} a unique identifier of the module\n\t */\n\tidentifier() {\n\t\treturn this._identifier;\n\t}\n\n\t/**\n\t * @param {RequestShortener} requestShortener the request shortener\n\t * @returns {string} a user readable identifier of the module\n\t */\n\treadableIdentifier(requestShortener) {\n\t\treturn (\n\t\t\tthis.rootModule.readableIdentifier(requestShortener) +\n\t\t\t` + ${this._modules.size - 1} modules`\n\t\t);\n\t}\n\n\t/**\n\t * @param {LibIdentOptions} options options\n\t * @returns {string | null} an identifier for library inclusion\n\t */\n\tlibIdent(options) {\n\t\treturn this.rootModule.libIdent(options);\n\t}\n\n\t/**\n\t * @returns {string | null} absolute path which should be used for condition matching (usually the resource path)\n\t */\n\tnameForCondition() {\n\t\treturn this.rootModule.nameForCondition();\n\t}\n\n\t/**\n\t * @param {ModuleGraph} moduleGraph the module graph\n\t * @returns {ConnectionState} how this module should be connected to referencing modules when consumed for side-effects only\n\t */\n\tgetSideEffectsConnectionState(moduleGraph) {\n\t\treturn this.rootModule.getSideEffectsConnectionState(moduleGraph);\n\t}\n\n\t/**\n\t * @param {WebpackOptions} options webpack options\n\t * @param {Compilation} compilation the compilation\n\t * @param {ResolverWithOptions} resolver the resolver\n\t * @param {InputFileSystem} fs the file system\n\t * @param {function(WebpackError=): void} callback callback function\n\t * @returns {void}\n\t */\n\tbuild(options, compilation, resolver, fs, callback) {\n\t\tconst { rootModule } = this;\n\t\tthis.buildInfo = {\n\t\t\tstrict: true,\n\t\t\tcacheable: true,\n\t\t\tmoduleArgument: rootModule.buildInfo.moduleArgument,\n\t\t\texportsArgument: rootModule.buildInfo.exportsArgument,\n\t\t\tfileDependencies: new LazySet(),\n\t\t\tcontextDependencies: new LazySet(),\n\t\t\tmissingDependencies: new LazySet(),\n\t\t\ttopLevelDeclarations: new Set(),\n\t\t\tassets: undefined\n\t\t};\n\t\tthis.buildMeta = rootModule.buildMeta;\n\t\tthis.clearDependenciesAndBlocks();\n\t\tthis.clearWarningsAndErrors();\n\n\t\tfor (const m of this._modules) {\n\t\t\t// populate cacheable\n\t\t\tif (!m.buildInfo.cacheable) {\n\t\t\t\tthis.buildInfo.cacheable = false;\n\t\t\t}\n\n\t\t\t// populate dependencies\n\t\t\tfor (const d of m.dependencies.filter(\n\t\t\t\tdep =>\n\t\t\t\t\t!(dep instanceof HarmonyImportDependency) ||\n\t\t\t\t\t!this._modules.has(compilation.moduleGraph.getModule(dep))\n\t\t\t)) {\n\t\t\t\tthis.dependencies.push(d);\n\t\t\t}\n\t\t\t// populate blocks\n\t\t\tfor (const d of m.blocks) {\n\t\t\t\tthis.blocks.push(d);\n\t\t\t}\n\n\t\t\t// populate warnings\n\t\t\tconst warnings = m.getWarnings();\n\t\t\tif (warnings !== undefined) {\n\t\t\t\tfor (const warning of warnings) {\n\t\t\t\t\tthis.addWarning(warning);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// populate errors\n\t\t\tconst errors = m.getErrors();\n\t\t\tif (errors !== undefined) {\n\t\t\t\tfor (const error of errors) {\n\t\t\t\t\tthis.addError(error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// populate topLevelDeclarations\n\t\t\tif (m.buildInfo.topLevelDeclarations) {\n\t\t\t\tconst topLevelDeclarations = this.buildInfo.topLevelDeclarations;\n\t\t\t\tif (topLevelDeclarations !== undefined) {\n\t\t\t\t\tfor (const decl of m.buildInfo.topLevelDeclarations) {\n\t\t\t\t\t\ttopLevelDeclarations.add(decl);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.buildInfo.topLevelDeclarations = undefined;\n\t\t\t}\n\n\t\t\t// populate assets\n\t\t\tif (m.buildInfo.assets) {\n\t\t\t\tif (this.buildInfo.assets === undefined) {\n\t\t\t\t\tthis.buildInfo.assets = Object.create(null);\n\t\t\t\t}\n\t\t\t\tObject.assign(this.buildInfo.assets, m.buildInfo.assets);\n\t\t\t}\n\t\t\tif (m.buildInfo.assetsInfo) {\n\t\t\t\tif (this.buildInfo.assetsInfo === undefined) {\n\t\t\t\t\tthis.buildInfo.assetsInfo = new Map();\n\t\t\t\t}\n\t\t\t\tfor (const [key, value] of m.buildInfo.assetsInfo) {\n\t\t\t\t\tthis.buildInfo.assetsInfo.set(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcallback();\n\t}\n\n\t/**\n\t * @param {string=} type the source type for which the size should be estimated\n\t * @returns {number} the estimated size of the module (must be non-zero)\n\t */\n\tsize(type) {\n\t\t// Guess size from embedded modules\n\t\tlet size = 0;\n\t\tfor (const module of this._modules) {\n\t\t\tsize += module.size(type);\n\t\t}\n\t\treturn size;\n\t}\n\n\t/**\n\t * @private\n\t * @param {Module} rootModule the root of the concatenation\n\t * @param {Set<Module>} modulesSet a set of modules which should be concatenated\n\t * @param {RuntimeSpec} runtime for this runtime\n\t * @param {ModuleGraph} moduleGraph the module graph\n\t * @returns {ConcatenationEntry[]} concatenation list\n\t */\n\t_createConcatenationList(rootModule, modulesSet, runtime, moduleGraph) {\n\t\t/** @type {ConcatenationEntry[]} */\n\t\tconst list = [];\n\t\t/** @type {Map<Module, RuntimeSpec | true>} */\n\t\tconst existingEntries = new Map();\n\n\t\t/**\n\t\t * @param {Module} module a module\n\t\t * @returns {Iterable<{ connection: ModuleGraphConnection, runtimeCondition: RuntimeSpec | true }>} imported modules in order\n\t\t */\n\t\tconst getConcatenatedImports = module => {\n\t\t\tlet connections = Array.from(moduleGraph.getOutgoingConnections(module));\n\t\t\tif (module === rootModule) {\n\t\t\t\tfor (const c of moduleGraph.getOutgoingConnections(this))\n\t\t\t\t\tconnections.push(c);\n\t\t\t}\n\t\t\t/**\n\t\t\t * @type {Array<{ connection: ModuleGraphConnection, sourceOrder: number, rangeStart: number }>}\n\t\t\t */\n\t\t\tconst references = connections\n\t\t\t\t.filter(connection => {\n\t\t\t\t\tif (!(connection.dependency instanceof HarmonyImportDependency))\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn (\n\t\t\t\t\t\tconnection &&\n\t\t\t\t\t\tconnection.resolvedOriginModule === module &&\n\t\t\t\t\t\tconnection.module &&\n\t\t\t\t\t\tconnection.isTargetActive(runtime)\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.map(connection => {\n\t\t\t\t\tconst dep = /** @type {HarmonyImportDependency} */ (\n\t\t\t\t\t\tconnection.dependency\n\t\t\t\t\t);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tconnection,\n\t\t\t\t\t\tsourceOrder: dep.sourceOrder,\n\t\t\t\t\t\trangeStart: dep.range && dep.range[0]\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t/**\n\t\t\t * bySourceOrder\n\t\t\t * @example\n\t\t\t * import a from \"a\"; // sourceOrder=1\n\t\t\t * import b from \"b\"; // sourceOrder=2\n\t\t\t *\n\t\t\t * byRangeStart\n\t\t\t * @example\n\t\t\t * import {a, b} from \"a\"; // sourceOrder=1\n\t\t\t * a.a(); // first range\n\t\t\t * b.b(); // second range\n\t\t\t *\n\t\t\t * If there is no reexport, we have the same source.\n\t\t\t * If there is reexport, but module has side effects, this will lead to reexport module only.\n\t\t\t * If there is side-effects-free reexport, we can get simple deterministic result with range start comparison.\n\t\t\t */\n\t\t\treferences.sort(concatComparators(bySourceOrder, byRangeStart));\n\t\t\t/** @type {Map<Module, { connection: ModuleGraphConnection, runtimeCondition: RuntimeSpec | true }>} */\n\t\t\tconst referencesMap = new Map();\n\t\t\tfor (const { connection } of references) {\n\t\t\t\tconst runtimeCondition = filterRuntime(runtime, r =>\n\t\t\t\t\tconnection.isTargetActive(r)\n\t\t\t\t);\n\t\t\t\tif (runtimeCondition === false) continue;\n\t\t\t\tconst module = connection.module;\n\t\t\t\tconst entry = referencesMap.get(module);\n\t\t\t\tif (entry === undefined) {\n\t\t\t\t\treferencesMap.set(module, { connection, runtimeCondition });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tentry.runtimeCondition = mergeRuntimeConditionNonFalse(\n\t\t\t\t\tentry.runtimeCondition,\n\t\t\t\t\truntimeCondition,\n\t\t\t\t\truntime\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn referencesMap.values();\n\t\t};\n\n\t\t/**\n\t\t * @param {ModuleGraphConnection} connection graph connection\n\t\t * @param {RuntimeSpec | true} runtimeCondition runtime condition\n\t\t * @returns {void}\n\t\t */\n\t\tconst enterModule = (connection, runtimeCondition) => {\n\t\t\tconst module = connection.module;\n\t\t\tif (!module) return;\n\t\t\tconst existingEntry = existingEntries.get(module);\n\t\t\tif (existingEntry === true) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (modulesSet.has(module)) {\n\t\t\t\texistingEntries.set(module, true);\n\t\t\t\tif (runtimeCondition !== true) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Cannot runtime-conditional concatenate a module (${module.identifier()} in ${this.rootModule.identifier()}, ${runtimeConditionToString(\n\t\t\t\t\t\t\truntimeCondition\n\t\t\t\t\t\t)}). This should not happen.`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tconst imports = getConcatenatedImports(module);\n\t\t\t\tfor (const { connection, runtimeCondition } of imports)\n\t\t\t\t\tenterModule(connection, runtimeCondition);\n\t\t\t\tlist.push({\n\t\t\t\t\ttype: \"concatenated\",\n\t\t\t\t\tmodule: connection.module,\n\t\t\t\t\truntimeCondition\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (existingEntry !== undefined) {\n\t\t\t\t\tconst reducedRuntimeCondition = subtractRuntimeCondition(\n\t\t\t\t\t\truntimeCondition,\n\t\t\t\t\t\texistingEntry,\n\t\t\t\t\t\truntime\n\t\t\t\t\t);\n\t\t\t\t\tif (reducedRuntimeCondition === false) return;\n\t\t\t\t\truntimeCondition = reducedRuntimeCondition;\n\t\t\t\t\texistingEntries.set(\n\t\t\t\t\t\tconnection.module,\n\t\t\t\t\t\tmergeRuntimeConditionNonFalse(\n\t\t\t\t\t\t\texistingEntry,\n\t\t\t\t\t\t\truntimeCondition,\n\t\t\t\t\t\t\truntime\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\texistingEntries.set(connection.module, runtimeCondition);\n\t\t\t\t}\n\t\t\t\tif (list.length > 0) {\n\t\t\t\t\tconst lastItem = list[list.length - 1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tlastItem.type === \"external\" &&\n\t\t\t\t\t\tlastItem.module === connection.module\n\t\t\t\t\t) {\n\t\t\t\t\t\tlastItem.runtimeCondition = mergeRuntimeCondition(\n\t\t\t\t\t\t\tlastItem.runtimeCondition,\n\t\t\t\t\t\t\truntimeCondition,\n\t\t\t\t\t\t\truntime\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlist.push({\n\t\t\t\t\ttype: \"external\",\n\t\t\t\t\tget module() {\n\t\t\t\t\t\t// We need to use a getter here, because the module in the dependency\n\t\t\t\t\t\t// could be replaced by some other process (i. e. also replaced with a\n\t\t\t\t\t\t// concatenated module)\n\t\t\t\t\t\treturn connection.module;\n\t\t\t\t\t},\n\t\t\t\t\truntimeCondition\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\texistingEntries.set(rootModule, true);\n\t\tconst imports = getConcatenatedImports(rootModule);\n\t\tfor (const { connection, runtimeCondition } of imports)\n\t\t\tenterModule(connection, runtimeCondition);\n\t\tlist.push({\n\t\t\ttype: \"concatenated\",\n\t\t\tmodule: rootModule,\n\t\t\truntimeCondition: true\n\t\t});\n\n\t\treturn list;\n\t}\n\n\t/**\n\t * @param {Module} rootModule the root module of the concatenation\n\t * @param {Set<Module>} modules all modules in the concatenation (including the root module)\n\t * @param {Object=} associatedObjectForCache object for caching\n\t * @param {string | HashConstructor=} hashFunction hash function to use\n\t * @returns {string} the identifier\n\t */\n\tstatic _createIdentifier(\n\t\trootModule,\n\t\tmodules,\n\t\tassociatedObjectForCache,\n\t\thashFunction = \"md4\"\n\t) {\n\t\tconst cachedMakePathsRelative = makePathsRelative.bindContextCache(\n\t\t\trootModule.context,\n\t\t\tassociatedObjectForCache\n\t\t);\n\t\tlet identifiers = [];\n\t\tfor (const module of modules) {\n\t\t\tidentifiers.push(cachedMakePathsRelative(module.identifier()));\n\t\t}\n\t\tidentifiers.sort();\n\t\tconst hash = createHash(hashFunction);\n\t\thash.update(identifiers.join(\" \"));\n\t\treturn rootModule.identifier() + \"|\" + hash.digest(\"hex\");\n\t}\n\n\t/**\n\t * @param {LazySet<string>} fileDependencies set where file dependencies are added to\n\t * @param {LazySet<string>} contextDependencies set where context dependencies are added to\n\t * @param {LazySet<string>} missingDependencies set where missing dependencies are added to\n\t * @param {LazySet<string>} buildDependencies set where build dependencies are added to\n\t */\n\taddCacheDependencies(\n\t\tfileDependencies,\n\t\tcontextDependencies,\n\t\tmissingDependencies,\n\t\tbuildDependencies\n\t) {\n\t\tfor (const module of this._modules) {\n\t\t\tmodule.addCacheDependencies(\n\t\t\t\tfileDependencies,\n\t\t\t\tcontextDependencies,\n\t\t\t\tmissingDependencies,\n\t\t\t\tbuildDependencies\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @param {CodeGenerationContext} context context for code generation\n\t * @returns {CodeGenerationResult} result\n\t */\n\tcodeGeneration({\n\t\tdependencyTemplates,\n\t\truntimeTemplate,\n\t\tmoduleGraph,\n\t\tchunkGraph,\n\t\truntime: generationRuntime,\n\t\tcodeGenerationResults\n\t}) {\n\t\t/** @type {Set<string>} */\n\t\tconst runtimeRequirements = new Set();\n\t\tconst runtime = intersectRuntime(generationRuntime, this._runtime);\n\n\t\tconst requestShortener = runtimeTemplate.requestShortener;\n\t\t// Meta info for each module\n\t\tconst [modulesWithInfo, moduleToInfoMap] = this._getModulesWithInfo(\n\t\t\tmoduleGraph,\n\t\t\truntime\n\t\t);\n\n\t\t// Set with modules that need a generated namespace object\n\t\t/** @type {Set<ConcatenatedModuleInfo>} */\n\t\tconst neededNamespaceObjects = new Set();\n\n\t\t// Generate source code and analyse scopes\n\t\t// Prepare a ReplaceSource for the final source\n\t\tfor (const info of moduleToInfoMap.values()) {\n\t\t\tthis._analyseModule(\n\t\t\t\tmoduleToInfoMap,\n\t\t\t\tinfo,\n\t\t\t\tdependencyTemplates,\n\t\t\t\truntimeTemplate,\n\t\t\t\tmoduleGraph,\n\t\t\t\tchunkGraph,\n\t\t\t\truntime,\n\t\t\t\tcodeGenerationResults\n\t\t\t);\n\t\t}\n\n\t\t// List of all used names to avoid conflicts\n\t\tconst allUsedNames = new Set(RESERVED_NAMES);\n\t\t// Updated Top level declarations are created by renaming\n\t\tconst topLevelDeclarations = new Set();\n\n\t\t// List of additional names in scope for module references\n\t\t/** @type {Map<string, { usedNames: Set<string>, alreadyCheckedScopes: Set<TODO> }>} */\n\t\tconst usedNamesInScopeInfo = new Map();\n\t\t/**\n\t\t * @param {string} module module identifier\n\t\t * @param {string} id export id\n\t\t * @returns {{ usedNames: Set<string>, alreadyCheckedScopes: Set<TODO> }} info\n\t\t */\n\t\tconst getUsedNamesInScopeInfo = (module, id) => {\n\t\t\tconst key = `${module}-${id}`;\n\t\t\tlet info = usedNamesInScopeInfo.get(key);\n\t\t\tif (info === undefined) {\n\t\t\t\tinfo = {\n\t\t\t\t\tusedNames: new Set(),\n\t\t\t\t\talreadyCheckedScopes: new Set()\n\t\t\t\t};\n\t\t\t\tusedNamesInScopeInfo.set(key, info);\n\t\t\t}\n\t\t\treturn info;\n\t\t};\n\n\t\t// Set of already checked scopes\n\t\tconst ignoredScopes = new Set();\n\n\t\t// get all global names\n\t\tfor (const info of modulesWithInfo) {\n\t\t\tif (info.type === \"concatenated\") {\n\t\t\t\t// ignore symbols from moduleScope\n\t\t\t\tif (info.moduleScope) {\n\t\t\t\t\tignoredScopes.add(info.moduleScope);\n\t\t\t\t}\n\n\t\t\t\t// The super class expression in class scopes behaves weird\n\t\t\t\t// We get ranges of all super class expressions to make\n\t\t\t\t// renaming to work correctly\n\t\t\t\tconst superClassCache = new WeakMap();\n\t\t\t\tconst getSuperClassExpressions = scope => {\n\t\t\t\t\tconst cacheEntry = superClassCache.get(scope);\n\t\t\t\t\tif (cacheEntry !== undefined) return cacheEntry;\n\t\t\t\t\tconst superClassExpressions = [];\n\t\t\t\t\tfor (const childScope of scope.childScopes) {\n\t\t\t\t\t\tif (childScope.type !== \"class\") continue;\n\t\t\t\t\t\tconst block = childScope.block;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(block.type === \"ClassDeclaration\" ||\n\t\t\t\t\t\t\t\tblock.type === \"ClassExpression\") &&\n\t\t\t\t\t\t\tblock.superClass\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tsuperClassExpressions.push({\n\t\t\t\t\t\t\t\trange: block.superClass.range,\n\t\t\t\t\t\t\t\tvariables: childScope.variables\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tsuperClassCache.set(scope, superClassExpressions);\n\t\t\t\t\treturn superClassExpressions;\n\t\t\t\t};\n\n\t\t\t\t// add global symbols\n\t\t\t\tif (info.globalScope) {\n\t\t\t\t\tfor (const reference of info.globalScope.through) {\n\t\t\t\t\t\tconst name = reference.identifier.name;\n\t\t\t\t\t\tif (ConcatenationScope.isModuleReference(name)) {\n\t\t\t\t\t\t\tconst match = ConcatenationScope.matchModuleReference(name);\n\t\t\t\t\t\t\tif (!match) continue;\n\t\t\t\t\t\t\tconst referencedInfo = modulesWithInfo[match.index];\n\t\t\t\t\t\t\tif (referencedInfo.type === \"reference\")\n\t\t\t\t\t\t\t\tthrow new Error(\"Module reference can't point to a reference\");\n\t\t\t\t\t\t\tconst binding = getFinalBinding(\n\t\t\t\t\t\t\t\tmoduleGraph,\n\t\t\t\t\t\t\t\treferencedInfo,\n\t\t\t\t\t\t\t\tmatch.ids,\n\t\t\t\t\t\t\t\tmoduleToInfoMap,\n\t\t\t\t\t\t\t\truntime,\n\t\t\t\t\t\t\t\trequestShortener,\n\t\t\t\t\t\t\t\truntimeTemplate,\n\t\t\t\t\t\t\t\tneededNamespaceObjects,\n\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\tinfo.module.buildMeta.strictHarmonyModule,\n\t\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (!binding.ids) continue;\n\t\t\t\t\t\t\tconst { usedNames, alreadyCheckedScopes } =\n\t\t\t\t\t\t\t\tgetUsedNamesInScopeInfo(\n\t\t\t\t\t\t\t\t\tbinding.info.module.identifier(),\n\t\t\t\t\t\t\t\t\t\"name\" in binding ? binding.name : \"\"\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tfor (const expr of getSuperClassExpressions(reference.from)) {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\texpr.range[0] <= reference.identifier.range[0] &&\n\t\t\t\t\t\t\t\t\texpr.range[1] >= reference.identifier.range[1]\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tfor (const variable of expr.variables) {\n\t\t\t\t\t\t\t\t\t\tusedNames.add(variable.name);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\taddScopeSymbols(\n\t\t\t\t\t\t\t\treference.from,\n\t\t\t\t\t\t\t\tusedNames,\n\t\t\t\t\t\t\t\talreadyCheckedScopes,\n\t\t\t\t\t\t\t\tignoredScopes\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tallUsedNames.add(name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// generate names for symbols\n\t\tfor (const info of moduleToInfoMap.values()) {\n\t\t\tconst { usedNames: namespaceObjectUsedNames } = getUsedNamesInScopeInfo(\n\t\t\t\tinfo.module.identifier(),\n\t\t\t\t\"\"\n\t\t\t);\n\t\t\tswitch (info.type) {\n\t\t\t\tcase \"concatenated\": {\n\t\t\t\t\tfor (const variable of info.moduleScope.variables) {\n\t\t\t\t\t\tconst name = variable.name;\n\t\t\t\t\t\tconst { usedNames, alreadyCheckedScopes } = getUsedNamesInScopeInfo(\n\t\t\t\t\t\t\tinfo.module.identifier(),\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (allUsedNames.has(name) || usedNames.has(name)) {\n\t\t\t\t\t\t\tconst references = getAllReferences(variable);\n\t\t\t\t\t\t\tfor (const ref of references) {\n\t\t\t\t\t\t\t\taddScopeSymbols(\n\t\t\t\t\t\t\t\t\tref.from,\n\t\t\t\t\t\t\t\t\tusedNames,\n\t\t\t\t\t\t\t\t\talreadyCheckedScopes,\n\t\t\t\t\t\t\t\t\tignoredScopes\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst newName = this.findNewName(\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\tallUsedNames,\n\t\t\t\t\t\t\t\tusedNames,\n\t\t\t\t\t\t\t\tinfo.module.readableIdentifier(requestShortener)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tallUsedNames.add(newName);\n\t\t\t\t\t\t\tinfo.internalNames.set(name, newName);\n\t\t\t\t\t\t\ttopLevelDeclarations.add(newName);\n\t\t\t\t\t\t\tconst source = info.source;\n\t\t\t\t\t\t\tconst allIdentifiers = new Set(\n\t\t\t\t\t\t\t\treferences.map(r => r.identifier).concat(variable.identifiers)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tfor (const identifier of allIdentifiers) {\n\t\t\t\t\t\t\t\tconst r = identifier.range;\n\t\t\t\t\t\t\t\tconst path = getPathInAst(info.ast, identifier);\n\t\t\t\t\t\t\t\tif (path && path.length > 1) {\n\t\t\t\t\t\t\t\t\tconst maybeProperty =\n\t\t\t\t\t\t\t\t\t\tpath[1].type === \"AssignmentPattern\" &&\n\t\t\t\t\t\t\t\t\t\tpath[1].left === path[0]\n\t\t\t\t\t\t\t\t\t\t\t? path[2]\n\t\t\t\t\t\t\t\t\t\t\t: path[1];\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tmaybeProperty.type === \"Property\" &&\n\t\t\t\t\t\t\t\t\t\tmaybeProperty.shorthand\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tsource.insert(r[1], `: ${newName}`);\n\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tsource.replace(r[0], r[1] - 1, newName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tallUsedNames.add(name);\n\t\t\t\t\t\t\tinfo.internalNames.set(name, name);\n\t\t\t\t\t\t\ttopLevelDeclarations.add(name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlet namespaceObjectName;\n\t\t\t\t\tif (info.namespaceExportSymbol) {\n\t\t\t\t\t\tnamespaceObjectName = info.internalNames.get(\n\t\t\t\t\t\t\tinfo.namespaceExportSymbol\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnamespaceObjectName = this.findNewName(\n\t\t\t\t\t\t\t\"namespaceObject\",\n\t\t\t\t\t\t\tallUsedNames,\n\t\t\t\t\t\t\tnamespaceObjectUsedNames,\n\t\t\t\t\t\t\tinfo.module.readableIdentifier(requestShortener)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tallUsedNames.add(namespaceObjectName);\n\t\t\t\t\t}\n\t\t\t\t\tinfo.namespaceObjectName = namespaceObjectName;\n\t\t\t\t\ttopLevelDeclarations.add(namespaceObjectName);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"external\": {\n\t\t\t\t\tconst externalName = this.findNewName(\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\tallUsedNames,\n\t\t\t\t\t\tnamespaceObjectUsedNames,\n\t\t\t\t\t\tinfo.module.readableIdentifier(requestShortener)\n\t\t\t\t\t);\n\t\t\t\t\tallUsedNames.add(externalName);\n\t\t\t\t\tinfo.name = externalName;\n\t\t\t\t\ttopLevelDeclarations.add(externalName);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (info.module.buildMeta.exportsType !== \"namespace\") {\n\t\t\t\tconst externalNameInterop = this.findNewName(\n\t\t\t\t\t\"namespaceObject\",\n\t\t\t\t\tallUsedNames,\n\t\t\t\t\tnamespaceObjectUsedNames,\n\t\t\t\t\tinfo.module.readableIdentifier(requestShortener)\n\t\t\t\t);\n\t\t\t\tallUsedNames.add(externalNameInterop);\n\t\t\t\tinfo.interopNamespaceObjectName = externalNameInterop;\n\t\t\t\ttopLevelDeclarations.add(externalNameInterop);\n\t\t\t}\n\t\t\tif (\n\t\t\t\tinfo.module.buildMeta.exportsType === \"default\" &&\n\t\t\t\tinfo.module.buildMeta.defaultObject !== \"redirect\"\n\t\t\t) {\n\t\t\t\tconst externalNameInterop = this.findNewName(\n\t\t\t\t\t\"namespaceObject2\",\n\t\t\t\t\tallUsedNames,\n\t\t\t\t\tnamespaceObjectUsedNames,\n\t\t\t\t\tinfo.module.readableIdentifier(requestShortener)\n\t\t\t\t);\n\t\t\t\tallUsedNames.add(externalNameInterop);\n\t\t\t\tinfo.interopNamespaceObject2Name = externalNameInterop;\n\t\t\t\ttopLevelDeclarations.add(externalNameInterop);\n\t\t\t}\n\t\t\tif (\n\t\t\t\tinfo.module.buildMeta.exportsType === \"dynamic\" ||\n\t\t\t\t!info.module.buildMeta.exportsType\n\t\t\t) {\n\t\t\t\tconst externalNameInterop = this.findNewName(\n\t\t\t\t\t\"default\",\n\t\t\t\t\tallUsedNames,\n\t\t\t\t\tnamespaceObjectUsedNames,\n\t\t\t\t\tinfo.module.readableIdentifier(requestShortener)\n\t\t\t\t);\n\t\t\t\tallUsedNames.add(externalNameInterop);\n\t\t\t\tinfo.interopDefaultAccessName = externalNameInterop;\n\t\t\t\ttopLevelDeclarations.add(externalNameInterop);\n\t\t\t}\n\t\t}\n\n\t\t// Find and replace references to modules\n\t\tfor (const info of moduleToInfoMap.values()) {\n\t\t\tif (info.type === \"concatenated\") {\n\t\t\t\tfor (const reference of info.globalScope.through) {\n\t\t\t\t\tconst name = reference.identifier.name;\n\t\t\t\t\tconst match = ConcatenationScope.matchModuleReference(name);\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\tconst referencedInfo = modulesWithInfo[match.index];\n\t\t\t\t\t\tif (referencedInfo.type === \"reference\")\n\t\t\t\t\t\t\tthrow new Error(\"Module reference can't point to a reference\");\n\t\t\t\t\t\tconst finalName = getFinalName(\n\t\t\t\t\t\t\tmoduleGraph,\n\t\t\t\t\t\t\treferencedInfo,\n\t\t\t\t\t\t\tmatch.ids,\n\t\t\t\t\t\t\tmoduleToInfoMap,\n\t\t\t\t\t\t\truntime,\n\t\t\t\t\t\t\trequestShortener,\n\t\t\t\t\t\t\truntimeTemplate,\n\t\t\t\t\t\t\tneededNamespaceObjects,\n\t\t\t\t\t\t\tmatch.call,\n\t\t\t\t\t\t\t!match.directImport,\n\t\t\t\t\t\t\tinfo.module.buildMeta.strictHarmonyModule,\n\t\t\t\t\t\t\tmatch.asiSafe\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst r = reference.identifier.range;\n\t\t\t\t\t\tconst source = info.source;\n\t\t\t\t\t\t// range is extended by 2 chars to cover the appended \"._\"\n\t\t\t\t\t\tsource.replace(r[0], r[1] + 1, finalName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Map with all root exposed used exports\n\t\t/** @type {Map<string, function(RequestShortener): string>} */\n\t\tconst exportsMap = new Map();\n\n\t\t// Set with all root exposed unused exports\n\t\t/** @type {Set<string>} */\n\t\tconst unusedExports = new Set();\n\n\t\tconst rootInfo = /** @type {ConcatenatedModuleInfo} */ (\n\t\t\tmoduleToInfoMap.get(this.rootModule)\n\t\t);\n\t\tconst strictHarmonyModule = rootInfo.module.buildMeta.strictHarmonyModule;\n\t\tconst exportsInfo = moduleGraph.getExportsInfo(rootInfo.module);\n\t\tfor (const exportInfo of exportsInfo.orderedExports) {\n\t\t\tconst name = exportInfo.name;\n\t\t\tif (exportInfo.provided === false) continue;\n\t\t\tconst used = exportInfo.getUsedName(undefined, runtime);\n\t\t\tif (!used) {\n\t\t\t\tunusedExports.add(name);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\texportsMap.set(used, requestShortener => {\n\t\t\t\ttry {\n\t\t\t\t\tconst finalName = getFinalName(\n\t\t\t\t\t\tmoduleGraph,\n\t\t\t\t\t\trootInfo,\n\t\t\t\t\t\t[name],\n\t\t\t\t\t\tmoduleToInfoMap,\n\t\t\t\t\t\truntime,\n\t\t\t\t\t\trequestShortener,\n\t\t\t\t\t\truntimeTemplate,\n\t\t\t\t\t\tneededNamespaceObjects,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tstrictHarmonyModule,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t\treturn `/* ${\n\t\t\t\t\t\texportInfo.isReexport() ? \"reexport\" : \"binding\"\n\t\t\t\t\t} */ ${finalName}`;\n\t\t\t\t} catch (e) {\n\t\t\t\t\te.message += `\\nwhile generating the root export '${name}' (used name: '${used}')`;\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst result = new ConcatSource();\n\n\t\t// add harmony compatibility flag (must be first because of possible circular dependencies)\n\t\tif (\n\t\t\tmoduleGraph.getExportsInfo(this).otherExportsInfo.getUsed(runtime) !==\n\t\t\tUsageState.Unused\n\t\t) {\n\t\t\tresult.add(`// ESM COMPAT FLAG\\n`);\n\t\t\tresult.add(\n\t\t\t\truntimeTemplate.defineEsModuleFlagStatement({\n\t\t\t\t\texportsArgument: this.exportsArgument,\n\t\t\t\t\truntimeRequirements\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\n\t\t// define exports\n\t\tif (exportsMap.size > 0) {\n\t\t\truntimeRequirements.add(RuntimeGlobals.exports);\n\t\t\truntimeRequirements.add(RuntimeGlobals.definePropertyGetters);\n\t\t\tconst definitions = [];\n\t\t\tfor (const [key, value] of exportsMap) {\n\t\t\t\tdefinitions.push(\n\t\t\t\t\t`\\n  ${JSON.stringify(key)}: ${runtimeTemplate.returningFunction(\n\t\t\t\t\t\tvalue(requestShortener)\n\t\t\t\t\t)}`\n\t\t\t\t);\n\t\t\t}\n\t\t\tresult.add(`\\n// EXPORTS\\n`);\n\t\t\tresult.add(\n\t\t\t\t`${RuntimeGlobals.definePropertyGetters}(${\n\t\t\t\t\tthis.exportsArgument\n\t\t\t\t}, {${definitions.join(\",\")}\\n});\\n`\n\t\t\t);\n\t\t}\n\n\t\t// list unused exports\n\t\tif (unusedExports.size > 0) {\n\t\t\tresult.add(\n\t\t\t\t`\\n// UNUSED EXPORTS: ${joinIterableWithComma(unusedExports)}\\n`\n\t\t\t);\n\t\t}\n\n\t\t// generate namespace objects\n\t\tconst namespaceObjectSources = new Map();\n\t\tfor (const info of neededNamespaceObjects) {\n\t\t\tif (info.namespaceExportSymbol) continue;\n\t\t\tconst nsObj = [];\n\t\t\tconst exportsInfo = moduleGraph.getExportsInfo(info.module);\n\t\t\tfor (const exportInfo of exportsInfo.orderedExports) {\n\t\t\t\tif (exportInfo.provided === false) continue;\n\t\t\t\tconst usedName = exportInfo.getUsedName(undefined, runtime);\n\t\t\t\tif (usedName) {\n\t\t\t\t\tconst finalName = getFinalName(\n\t\t\t\t\t\tmoduleGraph,\n\t\t\t\t\t\tinfo,\n\t\t\t\t\t\t[exportInfo.name],\n\t\t\t\t\t\tmoduleToInfoMap,\n\t\t\t\t\t\truntime,\n\t\t\t\t\t\trequestShortener,\n\t\t\t\t\t\truntimeTemplate,\n\t\t\t\t\t\tneededNamespaceObjects,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tinfo.module.buildMeta.strictHarmonyModule,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t\tnsObj.push(\n\t\t\t\t\t\t`\\n  ${JSON.stringify(\n\t\t\t\t\t\t\tusedName\n\t\t\t\t\t\t)}: ${runtimeTemplate.returningFunction(finalName)}`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst name = info.namespaceObjectName;\n\t\t\tconst defineGetters =\n\t\t\t\tnsObj.length > 0\n\t\t\t\t\t? `${RuntimeGlobals.definePropertyGetters}(${name}, {${nsObj.join(\n\t\t\t\t\t\t\t\",\"\n\t\t\t\t\t  )}\\n});\\n`\n\t\t\t\t\t: \"\";\n\t\t\tif (nsObj.length > 0)\n\t\t\t\truntimeRequirements.add(RuntimeGlobals.definePropertyGetters);\n\t\t\tnamespaceObjectSources.set(\n\t\t\t\tinfo,\n\t\t\t\t`\n// NAMESPACE OBJECT: ${info.module.readableIdentifier(requestShortener)}\nvar ${name} = {};\n${RuntimeGlobals.makeNamespaceObject}(${name});\n${defineGetters}`\n\t\t\t);\n\t\t\truntimeRequirements.add(RuntimeGlobals.makeNamespaceObject);\n\t\t}\n\n\t\t// define required namespace objects (must be before evaluation modules)\n\t\tfor (const info of modulesWithInfo) {\n\t\t\tif (info.type === \"concatenated\") {\n\t\t\t\tconst source = namespaceObjectSources.get(info);\n\t\t\t\tif (!source) continue;\n\t\t\t\tresult.add(source);\n\t\t\t}\n\t\t}\n\n\t\tconst chunkInitFragments = [];\n\n\t\t// evaluate modules in order\n\t\tfor (const rawInfo of modulesWithInfo) {\n\t\t\tlet name;\n\t\t\tlet isConditional = false;\n\t\t\tconst info = rawInfo.type === \"reference\" ? rawInfo.target : rawInfo;\n\t\t\tswitch (info.type) {\n\t\t\t\tcase \"concatenated\": {\n\t\t\t\t\tresult.add(\n\t\t\t\t\t\t`\\n;// CONCATENATED MODULE: ${info.module.readableIdentifier(\n\t\t\t\t\t\t\trequestShortener\n\t\t\t\t\t\t)}\\n`\n\t\t\t\t\t);\n\t\t\t\t\tresult.add(info.source);\n\t\t\t\t\tif (info.chunkInitFragments) {\n\t\t\t\t\t\tfor (const f of info.chunkInitFragments) chunkInitFragments.push(f);\n\t\t\t\t\t}\n\t\t\t\t\tif (info.runtimeRequirements) {\n\t\t\t\t\t\tfor (const r of info.runtimeRequirements) {\n\t\t\t\t\t\t\truntimeRequirements.add(r);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tname = info.namespaceObjectName;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"external\": {\n\t\t\t\t\tresult.add(\n\t\t\t\t\t\t`\\n// EXTERNAL MODULE: ${info.module.readableIdentifier(\n\t\t\t\t\t\t\trequestShortener\n\t\t\t\t\t\t)}\\n`\n\t\t\t\t\t);\n\t\t\t\t\truntimeRequirements.add(RuntimeGlobals.require);\n\t\t\t\t\tconst { runtimeCondition } =\n\t\t\t\t\t\t/** @type {ExternalModuleInfo | ReferenceToModuleInfo} */ (rawInfo);\n\t\t\t\t\tconst condition = runtimeTemplate.runtimeConditionExpression({\n\t\t\t\t\t\tchunkGraph,\n\t\t\t\t\t\truntimeCondition,\n\t\t\t\t\t\truntime,\n\t\t\t\t\t\truntimeRequirements\n\t\t\t\t\t});\n\t\t\t\t\tif (condition !== \"true\") {\n\t\t\t\t\t\tisConditional = true;\n\t\t\t\t\t\tresult.add(`if (${condition}) {\\n`);\n\t\t\t\t\t}\n\t\t\t\t\tresult.add(\n\t\t\t\t\t\t`var ${info.name} = __webpack_require__(${JSON.stringify(\n\t\t\t\t\t\t\tchunkGraph.getModuleId(info.module)\n\t\t\t\t\t\t)});`\n\t\t\t\t\t);\n\t\t\t\t\tname = info.name;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\t// @ts-expect-error never is expected here\n\t\t\t\t\tthrow new Error(`Unsupported concatenation entry type ${info.type}`);\n\t\t\t}\n\t\t\tif (info.interopNamespaceObjectUsed) {\n\t\t\t\truntimeRequirements.add(RuntimeGlobals.createFakeNamespaceObject);\n\t\t\t\tresult.add(\n\t\t\t\t\t`\\nvar ${info.interopNamespaceObjectName} = /*#__PURE__*/${RuntimeGlobals.createFakeNamespaceObject}(${name}, 2);`\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (info.interopNamespaceObject2Used) {\n\t\t\t\truntimeRequirements.add(RuntimeGlobals.createFakeNamespaceObject);\n\t\t\t\tresult.add(\n\t\t\t\t\t`\\nvar ${info.interopNamespaceObject2Name} = /*#__PURE__*/${RuntimeGlobals.createFakeNamespaceObject}(${name});`\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (info.interopDefaultAccessUsed) {\n\t\t\t\truntimeRequirements.add(RuntimeGlobals.compatGetDefaultExport);\n\t\t\t\tresult.add(\n\t\t\t\t\t`\\nvar ${info.interopDefaultAccessName} = /*#__PURE__*/${RuntimeGlobals.compatGetDefaultExport}(${name});`\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (isConditional) {\n\t\t\t\tresult.add(\"\\n}\");\n\t\t\t}\n\t\t}\n\n\t\tconst data = new Map();\n\t\tif (chunkInitFragments.length > 0)\n\t\t\tdata.set(\"chunkInitFragments\", chunkInitFragments);\n\t\tdata.set(\"topLevelDeclarations\", topLevelDeclarations);\n\n\t\t/** @type {CodeGenerationResult} */\n\t\tconst resultEntry = {\n\t\t\tsources: new Map([[\"javascript\", new CachedSource(result)]]),\n\t\t\tdata,\n\t\t\truntimeRequirements\n\t\t};\n\n\t\treturn resultEntry;\n\t}\n\n\t/**\n\t * @param {Map<Module, ModuleInfo>} modulesMap modulesMap\n\t * @param {ModuleInfo} info info\n\t * @param {DependencyTemplates} dependencyTemplates dependencyTemplates\n\t * @param {RuntimeTemplate} runtimeTemplate runtimeTemplate\n\t * @param {ModuleGraph} moduleGraph moduleGraph\n\t * @param {ChunkGraph} chunkGraph chunkGraph\n\t * @param {RuntimeSpec} runtime runtime\n\t * @param {CodeGenerationResults} codeGenerationResults codeGenerationResults\n\t */\n\t_analyseModule(\n\t\tmodulesMap,\n\t\tinfo,\n\t\tdependencyTemplates,\n\t\truntimeTemplate,\n\t\tmoduleGraph,\n\t\tchunkGraph,\n\t\truntime,\n\t\tcodeGenerationResults\n\t) {\n\t\tif (info.type === \"concatenated\") {\n\t\t\tconst m = info.module;\n\t\t\ttry {\n\t\t\t\t// Create a concatenation scope to track and capture information\n\t\t\t\tconst concatenationScope = new ConcatenationScope(modulesMap, info);\n\n\t\t\t\t// TODO cache codeGeneration results\n\t\t\t\tconst codeGenResult = m.codeGeneration({\n\t\t\t\t\tdependencyTemplates,\n\t\t\t\t\truntimeTemplate,\n\t\t\t\t\tmoduleGraph,\n\t\t\t\t\tchunkGraph,\n\t\t\t\t\truntime,\n\t\t\t\t\tconcatenationScope,\n\t\t\t\t\tcodeGenerationResults,\n\t\t\t\t\tsourceTypes: TYPES\n\t\t\t\t});\n\t\t\t\tconst source = codeGenResult.sources.get(\"javascript\");\n\t\t\t\tconst data = codeGenResult.data;\n\t\t\t\tconst chunkInitFragments = data && data.get(\"chunkInitFragments\");\n\t\t\t\tconst code = source.source().toString();\n\t\t\t\tlet ast;\n\t\t\t\ttry {\n\t\t\t\t\tast = JavascriptParser._parse(code, {\n\t\t\t\t\t\tsourceType: \"module\"\n\t\t\t\t\t});\n\t\t\t\t} catch (err) {\n\t\t\t\t\tif (\n\t\t\t\t\t\terr.loc &&\n\t\t\t\t\t\ttypeof err.loc === \"object\" &&\n\t\t\t\t\t\ttypeof err.loc.line === \"number\"\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst lineNumber = err.loc.line;\n\t\t\t\t\t\tconst lines = code.split(\"\\n\");\n\t\t\t\t\t\terr.message +=\n\t\t\t\t\t\t\t\"\\n| \" +\n\t\t\t\t\t\t\tlines\n\t\t\t\t\t\t\t\t.slice(Math.max(0, lineNumber - 3), lineNumber + 2)\n\t\t\t\t\t\t\t\t.join(\"\\n| \");\n\t\t\t\t\t}\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t\tconst scopeManager = eslintScope.analyze(ast, {\n\t\t\t\t\tecmaVersion: 6,\n\t\t\t\t\tsourceType: \"module\",\n\t\t\t\t\toptimistic: true,\n\t\t\t\t\tignoreEval: true,\n\t\t\t\t\timpliedStrict: true\n\t\t\t\t});\n\t\t\t\tconst globalScope = scopeManager.acquire(ast);\n\t\t\t\tconst moduleScope = globalScope.childScopes[0];\n\t\t\t\tconst resultSource = new ReplaceSource(source);\n\t\t\t\tinfo.runtimeRequirements = codeGenResult.runtimeRequirements;\n\t\t\t\tinfo.ast = ast;\n\t\t\t\tinfo.internalSource = source;\n\t\t\t\tinfo.source = resultSource;\n\t\t\t\tinfo.chunkInitFragments = chunkInitFragments;\n\t\t\t\tinfo.globalScope = globalScope;\n\t\t\t\tinfo.moduleScope = moduleScope;\n\t\t\t} catch (err) {\n\t\t\t\terr.message += `\\nwhile analyzing module ${m.identifier()} for concatenation`;\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {ModuleGraph} moduleGraph the module graph\n\t * @param {RuntimeSpec} runtime the runtime\n\t * @returns {[ModuleInfoOrReference[], Map<Module, ModuleInfo>]} module info items\n\t */\n\t_getModulesWithInfo(moduleGraph, runtime) {\n\t\tconst orderedConcatenationList = this._createConcatenationList(\n\t\t\tthis.rootModule,\n\t\t\tthis._modules,\n\t\t\truntime,\n\t\t\tmoduleGraph\n\t\t);\n\t\t/** @type {Map<Module, ModuleInfo>} */\n\t\tconst map = new Map();\n\t\tconst list = orderedConcatenationList.map((info, index) => {\n\t\t\tlet item = map.get(info.module);\n\t\t\tif (item === undefined) {\n\t\t\t\tswitch (info.type) {\n\t\t\t\t\tcase \"concatenated\":\n\t\t\t\t\t\titem = {\n\t\t\t\t\t\t\ttype: \"concatenated\",\n\t\t\t\t\t\t\tmodule: info.module,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tast: undefined,\n\t\t\t\t\t\t\tinternalSource: undefined,\n\t\t\t\t\t\t\truntimeRequirements: undefined,\n\t\t\t\t\t\t\tsource: undefined,\n\t\t\t\t\t\t\tglobalScope: undefined,\n\t\t\t\t\t\t\tmoduleScope: undefined,\n\t\t\t\t\t\t\tinternalNames: new Map(),\n\t\t\t\t\t\t\texportMap: undefined,\n\t\t\t\t\t\t\trawExportMap: undefined,\n\t\t\t\t\t\t\tnamespaceExportSymbol: undefined,\n\t\t\t\t\t\t\tnamespaceObjectName: undefined,\n\t\t\t\t\t\t\tinteropNamespaceObjectUsed: false,\n\t\t\t\t\t\t\tinteropNamespaceObjectName: undefined,\n\t\t\t\t\t\t\tinteropNamespaceObject2Used: false,\n\t\t\t\t\t\t\tinteropNamespaceObject2Name: undefined,\n\t\t\t\t\t\t\tinteropDefaultAccessUsed: false,\n\t\t\t\t\t\t\tinteropDefaultAccessName: undefined\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"external\":\n\t\t\t\t\t\titem = {\n\t\t\t\t\t\t\ttype: \"external\",\n\t\t\t\t\t\t\tmodule: info.module,\n\t\t\t\t\t\t\truntimeCondition: info.runtimeCondition,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tname: undefined,\n\t\t\t\t\t\t\tinteropNamespaceObjectUsed: false,\n\t\t\t\t\t\t\tinteropNamespaceObjectName: undefined,\n\t\t\t\t\t\t\tinteropNamespaceObject2Used: false,\n\t\t\t\t\t\t\tinteropNamespaceObject2Name: undefined,\n\t\t\t\t\t\t\tinteropDefaultAccessUsed: false,\n\t\t\t\t\t\t\tinteropDefaultAccessName: undefined\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Unsupported concatenation entry type ${info.type}`\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tmap.set(item.module, item);\n\t\t\t\treturn item;\n\t\t\t} else {\n\t\t\t\t/** @type {ReferenceToModuleInfo} */\n\t\t\t\tconst ref = {\n\t\t\t\t\ttype: \"reference\",\n\t\t\t\t\truntimeCondition: info.runtimeCondition,\n\t\t\t\t\ttarget: item\n\t\t\t\t};\n\t\t\t\treturn ref;\n\t\t\t}\n\t\t});\n\t\treturn [list, map];\n\t}\n\n\tfindNewName(oldName, usedNamed1, usedNamed2, extraInfo) {\n\t\tlet name = oldName;\n\n\t\tif (name === ConcatenationScope.DEFAULT_EXPORT) {\n\t\t\tname = \"\";\n\t\t}\n\t\tif (name === ConcatenationScope.NAMESPACE_OBJECT_EXPORT) {\n\t\t\tname = \"namespaceObject\";\n\t\t}\n\n\t\t// Remove uncool stuff\n\t\textraInfo = extraInfo.replace(\n\t\t\t/\\.+\\/|(\\/index)?\\.([a-zA-Z0-9]{1,4})($|\\s|\\?)|\\s*\\+\\s*\\d+\\s*modules/g,\n\t\t\t\"\"\n\t\t);\n\n\t\tconst splittedInfo = extraInfo.split(\"/\");\n\t\twhile (splittedInfo.length) {\n\t\t\tname = splittedInfo.pop() + (name ? \"_\" + name : \"\");\n\t\t\tconst nameIdent = Template.toIdentifier(name);\n\t\t\tif (\n\t\t\t\t!usedNamed1.has(nameIdent) &&\n\t\t\t\t(!usedNamed2 || !usedNamed2.has(nameIdent))\n\t\t\t)\n\t\t\t\treturn nameIdent;\n\t\t}\n\n\t\tlet i = 0;\n\t\tlet nameWithNumber = Template.toIdentifier(`${name}_${i}`);\n\t\twhile (\n\t\t\tusedNamed1.has(nameWithNumber) ||\n\t\t\t(usedNamed2 && usedNamed2.has(nameWithNumber))\n\t\t) {\n\t\t\ti++;\n\t\t\tnameWithNumber = Template.toIdentifier(`${name}_${i}`);\n\t\t}\n\t\treturn nameWithNumber;\n\t}\n\n\t/**\n\t * @param {Hash} hash the hash used to track dependencies\n\t * @param {UpdateHashContext} context context\n\t * @returns {void}\n\t */\n\tupdateHash(hash, context) {\n\t\tconst { chunkGraph, runtime } = context;\n\t\tfor (const info of this._createConcatenationList(\n\t\t\tthis.rootModule,\n\t\t\tthis._modules,\n\t\t\tintersectRuntime(runtime, this._runtime),\n\t\t\tchunkGraph.moduleGraph\n\t\t)) {\n\t\t\tswitch (info.type) {\n\t\t\t\tcase \"concatenated\":\n\t\t\t\t\tinfo.module.updateHash(hash, context);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"external\":\n\t\t\t\t\thash.update(`${chunkGraph.getModuleId(info.module)}`);\n\t\t\t\t\t// TODO runtimeCondition\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tsuper.updateHash(hash, context);\n\t}\n\n\tstatic deserialize(context) {\n\t\tconst obj = new ConcatenatedModule({\n\t\t\tidentifier: undefined,\n\t\t\trootModule: undefined,\n\t\t\tmodules: undefined,\n\t\t\truntime: undefined\n\t\t});\n\t\tobj.deserialize(context);\n\t\treturn obj;\n\t}\n}\n\nmakeSerializable(ConcatenatedModule, \"webpack/lib/optimize/ConcatenatedModule\");\n\nmodule.exports = ConcatenatedModule;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}