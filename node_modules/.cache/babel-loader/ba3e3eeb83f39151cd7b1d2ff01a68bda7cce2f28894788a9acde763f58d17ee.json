{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../Compiler\")} Compiler */\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar AddBuildDependenciesPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {Iterable<string>} buildDependencies list of build dependencies\n   */\n  function AddBuildDependenciesPlugin(buildDependencies) {\n    _classCallCheck(this, AddBuildDependenciesPlugin);\n    this.buildDependencies = new Set(buildDependencies);\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  _createClass(AddBuildDependenciesPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n      compiler.hooks.compilation.tap(\"AddBuildDependenciesPlugin\", function (compilation) {\n        compilation.buildDependencies.addAll(_this.buildDependencies);\n      });\n    }\n  }]);\n  return AddBuildDependenciesPlugin;\n}();\nmodule.exports = AddBuildDependenciesPlugin;","map":{"version":3,"names":["AddBuildDependenciesPlugin","buildDependencies","Set","compiler","hooks","compilation","tap","addAll","module","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/cache/AddBuildDependenciesPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass AddBuildDependenciesPlugin {\n\t/**\n\t * @param {Iterable<string>} buildDependencies list of build dependencies\n\t */\n\tconstructor(buildDependencies) {\n\t\tthis.buildDependencies = new Set(buildDependencies);\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"AddBuildDependenciesPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tcompilation.buildDependencies.addAll(this.buildDependencies);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = AddBuildDependenciesPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AAAA;AAAA;AAAA,IAEMA,0BAA0B;EAC/B;AACD;AACA;EACC,oCAAYC,iBAAiB,EAAE;IAAA;IAC9B,IAAI,CAACA,iBAAiB,GAAG,IAAIC,GAAG,CAACD,iBAAiB,CAAC;EACpD;;EAEA;AACD;AACA;AACA;AACA;EAJC;IAAA;IAAA,OAKA,eAAME,QAAQ,EAAE;MAAA;MACfA,QAAQ,CAACC,KAAK,CAACC,WAAW,CAACC,GAAG,CAC7B,4BAA4B,EAC5B,UAAAD,WAAW,EAAI;QACdA,WAAW,CAACJ,iBAAiB,CAACM,MAAM,CAAC,KAAI,CAACN,iBAAiB,CAAC;MAC7D,CAAC,CACD;IACF;EAAC;EAAA;AAAA;AAGFO,MAAM,CAACC,OAAO,GAAGT,0BAA0B"},"metadata":{},"sourceType":"script","externalDependencies":[]}