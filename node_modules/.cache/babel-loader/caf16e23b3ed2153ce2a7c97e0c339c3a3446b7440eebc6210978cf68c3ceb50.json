{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar Range = require(\"./Range\");\n/** @typedef {import(\"../validate\").Schema} Schema */\n\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @return {string[]}\n */\n\nmodule.exports.stringHints = function stringHints(schema, logic) {\n  var hints = [];\n  var type = \"string\";\n  var currentSchema = _objectSpread({}, schema);\n  if (!logic) {\n    var tmpLength = currentSchema.minLength;\n    var tmpFormat = currentSchema.formatMinimum;\n    var tmpExclusive = currentSchema.formatExclusiveMaximum;\n    currentSchema.minLength = currentSchema.maxLength;\n    currentSchema.maxLength = tmpLength;\n    currentSchema.formatMinimum = currentSchema.formatMaximum;\n    currentSchema.formatMaximum = tmpFormat;\n    currentSchema.formatExclusiveMaximum = !currentSchema.formatExclusiveMinimum;\n    currentSchema.formatExclusiveMinimum = !tmpExclusive;\n  }\n  if (typeof currentSchema.minLength === \"number\") {\n    if (currentSchema.minLength === 1) {\n      type = \"non-empty string\";\n    } else {\n      var length = Math.max(currentSchema.minLength - 1, 0);\n      hints.push(\"should be longer than \".concat(length, \" character\").concat(length > 1 ? \"s\" : \"\"));\n    }\n  }\n  if (typeof currentSchema.maxLength === \"number\") {\n    if (currentSchema.maxLength === 0) {\n      type = \"empty string\";\n    } else {\n      var _length = currentSchema.maxLength + 1;\n      hints.push(\"should be shorter than \".concat(_length, \" character\").concat(_length > 1 ? \"s\" : \"\"));\n    }\n  }\n  if (currentSchema.pattern) {\n    hints.push(\"should\".concat(logic ? \"\" : \" not\", \" match pattern \").concat(JSON.stringify(currentSchema.pattern)));\n  }\n  if (currentSchema.format) {\n    hints.push(\"should\".concat(logic ? \"\" : \" not\", \" match format \").concat(JSON.stringify(currentSchema.format)));\n  }\n  if (currentSchema.formatMinimum) {\n    hints.push(\"should be \".concat(currentSchema.formatExclusiveMinimum ? \">\" : \">=\", \" \").concat(JSON.stringify(currentSchema.formatMinimum)));\n  }\n  if (currentSchema.formatMaximum) {\n    hints.push(\"should be \".concat(currentSchema.formatExclusiveMaximum ? \"<\" : \"<=\", \" \").concat(JSON.stringify(currentSchema.formatMaximum)));\n  }\n  return [type].concat(hints);\n};\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @return {string[]}\n */\n\nmodule.exports.numberHints = function numberHints(schema, logic) {\n  var hints = [schema.type === \"integer\" ? \"integer\" : \"number\"];\n  var range = new Range();\n  if (typeof schema.minimum === \"number\") {\n    range.left(schema.minimum);\n  }\n  if (typeof schema.exclusiveMinimum === \"number\") {\n    range.left(schema.exclusiveMinimum, true);\n  }\n  if (typeof schema.maximum === \"number\") {\n    range.right(schema.maximum);\n  }\n  if (typeof schema.exclusiveMaximum === \"number\") {\n    range.right(schema.exclusiveMaximum, true);\n  }\n  var rangeFormat = range.format(logic);\n  if (rangeFormat) {\n    hints.push(rangeFormat);\n  }\n  if (typeof schema.multipleOf === \"number\") {\n    hints.push(\"should\".concat(logic ? \"\" : \" not\", \" be multiple of \").concat(schema.multipleOf));\n  }\n  return hints;\n};","map":{"version":3,"names":["Range","require","module","exports","stringHints","schema","logic","hints","type","currentSchema","tmpLength","minLength","tmpFormat","formatMinimum","tmpExclusive","formatExclusiveMaximum","maxLength","formatMaximum","formatExclusiveMinimum","length","Math","max","push","pattern","JSON","stringify","format","concat","numberHints","range","minimum","left","exclusiveMinimum","maximum","right","exclusiveMaximum","rangeFormat","multipleOf"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/schema-utils/dist/util/hints.js"],"sourcesContent":["\"use strict\";\n\nconst Range = require(\"./Range\");\n/** @typedef {import(\"../validate\").Schema} Schema */\n\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @return {string[]}\n */\n\n\nmodule.exports.stringHints = function stringHints(schema, logic) {\n  const hints = [];\n  let type = \"string\";\n  const currentSchema = { ...schema\n  };\n\n  if (!logic) {\n    const tmpLength = currentSchema.minLength;\n    const tmpFormat = currentSchema.formatMinimum;\n    const tmpExclusive = currentSchema.formatExclusiveMaximum;\n    currentSchema.minLength = currentSchema.maxLength;\n    currentSchema.maxLength = tmpLength;\n    currentSchema.formatMinimum = currentSchema.formatMaximum;\n    currentSchema.formatMaximum = tmpFormat;\n    currentSchema.formatExclusiveMaximum = !currentSchema.formatExclusiveMinimum;\n    currentSchema.formatExclusiveMinimum = !tmpExclusive;\n  }\n\n  if (typeof currentSchema.minLength === \"number\") {\n    if (currentSchema.minLength === 1) {\n      type = \"non-empty string\";\n    } else {\n      const length = Math.max(currentSchema.minLength - 1, 0);\n      hints.push(`should be longer than ${length} character${length > 1 ? \"s\" : \"\"}`);\n    }\n  }\n\n  if (typeof currentSchema.maxLength === \"number\") {\n    if (currentSchema.maxLength === 0) {\n      type = \"empty string\";\n    } else {\n      const length = currentSchema.maxLength + 1;\n      hints.push(`should be shorter than ${length} character${length > 1 ? \"s\" : \"\"}`);\n    }\n  }\n\n  if (currentSchema.pattern) {\n    hints.push(`should${logic ? \"\" : \" not\"} match pattern ${JSON.stringify(currentSchema.pattern)}`);\n  }\n\n  if (currentSchema.format) {\n    hints.push(`should${logic ? \"\" : \" not\"} match format ${JSON.stringify(currentSchema.format)}`);\n  }\n\n  if (currentSchema.formatMinimum) {\n    hints.push(`should be ${currentSchema.formatExclusiveMinimum ? \">\" : \">=\"} ${JSON.stringify(currentSchema.formatMinimum)}`);\n  }\n\n  if (currentSchema.formatMaximum) {\n    hints.push(`should be ${currentSchema.formatExclusiveMaximum ? \"<\" : \"<=\"} ${JSON.stringify(currentSchema.formatMaximum)}`);\n  }\n\n  return [type].concat(hints);\n};\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @return {string[]}\n */\n\n\nmodule.exports.numberHints = function numberHints(schema, logic) {\n  const hints = [schema.type === \"integer\" ? \"integer\" : \"number\"];\n  const range = new Range();\n\n  if (typeof schema.minimum === \"number\") {\n    range.left(schema.minimum);\n  }\n\n  if (typeof schema.exclusiveMinimum === \"number\") {\n    range.left(schema.exclusiveMinimum, true);\n  }\n\n  if (typeof schema.maximum === \"number\") {\n    range.right(schema.maximum);\n  }\n\n  if (typeof schema.exclusiveMaximum === \"number\") {\n    range.right(schema.exclusiveMaximum, true);\n  }\n\n  const rangeFormat = range.format(logic);\n\n  if (rangeFormat) {\n    hints.push(rangeFormat);\n  }\n\n  if (typeof schema.multipleOf === \"number\") {\n    hints.push(`should${logic ? \"\" : \" not\"} be multiple of ${schema.multipleOf}`);\n  }\n\n  return hints;\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}