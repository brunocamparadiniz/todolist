{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\n\"use strict\";\n\nvar _slicedToArray = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _require = require(\"webpack-sources\"),\n  ReplaceSource = _require.ReplaceSource,\n  RawSource = _require.RawSource,\n  ConcatSource = _require.ConcatSource;\nvar _require2 = require(\"../ExportsInfo\"),\n  UsageState = _require2.UsageState;\nvar Generator = require(\"../Generator\");\nvar RuntimeGlobals = require(\"../RuntimeGlobals\");\nvar Template = require(\"../Template\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../Generator\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../Module\").ConcatenationBailoutReasonContext} ConcatenationBailoutReasonContext */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n/** @typedef {import(\"../util/Hash\")} Hash */\n\nvar TYPES = new Set([\"javascript\"]);\nvar CssExportsGenerator = /*#__PURE__*/function (_Generator) {\n  _inherits(CssExportsGenerator, _Generator);\n  var _super = _createSuper(CssExportsGenerator);\n  function CssExportsGenerator() {\n    _classCallCheck(this, CssExportsGenerator);\n    return _super.call(this);\n  }\n\n  // TODO add getConcatenationBailoutReason to allow concatenation\n  // but how to make it have a module id\n\n  /**\n   * @param {NormalModule} module module for which the code should be generated\n   * @param {GenerateContext} generateContext context for generate\n   * @returns {Source} generated code\n   */\n  _createClass(CssExportsGenerator, [{\n    key: \"generate\",\n    value: function generate(module, generateContext) {\n      var source = new ReplaceSource(new RawSource(\"\"));\n      var initFragments = [];\n      var cssExports = new Map();\n      generateContext.runtimeRequirements.add(RuntimeGlobals.module);\n      var runtimeRequirements = new Set();\n      var templateContext = {\n        runtimeTemplate: generateContext.runtimeTemplate,\n        dependencyTemplates: generateContext.dependencyTemplates,\n        moduleGraph: generateContext.moduleGraph,\n        chunkGraph: generateContext.chunkGraph,\n        module: module,\n        runtime: generateContext.runtime,\n        runtimeRequirements: runtimeRequirements,\n        concatenationScope: generateContext.concatenationScope,\n        codeGenerationResults: generateContext.codeGenerationResults,\n        initFragments: initFragments,\n        cssExports: cssExports\n      };\n      var handleDependency = function handleDependency(dependency) {\n        var constructor = /** @type {new (...args: any[]) => Dependency} */\n        dependency.constructor;\n        var template = generateContext.dependencyTemplates.get(constructor);\n        if (!template) {\n          throw new Error(\"No template for dependency: \" + dependency.constructor.name);\n        }\n        template.apply(dependency, source, templateContext);\n      };\n      module.dependencies.forEach(handleDependency);\n      if (generateContext.concatenationScope) {\n        var _source = new ConcatSource();\n        var usedIdentifiers = new Set();\n        var _iterator = _createForOfIteratorHelper(cssExports),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _slicedToArray(_step.value, 2),\n              k = _step$value[0],\n              v = _step$value[1];\n            var identifier = Template.toIdentifier(k);\n            var i = 0;\n            while (usedIdentifiers.has(identifier)) {\n              identifier = Template.toIdentifier(k + i);\n            }\n            usedIdentifiers.add(identifier);\n            generateContext.concatenationScope.registerExport(k, identifier);\n            _source.add(\"\".concat(generateContext.runtimeTemplate.supportsConst ? \"const\" : \"var\", \" \").concat(identifier, \" = \").concat(JSON.stringify(v), \";\\n\"));\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        return _source;\n      } else {\n        var otherUsed = generateContext.moduleGraph.getExportsInfo(module).otherExportsInfo.getUsed(generateContext.runtime) !== UsageState.Unused;\n        if (otherUsed) {\n          generateContext.runtimeRequirements.add(RuntimeGlobals.makeNamespaceObject);\n        }\n        return new RawSource(\"\".concat(otherUsed ? \"\".concat(RuntimeGlobals.makeNamespaceObject, \"(\") : \"\").concat(module.moduleArgument, \".exports = {\\n\").concat(Array.from(cssExports, function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            k = _ref2[0],\n            v = _ref2[1];\n          return \"\\t\".concat(JSON.stringify(k), \": \").concat(JSON.stringify(v));\n        }).join(\",\\n\"), \"\\n}\").concat(otherUsed ? \")\" : \"\", \";\"));\n      }\n    }\n\n    /**\n     * @param {NormalModule} module fresh module\n     * @returns {Set<string>} available types (do not mutate)\n     */\n  }, {\n    key: \"getTypes\",\n    value: function getTypes(module) {\n      return TYPES;\n    }\n\n    /**\n     * @param {NormalModule} module the module\n     * @param {string=} type source type\n     * @returns {number} estimate size of the module\n     */\n  }, {\n    key: \"getSize\",\n    value: function getSize(module, type) {\n      return 42;\n    }\n\n    /**\n     * @param {Hash} hash hash that will be modified\n     * @param {UpdateHashContext} updateHashContext context for updating hash\n     */\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash, _ref3) {\n      var module = _ref3.module;\n    }\n  }]);\n  return CssExportsGenerator;\n}(Generator);\nmodule.exports = CssExportsGenerator;","map":{"version":3,"names":["require","ReplaceSource","RawSource","ConcatSource","UsageState","Generator","RuntimeGlobals","Template","TYPES","Set","CssExportsGenerator","module","generateContext","source","initFragments","cssExports","Map","runtimeRequirements","add","templateContext","runtimeTemplate","dependencyTemplates","moduleGraph","chunkGraph","runtime","concatenationScope","codeGenerationResults","handleDependency","dependency","constructor","template","get","Error","name","apply","dependencies","forEach","usedIdentifiers","k","v","identifier","toIdentifier","i","has","registerExport","supportsConst","JSON","stringify","otherUsed","getExportsInfo","otherExportsInfo","getUsed","Unused","makeNamespaceObject","moduleArgument","Array","from","join","type","hash","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/css/CssExportsGenerator.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\n\"use strict\";\n\nconst { ReplaceSource, RawSource, ConcatSource } = require(\"webpack-sources\");\nconst { UsageState } = require(\"../ExportsInfo\");\nconst Generator = require(\"../Generator\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst Template = require(\"../Template\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../Generator\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../Module\").ConcatenationBailoutReasonContext} ConcatenationBailoutReasonContext */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n/** @typedef {import(\"../util/Hash\")} Hash */\n\nconst TYPES = new Set([\"javascript\"]);\n\nclass CssExportsGenerator extends Generator {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t// TODO add getConcatenationBailoutReason to allow concatenation\n\t// but how to make it have a module id\n\n\t/**\n\t * @param {NormalModule} module module for which the code should be generated\n\t * @param {GenerateContext} generateContext context for generate\n\t * @returns {Source} generated code\n\t */\n\tgenerate(module, generateContext) {\n\t\tconst source = new ReplaceSource(new RawSource(\"\"));\n\t\tconst initFragments = [];\n\t\tconst cssExports = new Map();\n\n\t\tgenerateContext.runtimeRequirements.add(RuntimeGlobals.module);\n\n\t\tconst runtimeRequirements = new Set();\n\n\t\tconst templateContext = {\n\t\t\truntimeTemplate: generateContext.runtimeTemplate,\n\t\t\tdependencyTemplates: generateContext.dependencyTemplates,\n\t\t\tmoduleGraph: generateContext.moduleGraph,\n\t\t\tchunkGraph: generateContext.chunkGraph,\n\t\t\tmodule,\n\t\t\truntime: generateContext.runtime,\n\t\t\truntimeRequirements: runtimeRequirements,\n\t\t\tconcatenationScope: generateContext.concatenationScope,\n\t\t\tcodeGenerationResults: generateContext.codeGenerationResults,\n\t\t\tinitFragments,\n\t\t\tcssExports\n\t\t};\n\n\t\tconst handleDependency = dependency => {\n\t\t\tconst constructor = /** @type {new (...args: any[]) => Dependency} */ (\n\t\t\t\tdependency.constructor\n\t\t\t);\n\t\t\tconst template = generateContext.dependencyTemplates.get(constructor);\n\t\t\tif (!template) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"No template for dependency: \" + dependency.constructor.name\n\t\t\t\t);\n\t\t\t}\n\n\t\t\ttemplate.apply(dependency, source, templateContext);\n\t\t};\n\t\tmodule.dependencies.forEach(handleDependency);\n\n\t\tif (generateContext.concatenationScope) {\n\t\t\tconst source = new ConcatSource();\n\t\t\tconst usedIdentifiers = new Set();\n\t\t\tfor (const [k, v] of cssExports) {\n\t\t\t\tlet identifier = Template.toIdentifier(k);\n\t\t\t\tlet i = 0;\n\t\t\t\twhile (usedIdentifiers.has(identifier)) {\n\t\t\t\t\tidentifier = Template.toIdentifier(k + i);\n\t\t\t\t}\n\t\t\t\tusedIdentifiers.add(identifier);\n\t\t\t\tgenerateContext.concatenationScope.registerExport(k, identifier);\n\t\t\t\tsource.add(\n\t\t\t\t\t`${\n\t\t\t\t\t\tgenerateContext.runtimeTemplate.supportsConst ? \"const\" : \"var\"\n\t\t\t\t\t} ${identifier} = ${JSON.stringify(v)};\\n`\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn source;\n\t\t} else {\n\t\t\tconst otherUsed =\n\t\t\t\tgenerateContext.moduleGraph\n\t\t\t\t\t.getExportsInfo(module)\n\t\t\t\t\t.otherExportsInfo.getUsed(generateContext.runtime) !==\n\t\t\t\tUsageState.Unused;\n\t\t\tif (otherUsed) {\n\t\t\t\tgenerateContext.runtimeRequirements.add(\n\t\t\t\t\tRuntimeGlobals.makeNamespaceObject\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn new RawSource(\n\t\t\t\t`${otherUsed ? `${RuntimeGlobals.makeNamespaceObject}(` : \"\"}${\n\t\t\t\t\tmodule.moduleArgument\n\t\t\t\t}.exports = {\\n${Array.from(\n\t\t\t\t\tcssExports,\n\t\t\t\t\t([k, v]) => `\\t${JSON.stringify(k)}: ${JSON.stringify(v)}`\n\t\t\t\t).join(\",\\n\")}\\n}${otherUsed ? \")\" : \"\"};`\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @param {NormalModule} module fresh module\n\t * @returns {Set<string>} available types (do not mutate)\n\t */\n\tgetTypes(module) {\n\t\treturn TYPES;\n\t}\n\n\t/**\n\t * @param {NormalModule} module the module\n\t * @param {string=} type source type\n\t * @returns {number} estimate size of the module\n\t */\n\tgetSize(module, type) {\n\t\treturn 42;\n\t}\n\n\t/**\n\t * @param {Hash} hash hash that will be modified\n\t * @param {UpdateHashContext} updateHashContext context for updating hash\n\t */\n\tupdateHash(hash, { module }) {}\n}\n\nmodule.exports = CssExportsGenerator;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAEb,eAAmDA,OAAO,CAAC,iBAAiB,CAAC;EAArEC,aAAa,YAAbA,aAAa;EAAEC,SAAS,YAATA,SAAS;EAAEC,YAAY,YAAZA,YAAY;AAC9C,gBAAuBH,OAAO,CAAC,gBAAgB,CAAC;EAAxCI,UAAU,aAAVA,UAAU;AAClB,IAAMC,SAAS,GAAGL,OAAO,CAAC,cAAc,CAAC;AACzC,IAAMM,cAAc,GAAGN,OAAO,CAAC,mBAAmB,CAAC;AACnD,IAAMO,QAAQ,GAAGP,OAAO,CAAC,aAAa,CAAC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMQ,KAAK,GAAG,IAAIC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC;AAAC,IAEhCC,mBAAmB;EAAA;EAAA;EACxB,+BAAc;IAAA;IAAA;EAEd;;EAEA;EACA;;EAEA;AACD;AACA;AACA;AACA;EAJC;IAAA;IAAA,OAKA,kBAASC,MAAM,EAAEC,eAAe,EAAE;MACjC,IAAMC,MAAM,GAAG,IAAIZ,aAAa,CAAC,IAAIC,SAAS,CAAC,EAAE,CAAC,CAAC;MACnD,IAAMY,aAAa,GAAG,EAAE;MACxB,IAAMC,UAAU,GAAG,IAAIC,GAAG,EAAE;MAE5BJ,eAAe,CAACK,mBAAmB,CAACC,GAAG,CAACZ,cAAc,CAACK,MAAM,CAAC;MAE9D,IAAMM,mBAAmB,GAAG,IAAIR,GAAG,EAAE;MAErC,IAAMU,eAAe,GAAG;QACvBC,eAAe,EAAER,eAAe,CAACQ,eAAe;QAChDC,mBAAmB,EAAET,eAAe,CAACS,mBAAmB;QACxDC,WAAW,EAAEV,eAAe,CAACU,WAAW;QACxCC,UAAU,EAAEX,eAAe,CAACW,UAAU;QACtCZ,MAAM,EAANA,MAAM;QACNa,OAAO,EAAEZ,eAAe,CAACY,OAAO;QAChCP,mBAAmB,EAAEA,mBAAmB;QACxCQ,kBAAkB,EAAEb,eAAe,CAACa,kBAAkB;QACtDC,qBAAqB,EAAEd,eAAe,CAACc,qBAAqB;QAC5DZ,aAAa,EAAbA,aAAa;QACbC,UAAU,EAAVA;MACD,CAAC;MAED,IAAMY,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAGC,UAAU,EAAI;QACtC,IAAMC,WAAW,GAAG;QACnBD,UAAU,CAACC,WACX;QACD,IAAMC,QAAQ,GAAGlB,eAAe,CAACS,mBAAmB,CAACU,GAAG,CAACF,WAAW,CAAC;QACrE,IAAI,CAACC,QAAQ,EAAE;UACd,MAAM,IAAIE,KAAK,CACd,8BAA8B,GAAGJ,UAAU,CAACC,WAAW,CAACI,IAAI,CAC5D;QACF;QAEAH,QAAQ,CAACI,KAAK,CAACN,UAAU,EAAEf,MAAM,EAAEM,eAAe,CAAC;MACpD,CAAC;MACDR,MAAM,CAACwB,YAAY,CAACC,OAAO,CAACT,gBAAgB,CAAC;MAE7C,IAAIf,eAAe,CAACa,kBAAkB,EAAE;QACvC,IAAMZ,OAAM,GAAG,IAAIV,YAAY,EAAE;QACjC,IAAMkC,eAAe,GAAG,IAAI5B,GAAG,EAAE;QAAC,2CACbM,UAAU;UAAA;QAAA;UAA/B,oDAAiC;YAAA;cAArBuB,CAAC;cAAEC,CAAC;YACf,IAAIC,UAAU,GAAGjC,QAAQ,CAACkC,YAAY,CAACH,CAAC,CAAC;YACzC,IAAII,CAAC,GAAG,CAAC;YACT,OAAOL,eAAe,CAACM,GAAG,CAACH,UAAU,CAAC,EAAE;cACvCA,UAAU,GAAGjC,QAAQ,CAACkC,YAAY,CAACH,CAAC,GAAGI,CAAC,CAAC;YAC1C;YACAL,eAAe,CAACnB,GAAG,CAACsB,UAAU,CAAC;YAC/B5B,eAAe,CAACa,kBAAkB,CAACmB,cAAc,CAACN,CAAC,EAAEE,UAAU,CAAC;YAChE3B,OAAM,CAACK,GAAG,WAERN,eAAe,CAACQ,eAAe,CAACyB,aAAa,GAAG,OAAO,GAAG,KAAK,cAC5DL,UAAU,gBAAMM,IAAI,CAACC,SAAS,CAACR,CAAC,CAAC,SACrC;UACF;QAAC;UAAA;QAAA;UAAA;QAAA;QACD,OAAO1B,OAAM;MACd,CAAC,MAAM;QACN,IAAMmC,SAAS,GACdpC,eAAe,CAACU,WAAW,CACzB2B,cAAc,CAACtC,MAAM,CAAC,CACtBuC,gBAAgB,CAACC,OAAO,CAACvC,eAAe,CAACY,OAAO,CAAC,KACnDpB,UAAU,CAACgD,MAAM;QAClB,IAAIJ,SAAS,EAAE;UACdpC,eAAe,CAACK,mBAAmB,CAACC,GAAG,CACtCZ,cAAc,CAAC+C,mBAAmB,CAClC;QACF;QACA,OAAO,IAAInD,SAAS,WAChB8C,SAAS,aAAM1C,cAAc,CAAC+C,mBAAmB,SAAM,EAAE,SAC3D1C,MAAM,CAAC2C,cAAc,2BACLC,KAAK,CAACC,IAAI,CAC1BzC,UAAU,EACV;UAAA;YAAEuB,CAAC;YAAEC,CAAC;UAAA,mBAAWO,IAAI,CAACC,SAAS,CAACT,CAAC,CAAC,eAAKQ,IAAI,CAACC,SAAS,CAACR,CAAC,CAAC;QAAA,CAAE,CAC1D,CAACkB,IAAI,CAAC,KAAK,CAAC,gBAAMT,SAAS,GAAG,GAAG,GAAG,EAAE,OACvC;MACF;IACD;;IAEA;AACD;AACA;AACA;EAHC;IAAA;IAAA,OAIA,kBAASrC,MAAM,EAAE;MAChB,OAAOH,KAAK;IACb;;IAEA;AACD;AACA;AACA;AACA;EAJC;IAAA;IAAA,OAKA,iBAAQG,MAAM,EAAE+C,IAAI,EAAE;MACrB,OAAO,EAAE;IACV;;IAEA;AACD;AACA;AACA;EAHC;IAAA;IAAA,OAIA,oBAAWC,IAAI,SAAc;MAAA,IAAVhD,MAAM,SAANA,MAAM;IAAK;EAAC;EAAA;AAAA,EAhHEN,SAAS;AAmH3CM,MAAM,CAACiD,OAAO,GAAGlD,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}