{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nvar _objectSpread = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _slicedToArray = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar path = require(\"path\");\nvar DescriptionFileUtils = require(\"./DescriptionFileUtils\");\nvar forEachBail = require(\"./forEachBail\");\nvar _require = require(\"./util/entrypoints\"),\n  processImportsField = _require.processImportsField;\nvar _require2 = require(\"./util/identifier\"),\n  parseIdentifier = _require2.parseIdentifier;\nvar _require3 = require(\"./util/path\"),\n  checkImportsExportsFieldTarget = _require3.checkImportsExportsFieldTarget;\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n/** @typedef {import(\"./util/entrypoints\").FieldProcessor} FieldProcessor */\n/** @typedef {import(\"./util/entrypoints\").ImportsField} ImportsField */\n\nvar dotCode = \".\".charCodeAt(0);\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {Set<string>} conditionNames condition names\n   * @param {string | string[]} fieldNamePath name path\n   * @param {string | ResolveStepHook} targetFile target file\n   * @param {string | ResolveStepHook} targetPackage target package\n   */\n  function ImportsFieldPlugin(source, conditionNames, fieldNamePath, targetFile, targetPackage) {\n    _classCallCheck(this, ImportsFieldPlugin);\n    this.source = source;\n    this.targetFile = targetFile;\n    this.targetPackage = targetPackage;\n    this.conditionNames = conditionNames;\n    this.fieldName = fieldNamePath;\n    /** @type {WeakMap<any, FieldProcessor>} */\n    this.fieldProcessorCache = new WeakMap();\n  }\n\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n  _createClass(ImportsFieldPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var _this = this;\n      var targetFile = resolver.ensureHook(this.targetFile);\n      var targetPackage = resolver.ensureHook(this.targetPackage);\n      resolver.getHook(this.source).tapAsync(\"ImportsFieldPlugin\", function (request, resolveContext, callback) {\n        // When there is no description file, abort\n        if (!request.descriptionFilePath || request.request === undefined) {\n          return callback();\n        }\n        var remainingRequest = request.request + request.query + request.fragment;\n        /** @type {ImportsField|null} */\n        var importsField = DescriptionFileUtils.getField(request.descriptionFileData, _this.fieldName);\n        if (!importsField) return callback();\n        if (request.directory) {\n          return callback(new Error(\"Resolving to directories is not possible with the imports field (request was \".concat(remainingRequest, \"/)\")));\n        }\n        var paths;\n        try {\n          // We attach the cache to the description file instead of the importsField value\n          // because we use a WeakMap and the importsField could be a string too.\n          // Description file is always an object when exports field can be accessed.\n          var fieldProcessor = _this.fieldProcessorCache.get(request.descriptionFileData);\n          if (fieldProcessor === undefined) {\n            fieldProcessor = processImportsField(importsField);\n            _this.fieldProcessorCache.set(request.descriptionFileData, fieldProcessor);\n          }\n          paths = fieldProcessor(remainingRequest, _this.conditionNames);\n        } catch (err) {\n          if (resolveContext.log) {\n            resolveContext.log(\"Imports field in \".concat(request.descriptionFilePath, \" can't be processed: \").concat(err));\n          }\n          return callback(err);\n        }\n        if (paths.length === 0) {\n          return callback(new Error(\"Package import \".concat(remainingRequest, \" is not imported from package \").concat(request.descriptionFileRoot, \" (see imports field in \").concat(request.descriptionFilePath, \")\")));\n        }\n        forEachBail(paths, function (p, callback) {\n          var parsedIdentifier = parseIdentifier(p);\n          if (!parsedIdentifier) return callback();\n          var _parsedIdentifier = _slicedToArray(parsedIdentifier, 3),\n            path_ = _parsedIdentifier[0],\n            query = _parsedIdentifier[1],\n            fragment = _parsedIdentifier[2];\n          var error = checkImportsExportsFieldTarget(path_);\n          if (error) {\n            return callback(error);\n          }\n          switch (path_.charCodeAt(0)) {\n            // should be relative\n            case dotCode:\n              {\n                var obj = _objectSpread(_objectSpread({}, request), {}, {\n                  request: undefined,\n                  path: path.join( /** @type {string} */request.descriptionFileRoot, path_),\n                  relativePath: path_,\n                  query: query,\n                  fragment: fragment\n                });\n                resolver.doResolve(targetFile, obj, \"using imports field: \" + p, resolveContext, callback);\n                break;\n              }\n\n            // package resolving\n            default:\n              {\n                var _obj = _objectSpread(_objectSpread({}, request), {}, {\n                  request: path_,\n                  relativePath: path_,\n                  fullySpecified: true,\n                  query: query,\n                  fragment: fragment\n                });\n                resolver.doResolve(targetPackage, _obj, \"using imports field: \" + p, resolveContext, callback);\n              }\n          }\n        }, function (err, result) {\n          return callback(err, result || null);\n        });\n      });\n    }\n  }]);\n  return ImportsFieldPlugin;\n}();","map":{"version":3,"names":["path","require","DescriptionFileUtils","forEachBail","processImportsField","parseIdentifier","checkImportsExportsFieldTarget","dotCode","charCodeAt","module","exports","source","conditionNames","fieldNamePath","targetFile","targetPackage","fieldName","fieldProcessorCache","WeakMap","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","descriptionFilePath","undefined","remainingRequest","query","fragment","importsField","getField","descriptionFileData","directory","Error","paths","fieldProcessor","get","set","err","log","length","descriptionFileRoot","p","parsedIdentifier","path_","error","obj","join","relativePath","doResolve","fullySpecified","result"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/enhanced-resolve/lib/ImportsFieldPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst path = require(\"path\");\nconst DescriptionFileUtils = require(\"./DescriptionFileUtils\");\nconst forEachBail = require(\"./forEachBail\");\nconst { processImportsField } = require(\"./util/entrypoints\");\nconst { parseIdentifier } = require(\"./util/identifier\");\nconst { checkImportsExportsFieldTarget } = require(\"./util/path\");\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n/** @typedef {import(\"./util/entrypoints\").FieldProcessor} FieldProcessor */\n/** @typedef {import(\"./util/entrypoints\").ImportsField} ImportsField */\n\nconst dotCode = \".\".charCodeAt(0);\n\nmodule.exports = class ImportsFieldPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {Set<string>} conditionNames condition names\n\t * @param {string | string[]} fieldNamePath name path\n\t * @param {string | ResolveStepHook} targetFile target file\n\t * @param {string | ResolveStepHook} targetPackage target package\n\t */\n\tconstructor(\n\t\tsource,\n\t\tconditionNames,\n\t\tfieldNamePath,\n\t\ttargetFile,\n\t\ttargetPackage\n\t) {\n\t\tthis.source = source;\n\t\tthis.targetFile = targetFile;\n\t\tthis.targetPackage = targetPackage;\n\t\tthis.conditionNames = conditionNames;\n\t\tthis.fieldName = fieldNamePath;\n\t\t/** @type {WeakMap<any, FieldProcessor>} */\n\t\tthis.fieldProcessorCache = new WeakMap();\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst targetFile = resolver.ensureHook(this.targetFile);\n\t\tconst targetPackage = resolver.ensureHook(this.targetPackage);\n\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"ImportsFieldPlugin\", (request, resolveContext, callback) => {\n\t\t\t\t// When there is no description file, abort\n\t\t\t\tif (!request.descriptionFilePath || request.request === undefined) {\n\t\t\t\t\treturn callback();\n\t\t\t\t}\n\n\t\t\t\tconst remainingRequest =\n\t\t\t\t\trequest.request + request.query + request.fragment;\n\t\t\t\t/** @type {ImportsField|null} */\n\t\t\t\tconst importsField = DescriptionFileUtils.getField(\n\t\t\t\t\trequest.descriptionFileData,\n\t\t\t\t\tthis.fieldName\n\t\t\t\t);\n\t\t\t\tif (!importsField) return callback();\n\n\t\t\t\tif (request.directory) {\n\t\t\t\t\treturn callback(\n\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t`Resolving to directories is not possible with the imports field (request was ${remainingRequest}/)`\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tlet paths;\n\n\t\t\t\ttry {\n\t\t\t\t\t// We attach the cache to the description file instead of the importsField value\n\t\t\t\t\t// because we use a WeakMap and the importsField could be a string too.\n\t\t\t\t\t// Description file is always an object when exports field can be accessed.\n\t\t\t\t\tlet fieldProcessor = this.fieldProcessorCache.get(\n\t\t\t\t\t\trequest.descriptionFileData\n\t\t\t\t\t);\n\t\t\t\t\tif (fieldProcessor === undefined) {\n\t\t\t\t\t\tfieldProcessor = processImportsField(importsField);\n\t\t\t\t\t\tthis.fieldProcessorCache.set(\n\t\t\t\t\t\t\trequest.descriptionFileData,\n\t\t\t\t\t\t\tfieldProcessor\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tpaths = fieldProcessor(remainingRequest, this.conditionNames);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tif (resolveContext.log) {\n\t\t\t\t\t\tresolveContext.log(\n\t\t\t\t\t\t\t`Imports field in ${request.descriptionFilePath} can't be processed: ${err}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn callback(err);\n\t\t\t\t}\n\n\t\t\t\tif (paths.length === 0) {\n\t\t\t\t\treturn callback(\n\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t`Package import ${remainingRequest} is not imported from package ${request.descriptionFileRoot} (see imports field in ${request.descriptionFilePath})`\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tforEachBail(\n\t\t\t\t\tpaths,\n\t\t\t\t\t(p, callback) => {\n\t\t\t\t\t\tconst parsedIdentifier = parseIdentifier(p);\n\n\t\t\t\t\t\tif (!parsedIdentifier) return callback();\n\n\t\t\t\t\t\tconst [path_, query, fragment] = parsedIdentifier;\n\n\t\t\t\t\t\tconst error = checkImportsExportsFieldTarget(path_);\n\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\treturn callback(error);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tswitch (path_.charCodeAt(0)) {\n\t\t\t\t\t\t\t// should be relative\n\t\t\t\t\t\t\tcase dotCode: {\n\t\t\t\t\t\t\t\tconst obj = {\n\t\t\t\t\t\t\t\t\t...request,\n\t\t\t\t\t\t\t\t\trequest: undefined,\n\t\t\t\t\t\t\t\t\tpath: path.join(\n\t\t\t\t\t\t\t\t\t\t/** @type {string} */ (request.descriptionFileRoot),\n\t\t\t\t\t\t\t\t\t\tpath_\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\trelativePath: path_,\n\t\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\t\tfragment\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\t\t\t\ttargetFile,\n\t\t\t\t\t\t\t\t\tobj,\n\t\t\t\t\t\t\t\t\t\"using imports field: \" + p,\n\t\t\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// package resolving\n\t\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\t\tconst obj = {\n\t\t\t\t\t\t\t\t\t...request,\n\t\t\t\t\t\t\t\t\trequest: path_,\n\t\t\t\t\t\t\t\t\trelativePath: path_,\n\t\t\t\t\t\t\t\t\tfullySpecified: true,\n\t\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\t\tfragment\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\t\t\t\ttargetPackage,\n\t\t\t\t\t\t\t\t\tobj,\n\t\t\t\t\t\t\t\t\t\"using imports field: \" + p,\n\t\t\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t(err, result) => callback(err, result || null)\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}