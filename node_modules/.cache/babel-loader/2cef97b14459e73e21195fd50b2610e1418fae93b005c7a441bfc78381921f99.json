{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Priority queue that processes tasks in natural ordering (lower priority first)\n * accoridng to the priority computed by the function passed in the constructor.\n *\n * FIFO ordering isn't guaranteed for tasks with the same priority.\n *\n * Worker specific tasks with the same priority as a non-worker specific task\n * are always processed first.\n */\nvar PriorityQueue = /*#__PURE__*/function () {\n  function PriorityQueue(_computePriority) {\n    _classCallCheck(this, PriorityQueue);\n    _defineProperty(this, '_queue', []);\n    _defineProperty(this, '_sharedQueue', new MinHeap());\n    this._computePriority = _computePriority;\n  }\n  _createClass(PriorityQueue, [{\n    key: \"enqueue\",\n    value: function enqueue(task, workerId) {\n      if (workerId == null) {\n        this._enqueue(task, this._sharedQueue);\n      } else {\n        var queue = this._getWorkerQueue(workerId);\n        this._enqueue(task, queue);\n      }\n    }\n  }, {\n    key: \"_enqueue\",\n    value: function _enqueue(task, queue) {\n      var item = {\n        priority: this._computePriority.apply(this, [task.request[2]].concat(_toConsumableArray(task.request[3]))),\n        task: task\n      };\n      queue.add(item);\n    }\n  }, {\n    key: \"dequeue\",\n    value: function dequeue(workerId) {\n      var workerQueue = this._getWorkerQueue(workerId);\n      var workerTop = workerQueue.peek();\n      var sharedTop = this._sharedQueue.peek(); // use the task from the worker queue if there's no task in the shared queue\n      // or if the priority of the worker queue is smaller or equal to the\n      // priority of the top task in the shared queue. The tasks of the\n      // worker specific queue are preferred because no other worker can pick this\n      // specific task up.\n\n      if (sharedTop == null || workerTop != null && workerTop.priority <= sharedTop.priority) {\n        var _workerQueue$poll$tas, _workerQueue$poll;\n        return (_workerQueue$poll$tas = (_workerQueue$poll = workerQueue.poll()) === null || _workerQueue$poll === void 0 ? void 0 : _workerQueue$poll.task) !== null && _workerQueue$poll$tas !== void 0 ? _workerQueue$poll$tas : null;\n      }\n      return this._sharedQueue.poll().task;\n    }\n  }, {\n    key: \"_getWorkerQueue\",\n    value: function _getWorkerQueue(workerId) {\n      var queue = this._queue[workerId];\n      if (queue == null) {\n        queue = this._queue[workerId] = new MinHeap();\n      }\n      return queue;\n    }\n  }]);\n  return PriorityQueue;\n}();\nexports.default = PriorityQueue;\nvar MinHeap = /*#__PURE__*/function () {\n  function MinHeap() {\n    _classCallCheck(this, MinHeap);\n    _defineProperty(this, '_heap', []);\n  }\n  _createClass(MinHeap, [{\n    key: \"peek\",\n    value: function peek() {\n      var _this$_heap$;\n      return (_this$_heap$ = this._heap[0]) !== null && _this$_heap$ !== void 0 ? _this$_heap$ : null;\n    }\n  }, {\n    key: \"add\",\n    value: function add(item) {\n      var nodes = this._heap;\n      nodes.push(item);\n      if (nodes.length === 1) {\n        return;\n      }\n      var currentIndex = nodes.length - 1; // Bubble up the added node as long as the parent is bigger\n\n      while (currentIndex > 0) {\n        var parentIndex = Math.floor((currentIndex + 1) / 2) - 1;\n        var parent = nodes[parentIndex];\n        if (parent.priority <= item.priority) {\n          break;\n        }\n        nodes[currentIndex] = parent;\n        nodes[parentIndex] = item;\n        currentIndex = parentIndex;\n      }\n    }\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      var nodes = this._heap;\n      var result = nodes[0];\n      var lastElement = nodes.pop(); // heap was empty or removed the last element\n\n      if (result == null || nodes.length === 0) {\n        return result !== null && result !== void 0 ? result : null;\n      }\n      var index = 0;\n      nodes[0] = lastElement !== null && lastElement !== void 0 ? lastElement : null;\n      var element = nodes[0];\n      while (true) {\n        var swapIndex = null;\n        var rightChildIndex = (index + 1) * 2;\n        var leftChildIndex = rightChildIndex - 1;\n        var rightChild = nodes[rightChildIndex];\n        var leftChild = nodes[leftChildIndex]; // if the left child is smaller, swap with the left\n\n        if (leftChild != null && leftChild.priority < element.priority) {\n          swapIndex = leftChildIndex;\n        } // If the right child is smaller or the right child is smaller than the left\n        // then swap with the right child\n\n        if (rightChild != null && rightChild.priority < (swapIndex == null ? element : leftChild).priority) {\n          swapIndex = rightChildIndex;\n        }\n        if (swapIndex == null) {\n          break;\n        }\n        nodes[index] = nodes[swapIndex];\n        nodes[swapIndex] = element;\n        index = swapIndex;\n      }\n      return result;\n    }\n  }]);\n  return MinHeap;\n}();","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_defineProperty","obj","key","enumerable","configurable","writable","PriorityQueue","_computePriority","MinHeap","task","workerId","_enqueue","_sharedQueue","queue","_getWorkerQueue","item","priority","request","add","workerQueue","workerTop","peek","sharedTop","_workerQueue$poll$tas","_workerQueue$poll","poll","_queue","_this$_heap$","_heap","nodes","push","length","currentIndex","parentIndex","Math","floor","parent","result","lastElement","pop","index","element","swapIndex","rightChildIndex","leftChildIndex","rightChild","leftChild"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/jest-worker/build/PriorityQueue.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Priority queue that processes tasks in natural ordering (lower priority first)\n * accoridng to the priority computed by the function passed in the constructor.\n *\n * FIFO ordering isn't guaranteed for tasks with the same priority.\n *\n * Worker specific tasks with the same priority as a non-worker specific task\n * are always processed first.\n */\nclass PriorityQueue {\n  constructor(_computePriority) {\n    _defineProperty(this, '_queue', []);\n\n    _defineProperty(this, '_sharedQueue', new MinHeap());\n\n    this._computePriority = _computePriority;\n  }\n\n  enqueue(task, workerId) {\n    if (workerId == null) {\n      this._enqueue(task, this._sharedQueue);\n    } else {\n      const queue = this._getWorkerQueue(workerId);\n\n      this._enqueue(task, queue);\n    }\n  }\n\n  _enqueue(task, queue) {\n    const item = {\n      priority: this._computePriority(task.request[2], ...task.request[3]),\n      task\n    };\n    queue.add(item);\n  }\n\n  dequeue(workerId) {\n    const workerQueue = this._getWorkerQueue(workerId);\n\n    const workerTop = workerQueue.peek();\n\n    const sharedTop = this._sharedQueue.peek(); // use the task from the worker queue if there's no task in the shared queue\n    // or if the priority of the worker queue is smaller or equal to the\n    // priority of the top task in the shared queue. The tasks of the\n    // worker specific queue are preferred because no other worker can pick this\n    // specific task up.\n\n    if (\n      sharedTop == null ||\n      (workerTop != null && workerTop.priority <= sharedTop.priority)\n    ) {\n      var _workerQueue$poll$tas, _workerQueue$poll;\n\n      return (_workerQueue$poll$tas =\n        (_workerQueue$poll = workerQueue.poll()) === null ||\n        _workerQueue$poll === void 0\n          ? void 0\n          : _workerQueue$poll.task) !== null && _workerQueue$poll$tas !== void 0\n        ? _workerQueue$poll$tas\n        : null;\n    }\n\n    return this._sharedQueue.poll().task;\n  }\n\n  _getWorkerQueue(workerId) {\n    let queue = this._queue[workerId];\n\n    if (queue == null) {\n      queue = this._queue[workerId] = new MinHeap();\n    }\n\n    return queue;\n  }\n}\n\nexports.default = PriorityQueue;\n\nclass MinHeap {\n  constructor() {\n    _defineProperty(this, '_heap', []);\n  }\n\n  peek() {\n    var _this$_heap$;\n\n    return (_this$_heap$ = this._heap[0]) !== null && _this$_heap$ !== void 0\n      ? _this$_heap$\n      : null;\n  }\n\n  add(item) {\n    const nodes = this._heap;\n    nodes.push(item);\n\n    if (nodes.length === 1) {\n      return;\n    }\n\n    let currentIndex = nodes.length - 1; // Bubble up the added node as long as the parent is bigger\n\n    while (currentIndex > 0) {\n      const parentIndex = Math.floor((currentIndex + 1) / 2) - 1;\n      const parent = nodes[parentIndex];\n\n      if (parent.priority <= item.priority) {\n        break;\n      }\n\n      nodes[currentIndex] = parent;\n      nodes[parentIndex] = item;\n      currentIndex = parentIndex;\n    }\n  }\n\n  poll() {\n    const nodes = this._heap;\n    const result = nodes[0];\n    const lastElement = nodes.pop(); // heap was empty or removed the last element\n\n    if (result == null || nodes.length === 0) {\n      return result !== null && result !== void 0 ? result : null;\n    }\n\n    let index = 0;\n    nodes[0] =\n      lastElement !== null && lastElement !== void 0 ? lastElement : null;\n    const element = nodes[0];\n\n    while (true) {\n      let swapIndex = null;\n      const rightChildIndex = (index + 1) * 2;\n      const leftChildIndex = rightChildIndex - 1;\n      const rightChild = nodes[rightChildIndex];\n      const leftChild = nodes[leftChildIndex]; // if the left child is smaller, swap with the left\n\n      if (leftChild != null && leftChild.priority < element.priority) {\n        swapIndex = leftChildIndex;\n      } // If the right child is smaller or the right child is smaller than the left\n      // then swap with the right child\n\n      if (\n        rightChild != null &&\n        rightChild.priority < (swapIndex == null ? element : leftChild).priority\n      ) {\n        swapIndex = rightChildIndex;\n      }\n\n      if (swapIndex == null) {\n        break;\n      }\n\n      nodes[index] = nodes[swapIndex];\n      nodes[swapIndex] = element;\n      index = swapIndex;\n    }\n\n    return result;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}