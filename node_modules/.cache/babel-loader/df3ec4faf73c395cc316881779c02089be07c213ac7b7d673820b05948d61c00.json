{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _require = require(\"webpack-sources\"),\n  ConcatSource = _require.ConcatSource,\n  PrefixSource = _require.PrefixSource;\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../declarations/WebpackOptions\").Output} OutputOptions */\n/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"./CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"./Compilation\").AssetInfo} AssetInfo */\n/** @typedef {import(\"./Compilation\").PathData} PathData */\n/** @typedef {import(\"./DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"./ModuleTemplate\")} ModuleTemplate */\n/** @typedef {import(\"./RuntimeModule\")} RuntimeModule */\n/** @typedef {import(\"./RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"./javascript/JavascriptModulesPlugin\").ChunkRenderContext} ChunkRenderContext */\n/** @typedef {import(\"./javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\n\nvar START_LOWERCASE_ALPHABET_CODE = \"a\".charCodeAt(0);\nvar START_UPPERCASE_ALPHABET_CODE = \"A\".charCodeAt(0);\nvar DELTA_A_TO_Z = \"z\".charCodeAt(0) - START_LOWERCASE_ALPHABET_CODE + 1;\nvar NUMBER_OF_IDENTIFIER_START_CHARS = DELTA_A_TO_Z * 2 + 2; // a-z A-Z _ $\nvar NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS = NUMBER_OF_IDENTIFIER_START_CHARS + 10; // a-z A-Z _ $ 0-9\nvar FUNCTION_CONTENT_REGEX = /^function\\s?\\(\\)\\s?\\{\\r?\\n?|\\r?\\n?\\}$/g;\nvar INDENT_MULTILINE_REGEX = /^\\t/gm;\nvar LINE_SEPARATOR_REGEX = /\\r?\\n/g;\nvar IDENTIFIER_NAME_REPLACE_REGEX = /^([^a-zA-Z$_])/;\nvar IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX = /[^a-zA-Z0-9$]+/g;\nvar COMMENT_END_REGEX = /\\*\\//g;\nvar PATH_NAME_NORMALIZE_REPLACE_REGEX = /[^a-zA-Z0-9_!§$()=\\-^°]+/g;\nvar MATCH_PADDED_HYPHENS_REPLACE_REGEX = /^-|-$/g;\n\n/**\n * @typedef {Object} RenderManifestOptions\n * @property {Chunk} chunk the chunk used to render\n * @property {string} hash\n * @property {string} fullHash\n * @property {OutputOptions} outputOptions\n * @property {CodeGenerationResults} codeGenerationResults\n * @property {{javascript: ModuleTemplate}} moduleTemplates\n * @property {DependencyTemplates} dependencyTemplates\n * @property {RuntimeTemplate} runtimeTemplate\n * @property {ModuleGraph} moduleGraph\n * @property {ChunkGraph} chunkGraph\n */\n\n/** @typedef {RenderManifestEntryTemplated | RenderManifestEntryStatic} RenderManifestEntry */\n\n/**\n * @typedef {Object} RenderManifestEntryTemplated\n * @property {function(): Source} render\n * @property {string | function(PathData, AssetInfo=): string} filenameTemplate\n * @property {PathData=} pathOptions\n * @property {AssetInfo=} info\n * @property {string} identifier\n * @property {string=} hash\n * @property {boolean=} auxiliary\n */\n\n/**\n * @typedef {Object} RenderManifestEntryStatic\n * @property {function(): Source} render\n * @property {string} filename\n * @property {AssetInfo} info\n * @property {string} identifier\n * @property {string=} hash\n * @property {boolean=} auxiliary\n */\n\n/**\n * @typedef {Object} HasId\n * @property {number | string} id\n */\n\n/**\n * @typedef {function(Module, number): boolean} ModuleFilterPredicate\n */\nvar Template = /*#__PURE__*/function () {\n  function Template() {\n    _classCallCheck(this, Template);\n  }\n  _createClass(Template, null, [{\n    key: \"getFunctionContent\",\n    value:\n    /**\n     *\n     * @param {Function} fn a runtime function (.runtime.js) \"template\"\n     * @returns {string} the updated and normalized function string\n     */\n    function getFunctionContent(fn) {\n      return fn.toString().replace(FUNCTION_CONTENT_REGEX, \"\").replace(INDENT_MULTILINE_REGEX, \"\").replace(LINE_SEPARATOR_REGEX, \"\\n\");\n    }\n\n    /**\n     * @param {string} str the string converted to identifier\n     * @returns {string} created identifier\n     */\n  }, {\n    key: \"toIdentifier\",\n    value: function toIdentifier(str) {\n      if (typeof str !== \"string\") return \"\";\n      return str.replace(IDENTIFIER_NAME_REPLACE_REGEX, \"_$1\").replace(IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX, \"_\");\n    }\n    /**\n     *\n     * @param {string} str string to be converted to commented in bundle code\n     * @returns {string} returns a commented version of string\n     */\n  }, {\n    key: \"toComment\",\n    value: function toComment(str) {\n      if (!str) return \"\";\n      return \"/*! \".concat(str.replace(COMMENT_END_REGEX, \"* /\"), \" */\");\n    }\n\n    /**\n     *\n     * @param {string} str string to be converted to \"normal comment\"\n     * @returns {string} returns a commented version of string\n     */\n  }, {\n    key: \"toNormalComment\",\n    value: function toNormalComment(str) {\n      if (!str) return \"\";\n      return \"/* \".concat(str.replace(COMMENT_END_REGEX, \"* /\"), \" */\");\n    }\n\n    /**\n     * @param {string} str string path to be normalized\n     * @returns {string} normalized bundle-safe path\n     */\n  }, {\n    key: \"toPath\",\n    value: function toPath(str) {\n      if (typeof str !== \"string\") return \"\";\n      return str.replace(PATH_NAME_NORMALIZE_REPLACE_REGEX, \"-\").replace(MATCH_PADDED_HYPHENS_REPLACE_REGEX, \"\");\n    }\n\n    // map number to a single character a-z, A-Z or multiple characters if number is too big\n    /**\n     * @param {number} n number to convert to ident\n     * @returns {string} returns single character ident\n     */\n  }, {\n    key: \"numberToIdentifier\",\n    value: function numberToIdentifier(n) {\n      if (n >= NUMBER_OF_IDENTIFIER_START_CHARS) {\n        // use multiple letters\n        return Template.numberToIdentifier(n % NUMBER_OF_IDENTIFIER_START_CHARS) + Template.numberToIdentifierContinuation(Math.floor(n / NUMBER_OF_IDENTIFIER_START_CHARS));\n      }\n\n      // lower case\n      if (n < DELTA_A_TO_Z) {\n        return String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);\n      }\n      n -= DELTA_A_TO_Z;\n\n      // upper case\n      if (n < DELTA_A_TO_Z) {\n        return String.fromCharCode(START_UPPERCASE_ALPHABET_CODE + n);\n      }\n      if (n === DELTA_A_TO_Z) return \"_\";\n      return \"$\";\n    }\n\n    /**\n     * @param {number} n number to convert to ident\n     * @returns {string} returns single character ident\n     */\n  }, {\n    key: \"numberToIdentifierContinuation\",\n    value: function numberToIdentifierContinuation(n) {\n      if (n >= NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS) {\n        // use multiple letters\n        return Template.numberToIdentifierContinuation(n % NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS) + Template.numberToIdentifierContinuation(Math.floor(n / NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS));\n      }\n\n      // lower case\n      if (n < DELTA_A_TO_Z) {\n        return String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);\n      }\n      n -= DELTA_A_TO_Z;\n\n      // upper case\n      if (n < DELTA_A_TO_Z) {\n        return String.fromCharCode(START_UPPERCASE_ALPHABET_CODE + n);\n      }\n      n -= DELTA_A_TO_Z;\n\n      // numbers\n      if (n < 10) {\n        return \"\".concat(n);\n      }\n      if (n === 10) return \"_\";\n      return \"$\";\n    }\n\n    /**\n     *\n     * @param {string | string[]} s string to convert to identity\n     * @returns {string} converted identity\n     */\n  }, {\n    key: \"indent\",\n    value: function indent(s) {\n      if (Array.isArray(s)) {\n        return s.map(Template.indent).join(\"\\n\");\n      } else {\n        var str = s.trimEnd();\n        if (!str) return \"\";\n        var ind = str[0] === \"\\n\" ? \"\" : \"\\t\";\n        return ind + str.replace(/\\n([^\\n])/g, \"\\n\\t$1\");\n      }\n    }\n\n    /**\n     *\n     * @param {string|string[]} s string to create prefix for\n     * @param {string} prefix prefix to compose\n     * @returns {string} returns new prefix string\n     */\n  }, {\n    key: \"prefix\",\n    value: function prefix(s, _prefix) {\n      var str = Template.asString(s).trim();\n      if (!str) return \"\";\n      var ind = str[0] === \"\\n\" ? \"\" : _prefix;\n      return ind + str.replace(/\\n([^\\n])/g, \"\\n\" + _prefix + \"$1\");\n    }\n\n    /**\n     *\n     * @param {string|string[]} str string or string collection\n     * @returns {string} returns a single string from array\n     */\n  }, {\n    key: \"asString\",\n    value: function asString(str) {\n      if (Array.isArray(str)) {\n        return str.join(\"\\n\");\n      }\n      return str;\n    }\n\n    /**\n     * @typedef {Object} WithId\n     * @property {string|number} id\n     */\n\n    /**\n     * @param {WithId[]} modules a collection of modules to get array bounds for\n     * @returns {[number, number] | false} returns the upper and lower array bounds\n     * or false if not every module has a number based id\n     */\n  }, {\n    key: \"getModulesArrayBounds\",\n    value: function getModulesArrayBounds(modules) {\n      var maxId = -Infinity;\n      var minId = Infinity;\n      var _iterator = _createForOfIteratorHelper(modules),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _module = _step.value;\n          var moduleId = _module.id;\n          if (typeof moduleId !== \"number\") return false;\n          if (maxId < moduleId) maxId = moduleId;\n          if (minId > moduleId) minId = moduleId;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (minId < 16 + (\"\" + minId).length) {\n        // add minId x ',' instead of 'Array(minId).concat(…)'\n        minId = 0;\n      }\n      // start with -1 because the first module needs no comma\n      var objectOverhead = -1;\n      var _iterator2 = _createForOfIteratorHelper(modules),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _module2 = _step2.value;\n          // module id + colon + comma\n          objectOverhead += \"\".concat(_module2.id).length + 2;\n        }\n        // number of commas, or when starting non-zero the length of Array(minId).concat()\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      var arrayOverhead = minId === 0 ? maxId : 16 + \"\".concat(minId).length + maxId;\n      return arrayOverhead < objectOverhead ? [minId, maxId] : false;\n    }\n\n    /**\n     * @param {ChunkRenderContext} renderContext render context\n     * @param {Module[]} modules modules to render (should be ordered by identifier)\n     * @param {function(Module): Source} renderModule function to render a module\n     * @param {string=} prefix applying prefix strings\n     * @returns {Source} rendered chunk modules in a Source object\n     */\n  }, {\n    key: \"renderChunkModules\",\n    value: function renderChunkModules(renderContext, modules, renderModule) {\n      var prefix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n      var chunkGraph = renderContext.chunkGraph;\n      var source = new ConcatSource();\n      if (modules.length === 0) {\n        return null;\n      }\n      /** @type {{id: string|number, source: Source|string}[]} */\n      var allModules = modules.map(function (module) {\n        return {\n          id: chunkGraph.getModuleId(module),\n          source: renderModule(module) || \"false\"\n        };\n      });\n      var bounds = Template.getModulesArrayBounds(allModules);\n      if (bounds) {\n        // Render a spare array\n        var minId = bounds[0];\n        var maxId = bounds[1];\n        if (minId !== 0) {\n          source.add(\"Array(\".concat(minId, \").concat(\"));\n        }\n        source.add(\"[\\n\");\n        /** @type {Map<string|number, {id: string|number, source: Source|string}>} */\n        var _modules = new Map();\n        var _iterator3 = _createForOfIteratorHelper(allModules),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _module4 = _step3.value;\n            _modules.set(_module4.id, _module4);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n        for (var idx = minId; idx <= maxId; idx++) {\n          var _module3 = _modules.get(idx);\n          if (idx !== minId) {\n            source.add(\",\\n\");\n          }\n          source.add(\"/* \".concat(idx, \" */\"));\n          if (_module3) {\n            source.add(\"\\n\");\n            source.add(_module3.source);\n          }\n        }\n        source.add(\"\\n\" + prefix + \"]\");\n        if (minId !== 0) {\n          source.add(\")\");\n        }\n      } else {\n        // Render an object\n        source.add(\"{\\n\");\n        for (var i = 0; i < allModules.length; i++) {\n          var _module5 = allModules[i];\n          if (i !== 0) {\n            source.add(\",\\n\");\n          }\n          source.add(\"\\n/***/ \".concat(JSON.stringify(_module5.id), \":\\n\"));\n          source.add(_module5.source);\n        }\n        source.add(\"\\n\\n\".concat(prefix, \"}\"));\n      }\n      return source;\n    }\n\n    /**\n     * @param {RuntimeModule[]} runtimeModules array of runtime modules in order\n     * @param {RenderContext & { codeGenerationResults?: CodeGenerationResults }} renderContext render context\n     * @returns {Source} rendered runtime modules in a Source object\n     */\n  }, {\n    key: \"renderRuntimeModules\",\n    value: function renderRuntimeModules(runtimeModules, renderContext) {\n      var source = new ConcatSource();\n      var _iterator4 = _createForOfIteratorHelper(runtimeModules),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _module6 = _step4.value;\n          var codeGenerationResults = renderContext.codeGenerationResults;\n          var runtimeSource = void 0;\n          if (codeGenerationResults) {\n            runtimeSource = codeGenerationResults.getSource(_module6, renderContext.chunk.runtime, \"runtime\");\n          } else {\n            var codeGenResult = _module6.codeGeneration({\n              chunkGraph: renderContext.chunkGraph,\n              dependencyTemplates: renderContext.dependencyTemplates,\n              moduleGraph: renderContext.moduleGraph,\n              runtimeTemplate: renderContext.runtimeTemplate,\n              runtime: renderContext.chunk.runtime,\n              codeGenerationResults: codeGenerationResults\n            });\n            if (!codeGenResult) continue;\n            runtimeSource = codeGenResult.sources.get(\"runtime\");\n          }\n          if (runtimeSource) {\n            source.add(Template.toNormalComment(_module6.identifier()) + \"\\n\");\n            if (!_module6.shouldIsolate()) {\n              source.add(runtimeSource);\n              source.add(\"\\n\\n\");\n            } else if (renderContext.runtimeTemplate.supportsArrowFunction()) {\n              source.add(\"(() => {\\n\");\n              source.add(new PrefixSource(\"\\t\", runtimeSource));\n              source.add(\"\\n})();\\n\\n\");\n            } else {\n              source.add(\"!function() {\\n\");\n              source.add(new PrefixSource(\"\\t\", runtimeSource));\n              source.add(\"\\n}();\\n\\n\");\n            }\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      return source;\n    }\n\n    /**\n     * @param {RuntimeModule[]} runtimeModules array of runtime modules in order\n     * @param {RenderContext} renderContext render context\n     * @returns {Source} rendered chunk runtime modules in a Source object\n     */\n  }, {\n    key: \"renderChunkRuntimeModules\",\n    value: function renderChunkRuntimeModules(runtimeModules, renderContext) {\n      return new PrefixSource(\"/******/ \", new ConcatSource(\"function(__webpack_require__) { // webpackRuntimeModules\\n\", this.renderRuntimeModules(runtimeModules, renderContext), \"}\\n\"));\n    }\n  }]);\n  return Template;\n}();\nmodule.exports = Template;\nmodule.exports.NUMBER_OF_IDENTIFIER_START_CHARS = NUMBER_OF_IDENTIFIER_START_CHARS;\nmodule.exports.NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS = NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS;","map":{"version":3,"names":["require","ConcatSource","PrefixSource","START_LOWERCASE_ALPHABET_CODE","charCodeAt","START_UPPERCASE_ALPHABET_CODE","DELTA_A_TO_Z","NUMBER_OF_IDENTIFIER_START_CHARS","NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS","FUNCTION_CONTENT_REGEX","INDENT_MULTILINE_REGEX","LINE_SEPARATOR_REGEX","IDENTIFIER_NAME_REPLACE_REGEX","IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX","COMMENT_END_REGEX","PATH_NAME_NORMALIZE_REPLACE_REGEX","MATCH_PADDED_HYPHENS_REPLACE_REGEX","Template","fn","toString","replace","str","n","numberToIdentifier","numberToIdentifierContinuation","Math","floor","String","fromCharCode","s","Array","isArray","map","indent","join","trimEnd","ind","prefix","asString","trim","modules","maxId","Infinity","minId","module","moduleId","id","length","objectOverhead","arrayOverhead","renderContext","renderModule","chunkGraph","source","allModules","getModuleId","bounds","getModulesArrayBounds","add","Map","set","idx","get","i","JSON","stringify","runtimeModules","codeGenerationResults","runtimeSource","getSource","chunk","runtime","codeGenResult","codeGeneration","dependencyTemplates","moduleGraph","runtimeTemplate","sources","toNormalComment","identifier","shouldIsolate","supportsArrowFunction","renderRuntimeModules","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/Template.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { ConcatSource, PrefixSource } = require(\"webpack-sources\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../declarations/WebpackOptions\").Output} OutputOptions */\n/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"./CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"./Compilation\").AssetInfo} AssetInfo */\n/** @typedef {import(\"./Compilation\").PathData} PathData */\n/** @typedef {import(\"./DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"./ModuleTemplate\")} ModuleTemplate */\n/** @typedef {import(\"./RuntimeModule\")} RuntimeModule */\n/** @typedef {import(\"./RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"./javascript/JavascriptModulesPlugin\").ChunkRenderContext} ChunkRenderContext */\n/** @typedef {import(\"./javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\n\nconst START_LOWERCASE_ALPHABET_CODE = \"a\".charCodeAt(0);\nconst START_UPPERCASE_ALPHABET_CODE = \"A\".charCodeAt(0);\nconst DELTA_A_TO_Z = \"z\".charCodeAt(0) - START_LOWERCASE_ALPHABET_CODE + 1;\nconst NUMBER_OF_IDENTIFIER_START_CHARS = DELTA_A_TO_Z * 2 + 2; // a-z A-Z _ $\nconst NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS =\n\tNUMBER_OF_IDENTIFIER_START_CHARS + 10; // a-z A-Z _ $ 0-9\nconst FUNCTION_CONTENT_REGEX = /^function\\s?\\(\\)\\s?\\{\\r?\\n?|\\r?\\n?\\}$/g;\nconst INDENT_MULTILINE_REGEX = /^\\t/gm;\nconst LINE_SEPARATOR_REGEX = /\\r?\\n/g;\nconst IDENTIFIER_NAME_REPLACE_REGEX = /^([^a-zA-Z$_])/;\nconst IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX = /[^a-zA-Z0-9$]+/g;\nconst COMMENT_END_REGEX = /\\*\\//g;\nconst PATH_NAME_NORMALIZE_REPLACE_REGEX = /[^a-zA-Z0-9_!§$()=\\-^°]+/g;\nconst MATCH_PADDED_HYPHENS_REPLACE_REGEX = /^-|-$/g;\n\n/**\n * @typedef {Object} RenderManifestOptions\n * @property {Chunk} chunk the chunk used to render\n * @property {string} hash\n * @property {string} fullHash\n * @property {OutputOptions} outputOptions\n * @property {CodeGenerationResults} codeGenerationResults\n * @property {{javascript: ModuleTemplate}} moduleTemplates\n * @property {DependencyTemplates} dependencyTemplates\n * @property {RuntimeTemplate} runtimeTemplate\n * @property {ModuleGraph} moduleGraph\n * @property {ChunkGraph} chunkGraph\n */\n\n/** @typedef {RenderManifestEntryTemplated | RenderManifestEntryStatic} RenderManifestEntry */\n\n/**\n * @typedef {Object} RenderManifestEntryTemplated\n * @property {function(): Source} render\n * @property {string | function(PathData, AssetInfo=): string} filenameTemplate\n * @property {PathData=} pathOptions\n * @property {AssetInfo=} info\n * @property {string} identifier\n * @property {string=} hash\n * @property {boolean=} auxiliary\n */\n\n/**\n * @typedef {Object} RenderManifestEntryStatic\n * @property {function(): Source} render\n * @property {string} filename\n * @property {AssetInfo} info\n * @property {string} identifier\n * @property {string=} hash\n * @property {boolean=} auxiliary\n */\n\n/**\n * @typedef {Object} HasId\n * @property {number | string} id\n */\n\n/**\n * @typedef {function(Module, number): boolean} ModuleFilterPredicate\n */\n\nclass Template {\n\t/**\n\t *\n\t * @param {Function} fn a runtime function (.runtime.js) \"template\"\n\t * @returns {string} the updated and normalized function string\n\t */\n\tstatic getFunctionContent(fn) {\n\t\treturn fn\n\t\t\t.toString()\n\t\t\t.replace(FUNCTION_CONTENT_REGEX, \"\")\n\t\t\t.replace(INDENT_MULTILINE_REGEX, \"\")\n\t\t\t.replace(LINE_SEPARATOR_REGEX, \"\\n\");\n\t}\n\n\t/**\n\t * @param {string} str the string converted to identifier\n\t * @returns {string} created identifier\n\t */\n\tstatic toIdentifier(str) {\n\t\tif (typeof str !== \"string\") return \"\";\n\t\treturn str\n\t\t\t.replace(IDENTIFIER_NAME_REPLACE_REGEX, \"_$1\")\n\t\t\t.replace(IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX, \"_\");\n\t}\n\t/**\n\t *\n\t * @param {string} str string to be converted to commented in bundle code\n\t * @returns {string} returns a commented version of string\n\t */\n\tstatic toComment(str) {\n\t\tif (!str) return \"\";\n\t\treturn `/*! ${str.replace(COMMENT_END_REGEX, \"* /\")} */`;\n\t}\n\n\t/**\n\t *\n\t * @param {string} str string to be converted to \"normal comment\"\n\t * @returns {string} returns a commented version of string\n\t */\n\tstatic toNormalComment(str) {\n\t\tif (!str) return \"\";\n\t\treturn `/* ${str.replace(COMMENT_END_REGEX, \"* /\")} */`;\n\t}\n\n\t/**\n\t * @param {string} str string path to be normalized\n\t * @returns {string} normalized bundle-safe path\n\t */\n\tstatic toPath(str) {\n\t\tif (typeof str !== \"string\") return \"\";\n\t\treturn str\n\t\t\t.replace(PATH_NAME_NORMALIZE_REPLACE_REGEX, \"-\")\n\t\t\t.replace(MATCH_PADDED_HYPHENS_REPLACE_REGEX, \"\");\n\t}\n\n\t// map number to a single character a-z, A-Z or multiple characters if number is too big\n\t/**\n\t * @param {number} n number to convert to ident\n\t * @returns {string} returns single character ident\n\t */\n\tstatic numberToIdentifier(n) {\n\t\tif (n >= NUMBER_OF_IDENTIFIER_START_CHARS) {\n\t\t\t// use multiple letters\n\t\t\treturn (\n\t\t\t\tTemplate.numberToIdentifier(n % NUMBER_OF_IDENTIFIER_START_CHARS) +\n\t\t\t\tTemplate.numberToIdentifierContinuation(\n\t\t\t\t\tMath.floor(n / NUMBER_OF_IDENTIFIER_START_CHARS)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t// lower case\n\t\tif (n < DELTA_A_TO_Z) {\n\t\t\treturn String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);\n\t\t}\n\t\tn -= DELTA_A_TO_Z;\n\n\t\t// upper case\n\t\tif (n < DELTA_A_TO_Z) {\n\t\t\treturn String.fromCharCode(START_UPPERCASE_ALPHABET_CODE + n);\n\t\t}\n\n\t\tif (n === DELTA_A_TO_Z) return \"_\";\n\t\treturn \"$\";\n\t}\n\n\t/**\n\t * @param {number} n number to convert to ident\n\t * @returns {string} returns single character ident\n\t */\n\tstatic numberToIdentifierContinuation(n) {\n\t\tif (n >= NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS) {\n\t\t\t// use multiple letters\n\t\t\treturn (\n\t\t\t\tTemplate.numberToIdentifierContinuation(\n\t\t\t\t\tn % NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS\n\t\t\t\t) +\n\t\t\t\tTemplate.numberToIdentifierContinuation(\n\t\t\t\t\tMath.floor(n / NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t// lower case\n\t\tif (n < DELTA_A_TO_Z) {\n\t\t\treturn String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);\n\t\t}\n\t\tn -= DELTA_A_TO_Z;\n\n\t\t// upper case\n\t\tif (n < DELTA_A_TO_Z) {\n\t\t\treturn String.fromCharCode(START_UPPERCASE_ALPHABET_CODE + n);\n\t\t}\n\t\tn -= DELTA_A_TO_Z;\n\n\t\t// numbers\n\t\tif (n < 10) {\n\t\t\treturn `${n}`;\n\t\t}\n\n\t\tif (n === 10) return \"_\";\n\t\treturn \"$\";\n\t}\n\n\t/**\n\t *\n\t * @param {string | string[]} s string to convert to identity\n\t * @returns {string} converted identity\n\t */\n\tstatic indent(s) {\n\t\tif (Array.isArray(s)) {\n\t\t\treturn s.map(Template.indent).join(\"\\n\");\n\t\t} else {\n\t\t\tconst str = s.trimEnd();\n\t\t\tif (!str) return \"\";\n\t\t\tconst ind = str[0] === \"\\n\" ? \"\" : \"\\t\";\n\t\t\treturn ind + str.replace(/\\n([^\\n])/g, \"\\n\\t$1\");\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param {string|string[]} s string to create prefix for\n\t * @param {string} prefix prefix to compose\n\t * @returns {string} returns new prefix string\n\t */\n\tstatic prefix(s, prefix) {\n\t\tconst str = Template.asString(s).trim();\n\t\tif (!str) return \"\";\n\t\tconst ind = str[0] === \"\\n\" ? \"\" : prefix;\n\t\treturn ind + str.replace(/\\n([^\\n])/g, \"\\n\" + prefix + \"$1\");\n\t}\n\n\t/**\n\t *\n\t * @param {string|string[]} str string or string collection\n\t * @returns {string} returns a single string from array\n\t */\n\tstatic asString(str) {\n\t\tif (Array.isArray(str)) {\n\t\t\treturn str.join(\"\\n\");\n\t\t}\n\t\treturn str;\n\t}\n\n\t/**\n\t * @typedef {Object} WithId\n\t * @property {string|number} id\n\t */\n\n\t/**\n\t * @param {WithId[]} modules a collection of modules to get array bounds for\n\t * @returns {[number, number] | false} returns the upper and lower array bounds\n\t * or false if not every module has a number based id\n\t */\n\tstatic getModulesArrayBounds(modules) {\n\t\tlet maxId = -Infinity;\n\t\tlet minId = Infinity;\n\t\tfor (const module of modules) {\n\t\t\tconst moduleId = module.id;\n\t\t\tif (typeof moduleId !== \"number\") return false;\n\t\t\tif (maxId < moduleId) maxId = moduleId;\n\t\t\tif (minId > moduleId) minId = moduleId;\n\t\t}\n\t\tif (minId < 16 + (\"\" + minId).length) {\n\t\t\t// add minId x ',' instead of 'Array(minId).concat(…)'\n\t\t\tminId = 0;\n\t\t}\n\t\t// start with -1 because the first module needs no comma\n\t\tlet objectOverhead = -1;\n\t\tfor (const module of modules) {\n\t\t\t// module id + colon + comma\n\t\t\tobjectOverhead += `${module.id}`.length + 2;\n\t\t}\n\t\t// number of commas, or when starting non-zero the length of Array(minId).concat()\n\t\tconst arrayOverhead = minId === 0 ? maxId : 16 + `${minId}`.length + maxId;\n\t\treturn arrayOverhead < objectOverhead ? [minId, maxId] : false;\n\t}\n\n\t/**\n\t * @param {ChunkRenderContext} renderContext render context\n\t * @param {Module[]} modules modules to render (should be ordered by identifier)\n\t * @param {function(Module): Source} renderModule function to render a module\n\t * @param {string=} prefix applying prefix strings\n\t * @returns {Source} rendered chunk modules in a Source object\n\t */\n\tstatic renderChunkModules(renderContext, modules, renderModule, prefix = \"\") {\n\t\tconst { chunkGraph } = renderContext;\n\t\tvar source = new ConcatSource();\n\t\tif (modules.length === 0) {\n\t\t\treturn null;\n\t\t}\n\t\t/** @type {{id: string|number, source: Source|string}[]} */\n\t\tconst allModules = modules.map(module => {\n\t\t\treturn {\n\t\t\t\tid: chunkGraph.getModuleId(module),\n\t\t\t\tsource: renderModule(module) || \"false\"\n\t\t\t};\n\t\t});\n\t\tconst bounds = Template.getModulesArrayBounds(allModules);\n\t\tif (bounds) {\n\t\t\t// Render a spare array\n\t\t\tconst minId = bounds[0];\n\t\t\tconst maxId = bounds[1];\n\t\t\tif (minId !== 0) {\n\t\t\t\tsource.add(`Array(${minId}).concat(`);\n\t\t\t}\n\t\t\tsource.add(\"[\\n\");\n\t\t\t/** @type {Map<string|number, {id: string|number, source: Source|string}>} */\n\t\t\tconst modules = new Map();\n\t\t\tfor (const module of allModules) {\n\t\t\t\tmodules.set(module.id, module);\n\t\t\t}\n\t\t\tfor (let idx = minId; idx <= maxId; idx++) {\n\t\t\t\tconst module = modules.get(idx);\n\t\t\t\tif (idx !== minId) {\n\t\t\t\t\tsource.add(\",\\n\");\n\t\t\t\t}\n\t\t\t\tsource.add(`/* ${idx} */`);\n\t\t\t\tif (module) {\n\t\t\t\t\tsource.add(\"\\n\");\n\t\t\t\t\tsource.add(module.source);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsource.add(\"\\n\" + prefix + \"]\");\n\t\t\tif (minId !== 0) {\n\t\t\t\tsource.add(\")\");\n\t\t\t}\n\t\t} else {\n\t\t\t// Render an object\n\t\t\tsource.add(\"{\\n\");\n\t\t\tfor (let i = 0; i < allModules.length; i++) {\n\t\t\t\tconst module = allModules[i];\n\t\t\t\tif (i !== 0) {\n\t\t\t\t\tsource.add(\",\\n\");\n\t\t\t\t}\n\t\t\t\tsource.add(`\\n/***/ ${JSON.stringify(module.id)}:\\n`);\n\t\t\t\tsource.add(module.source);\n\t\t\t}\n\t\t\tsource.add(`\\n\\n${prefix}}`);\n\t\t}\n\t\treturn source;\n\t}\n\n\t/**\n\t * @param {RuntimeModule[]} runtimeModules array of runtime modules in order\n\t * @param {RenderContext & { codeGenerationResults?: CodeGenerationResults }} renderContext render context\n\t * @returns {Source} rendered runtime modules in a Source object\n\t */\n\tstatic renderRuntimeModules(runtimeModules, renderContext) {\n\t\tconst source = new ConcatSource();\n\t\tfor (const module of runtimeModules) {\n\t\t\tconst codeGenerationResults = renderContext.codeGenerationResults;\n\t\t\tlet runtimeSource;\n\t\t\tif (codeGenerationResults) {\n\t\t\t\truntimeSource = codeGenerationResults.getSource(\n\t\t\t\t\tmodule,\n\t\t\t\t\trenderContext.chunk.runtime,\n\t\t\t\t\t\"runtime\"\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst codeGenResult = module.codeGeneration({\n\t\t\t\t\tchunkGraph: renderContext.chunkGraph,\n\t\t\t\t\tdependencyTemplates: renderContext.dependencyTemplates,\n\t\t\t\t\tmoduleGraph: renderContext.moduleGraph,\n\t\t\t\t\truntimeTemplate: renderContext.runtimeTemplate,\n\t\t\t\t\truntime: renderContext.chunk.runtime,\n\t\t\t\t\tcodeGenerationResults\n\t\t\t\t});\n\t\t\t\tif (!codeGenResult) continue;\n\t\t\t\truntimeSource = codeGenResult.sources.get(\"runtime\");\n\t\t\t}\n\t\t\tif (runtimeSource) {\n\t\t\t\tsource.add(Template.toNormalComment(module.identifier()) + \"\\n\");\n\t\t\t\tif (!module.shouldIsolate()) {\n\t\t\t\t\tsource.add(runtimeSource);\n\t\t\t\t\tsource.add(\"\\n\\n\");\n\t\t\t\t} else if (renderContext.runtimeTemplate.supportsArrowFunction()) {\n\t\t\t\t\tsource.add(\"(() => {\\n\");\n\t\t\t\t\tsource.add(new PrefixSource(\"\\t\", runtimeSource));\n\t\t\t\t\tsource.add(\"\\n})();\\n\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tsource.add(\"!function() {\\n\");\n\t\t\t\t\tsource.add(new PrefixSource(\"\\t\", runtimeSource));\n\t\t\t\t\tsource.add(\"\\n}();\\n\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn source;\n\t}\n\n\t/**\n\t * @param {RuntimeModule[]} runtimeModules array of runtime modules in order\n\t * @param {RenderContext} renderContext render context\n\t * @returns {Source} rendered chunk runtime modules in a Source object\n\t */\n\tstatic renderChunkRuntimeModules(runtimeModules, renderContext) {\n\t\treturn new PrefixSource(\n\t\t\t\"/******/ \",\n\t\t\tnew ConcatSource(\n\t\t\t\t\"function(__webpack_require__) { // webpackRuntimeModules\\n\",\n\t\t\t\tthis.renderRuntimeModules(runtimeModules, renderContext),\n\t\t\t\t\"}\\n\"\n\t\t\t)\n\t\t);\n\t}\n}\n\nmodule.exports = Template;\nmodule.exports.NUMBER_OF_IDENTIFIER_START_CHARS =\n\tNUMBER_OF_IDENTIFIER_START_CHARS;\nmodule.exports.NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS =\n\tNUMBER_OF_IDENTIFIER_CONTINUATION_CHARS;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}