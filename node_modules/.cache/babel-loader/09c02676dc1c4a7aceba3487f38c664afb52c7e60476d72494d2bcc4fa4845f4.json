{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar RuntimeGlobals = require(\"../RuntimeGlobals\");\nvar StartupChunkDependenciesPlugin = require(\"../runtime/StartupChunkDependenciesPlugin\");\nvar ImportScriptsChunkLoadingRuntimeModule = require(\"./ImportScriptsChunkLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\nvar ImportScriptsChunkLoadingPlugin = /*#__PURE__*/function () {\n  function ImportScriptsChunkLoadingPlugin() {\n    _classCallCheck(this, ImportScriptsChunkLoadingPlugin);\n  }\n  _createClass(ImportScriptsChunkLoadingPlugin, [{\n    key: \"apply\",\n    value:\n    /**\n     * Apply the plugin\n     * @param {Compiler} compiler the compiler instance\n     * @returns {void}\n     */\n    function apply(compiler) {\n      new StartupChunkDependenciesPlugin({\n        chunkLoading: \"import-scripts\",\n        asyncChunkLoading: true\n      }).apply(compiler);\n      compiler.hooks.thisCompilation.tap(\"ImportScriptsChunkLoadingPlugin\", function (compilation) {\n        var globalChunkLoading = compilation.outputOptions.chunkLoading;\n        var isEnabledForChunk = function isEnabledForChunk(chunk) {\n          var options = chunk.getEntryOptions();\n          var chunkLoading = options && options.chunkLoading !== undefined ? options.chunkLoading : globalChunkLoading;\n          return chunkLoading === \"import-scripts\";\n        };\n        var onceForChunkSet = new WeakSet();\n        var handler = function handler(chunk, set) {\n          if (onceForChunkSet.has(chunk)) return;\n          onceForChunkSet.add(chunk);\n          if (!isEnabledForChunk(chunk)) return;\n          var withCreateScriptUrl = !!compilation.outputOptions.trustedTypes;\n          set.add(RuntimeGlobals.moduleFactoriesAddOnly);\n          set.add(RuntimeGlobals.hasOwnProperty);\n          if (withCreateScriptUrl) {\n            set.add(RuntimeGlobals.createScriptUrl);\n          }\n          compilation.addRuntimeModule(chunk, new ImportScriptsChunkLoadingRuntimeModule(set, withCreateScriptUrl));\n        };\n        compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.ensureChunkHandlers).tap(\"ImportScriptsChunkLoadingPlugin\", handler);\n        compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hmrDownloadUpdateHandlers).tap(\"ImportScriptsChunkLoadingPlugin\", handler);\n        compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hmrDownloadManifest).tap(\"ImportScriptsChunkLoadingPlugin\", handler);\n        compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.baseURI).tap(\"ImportScriptsChunkLoadingPlugin\", handler);\n        compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.ensureChunkHandlers).tap(\"ImportScriptsChunkLoadingPlugin\", function (chunk, set) {\n          if (!isEnabledForChunk(chunk)) return;\n          set.add(RuntimeGlobals.publicPath);\n          set.add(RuntimeGlobals.getChunkScriptFilename);\n        });\n        compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hmrDownloadUpdateHandlers).tap(\"ImportScriptsChunkLoadingPlugin\", function (chunk, set) {\n          if (!isEnabledForChunk(chunk)) return;\n          set.add(RuntimeGlobals.publicPath);\n          set.add(RuntimeGlobals.getChunkUpdateScriptFilename);\n          set.add(RuntimeGlobals.moduleCache);\n          set.add(RuntimeGlobals.hmrModuleData);\n          set.add(RuntimeGlobals.moduleFactoriesAddOnly);\n        });\n        compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hmrDownloadManifest).tap(\"ImportScriptsChunkLoadingPlugin\", function (chunk, set) {\n          if (!isEnabledForChunk(chunk)) return;\n          set.add(RuntimeGlobals.publicPath);\n          set.add(RuntimeGlobals.getUpdateManifestFilename);\n        });\n      });\n    }\n  }]);\n  return ImportScriptsChunkLoadingPlugin;\n}();\nmodule.exports = ImportScriptsChunkLoadingPlugin;","map":{"version":3,"names":["RuntimeGlobals","require","StartupChunkDependenciesPlugin","ImportScriptsChunkLoadingRuntimeModule","ImportScriptsChunkLoadingPlugin","compiler","chunkLoading","asyncChunkLoading","apply","hooks","thisCompilation","tap","compilation","globalChunkLoading","outputOptions","isEnabledForChunk","chunk","options","getEntryOptions","undefined","onceForChunkSet","WeakSet","handler","set","has","add","withCreateScriptUrl","trustedTypes","moduleFactoriesAddOnly","hasOwnProperty","createScriptUrl","addRuntimeModule","runtimeRequirementInTree","for","ensureChunkHandlers","hmrDownloadUpdateHandlers","hmrDownloadManifest","baseURI","publicPath","getChunkScriptFilename","getChunkUpdateScriptFilename","moduleCache","hmrModuleData","getUpdateManifestFilename","module","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/webworker/ImportScriptsChunkLoadingPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst StartupChunkDependenciesPlugin = require(\"../runtime/StartupChunkDependenciesPlugin\");\nconst ImportScriptsChunkLoadingRuntimeModule = require(\"./ImportScriptsChunkLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass ImportScriptsChunkLoadingPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tnew StartupChunkDependenciesPlugin({\n\t\t\tchunkLoading: \"import-scripts\",\n\t\t\tasyncChunkLoading: true\n\t\t}).apply(compiler);\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"ImportScriptsChunkLoadingPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tconst globalChunkLoading = compilation.outputOptions.chunkLoading;\n\t\t\t\tconst isEnabledForChunk = chunk => {\n\t\t\t\t\tconst options = chunk.getEntryOptions();\n\t\t\t\t\tconst chunkLoading =\n\t\t\t\t\t\toptions && options.chunkLoading !== undefined\n\t\t\t\t\t\t\t? options.chunkLoading\n\t\t\t\t\t\t\t: globalChunkLoading;\n\t\t\t\t\treturn chunkLoading === \"import-scripts\";\n\t\t\t\t};\n\t\t\t\tconst onceForChunkSet = new WeakSet();\n\t\t\t\tconst handler = (chunk, set) => {\n\t\t\t\t\tif (onceForChunkSet.has(chunk)) return;\n\t\t\t\t\tonceForChunkSet.add(chunk);\n\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\tconst withCreateScriptUrl = !!compilation.outputOptions.trustedTypes;\n\t\t\t\t\tset.add(RuntimeGlobals.moduleFactoriesAddOnly);\n\t\t\t\t\tset.add(RuntimeGlobals.hasOwnProperty);\n\t\t\t\t\tif (withCreateScriptUrl) {\n\t\t\t\t\t\tset.add(RuntimeGlobals.createScriptUrl);\n\t\t\t\t\t}\n\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\tchunk,\n\t\t\t\t\t\tnew ImportScriptsChunkLoadingRuntimeModule(set, withCreateScriptUrl)\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.ensureChunkHandlers)\n\t\t\t\t\t.tap(\"ImportScriptsChunkLoadingPlugin\", handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.hmrDownloadUpdateHandlers)\n\t\t\t\t\t.tap(\"ImportScriptsChunkLoadingPlugin\", handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.hmrDownloadManifest)\n\t\t\t\t\t.tap(\"ImportScriptsChunkLoadingPlugin\", handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.baseURI)\n\t\t\t\t\t.tap(\"ImportScriptsChunkLoadingPlugin\", handler);\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.ensureChunkHandlers)\n\t\t\t\t\t.tap(\"ImportScriptsChunkLoadingPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tset.add(RuntimeGlobals.publicPath);\n\t\t\t\t\t\tset.add(RuntimeGlobals.getChunkScriptFilename);\n\t\t\t\t\t});\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.hmrDownloadUpdateHandlers)\n\t\t\t\t\t.tap(\"ImportScriptsChunkLoadingPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tset.add(RuntimeGlobals.publicPath);\n\t\t\t\t\t\tset.add(RuntimeGlobals.getChunkUpdateScriptFilename);\n\t\t\t\t\t\tset.add(RuntimeGlobals.moduleCache);\n\t\t\t\t\t\tset.add(RuntimeGlobals.hmrModuleData);\n\t\t\t\t\t\tset.add(RuntimeGlobals.moduleFactoriesAddOnly);\n\t\t\t\t\t});\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.hmrDownloadManifest)\n\t\t\t\t\t.tap(\"ImportScriptsChunkLoadingPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tset.add(RuntimeGlobals.publicPath);\n\t\t\t\t\t\tset.add(RuntimeGlobals.getUpdateManifestFilename);\n\t\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\nmodule.exports = ImportScriptsChunkLoadingPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAAC;AAAA;AAEb,IAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACnD,IAAMC,8BAA8B,GAAGD,OAAO,CAAC,2CAA2C,CAAC;AAC3F,IAAME,sCAAsC,GAAGF,OAAO,CAAC,0CAA0C,CAAC;;AAElG;AAAA,IAEMG,+BAA+B;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IACpC;AACD;AACA;AACA;AACA;IACC,eAAMC,QAAQ,EAAE;MACf,IAAIH,8BAA8B,CAAC;QAClCI,YAAY,EAAE,gBAAgB;QAC9BC,iBAAiB,EAAE;MACpB,CAAC,CAAC,CAACC,KAAK,CAACH,QAAQ,CAAC;MAClBA,QAAQ,CAACI,KAAK,CAACC,eAAe,CAACC,GAAG,CACjC,iCAAiC,EACjC,UAAAC,WAAW,EAAI;QACd,IAAMC,kBAAkB,GAAGD,WAAW,CAACE,aAAa,CAACR,YAAY;QACjE,IAAMS,iBAAiB,GAAG,SAApBA,iBAAiB,CAAGC,KAAK,EAAI;UAClC,IAAMC,OAAO,GAAGD,KAAK,CAACE,eAAe,EAAE;UACvC,IAAMZ,YAAY,GACjBW,OAAO,IAAIA,OAAO,CAACX,YAAY,KAAKa,SAAS,GAC1CF,OAAO,CAACX,YAAY,GACpBO,kBAAkB;UACtB,OAAOP,YAAY,KAAK,gBAAgB;QACzC,CAAC;QACD,IAAMc,eAAe,GAAG,IAAIC,OAAO,EAAE;QACrC,IAAMC,OAAO,GAAG,SAAVA,OAAO,CAAIN,KAAK,EAAEO,GAAG,EAAK;UAC/B,IAAIH,eAAe,CAACI,GAAG,CAACR,KAAK,CAAC,EAAE;UAChCI,eAAe,CAACK,GAAG,CAACT,KAAK,CAAC;UAC1B,IAAI,CAACD,iBAAiB,CAACC,KAAK,CAAC,EAAE;UAC/B,IAAMU,mBAAmB,GAAG,CAAC,CAACd,WAAW,CAACE,aAAa,CAACa,YAAY;UACpEJ,GAAG,CAACE,GAAG,CAACzB,cAAc,CAAC4B,sBAAsB,CAAC;UAC9CL,GAAG,CAACE,GAAG,CAACzB,cAAc,CAAC6B,cAAc,CAAC;UACtC,IAAIH,mBAAmB,EAAE;YACxBH,GAAG,CAACE,GAAG,CAACzB,cAAc,CAAC8B,eAAe,CAAC;UACxC;UACAlB,WAAW,CAACmB,gBAAgB,CAC3Bf,KAAK,EACL,IAAIb,sCAAsC,CAACoB,GAAG,EAAEG,mBAAmB,CAAC,CACpE;QACF,CAAC;QACDd,WAAW,CAACH,KAAK,CAACuB,wBAAwB,CACxCC,GAAG,CAACjC,cAAc,CAACkC,mBAAmB,CAAC,CACvCvB,GAAG,CAAC,iCAAiC,EAAEW,OAAO,CAAC;QACjDV,WAAW,CAACH,KAAK,CAACuB,wBAAwB,CACxCC,GAAG,CAACjC,cAAc,CAACmC,yBAAyB,CAAC,CAC7CxB,GAAG,CAAC,iCAAiC,EAAEW,OAAO,CAAC;QACjDV,WAAW,CAACH,KAAK,CAACuB,wBAAwB,CACxCC,GAAG,CAACjC,cAAc,CAACoC,mBAAmB,CAAC,CACvCzB,GAAG,CAAC,iCAAiC,EAAEW,OAAO,CAAC;QACjDV,WAAW,CAACH,KAAK,CAACuB,wBAAwB,CACxCC,GAAG,CAACjC,cAAc,CAACqC,OAAO,CAAC,CAC3B1B,GAAG,CAAC,iCAAiC,EAAEW,OAAO,CAAC;QAEjDV,WAAW,CAACH,KAAK,CAACuB,wBAAwB,CACxCC,GAAG,CAACjC,cAAc,CAACkC,mBAAmB,CAAC,CACvCvB,GAAG,CAAC,iCAAiC,EAAE,UAACK,KAAK,EAAEO,GAAG,EAAK;UACvD,IAAI,CAACR,iBAAiB,CAACC,KAAK,CAAC,EAAE;UAC/BO,GAAG,CAACE,GAAG,CAACzB,cAAc,CAACsC,UAAU,CAAC;UAClCf,GAAG,CAACE,GAAG,CAACzB,cAAc,CAACuC,sBAAsB,CAAC;QAC/C,CAAC,CAAC;QACH3B,WAAW,CAACH,KAAK,CAACuB,wBAAwB,CACxCC,GAAG,CAACjC,cAAc,CAACmC,yBAAyB,CAAC,CAC7CxB,GAAG,CAAC,iCAAiC,EAAE,UAACK,KAAK,EAAEO,GAAG,EAAK;UACvD,IAAI,CAACR,iBAAiB,CAACC,KAAK,CAAC,EAAE;UAC/BO,GAAG,CAACE,GAAG,CAACzB,cAAc,CAACsC,UAAU,CAAC;UAClCf,GAAG,CAACE,GAAG,CAACzB,cAAc,CAACwC,4BAA4B,CAAC;UACpDjB,GAAG,CAACE,GAAG,CAACzB,cAAc,CAACyC,WAAW,CAAC;UACnClB,GAAG,CAACE,GAAG,CAACzB,cAAc,CAAC0C,aAAa,CAAC;UACrCnB,GAAG,CAACE,GAAG,CAACzB,cAAc,CAAC4B,sBAAsB,CAAC;QAC/C,CAAC,CAAC;QACHhB,WAAW,CAACH,KAAK,CAACuB,wBAAwB,CACxCC,GAAG,CAACjC,cAAc,CAACoC,mBAAmB,CAAC,CACvCzB,GAAG,CAAC,iCAAiC,EAAE,UAACK,KAAK,EAAEO,GAAG,EAAK;UACvD,IAAI,CAACR,iBAAiB,CAACC,KAAK,CAAC,EAAE;UAC/BO,GAAG,CAACE,GAAG,CAACzB,cAAc,CAACsC,UAAU,CAAC;UAClCf,GAAG,CAACE,GAAG,CAACzB,cAAc,CAAC2C,yBAAyB,CAAC;QAClD,CAAC,CAAC;MACJ,CAAC,CACD;IACF;EAAC;EAAA;AAAA;AAEFC,MAAM,CAACC,OAAO,GAAGzC,+BAA+B"},"metadata":{},"sourceType":"script","externalDependencies":[]}