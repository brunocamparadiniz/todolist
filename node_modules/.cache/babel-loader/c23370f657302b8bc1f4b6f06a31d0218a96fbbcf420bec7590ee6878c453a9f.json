{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _slicedToArray = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _require = require(\"../util/comparators\"),\n  compareModulesByPreOrderIndexOrIdentifier = _require.compareModulesByPreOrderIndexOrIdentifier;\nvar createSchemaValidation = require(\"../util/create-schema-validation\");\nvar _require2 = require(\"./IdHelpers\"),\n  assignAscendingModuleIds = _require2.assignAscendingModuleIds,\n  getUsedModuleIdsAndModules = _require2.getUsedModuleIdsAndModules;\n\n/** @typedef {import(\"../../declarations/plugins/ids/OccurrenceModuleIdsPlugin\").OccurrenceModuleIdsPluginOptions} OccurrenceModuleIdsPluginOptions */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n\nvar validate = createSchemaValidation(require(\"../../schemas/plugins/ids/OccurrenceModuleIdsPlugin.check.js\"), function () {\n  return require(\"../../schemas/plugins/ids/OccurrenceModuleIdsPlugin.json\");\n}, {\n  name: \"Occurrence Order Module Ids Plugin\",\n  baseDataPath: \"options\"\n});\nvar OccurrenceModuleIdsPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {OccurrenceModuleIdsPluginOptions=} options options object\n   */\n  function OccurrenceModuleIdsPlugin() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, OccurrenceModuleIdsPlugin);\n    validate(options);\n    this.options = options;\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  _createClass(OccurrenceModuleIdsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var prioritiseInitial = this.options.prioritiseInitial;\n      compiler.hooks.compilation.tap(\"OccurrenceModuleIdsPlugin\", function (compilation) {\n        var moduleGraph = compilation.moduleGraph;\n        compilation.hooks.moduleIds.tap(\"OccurrenceModuleIdsPlugin\", function () {\n          var chunkGraph = compilation.chunkGraph;\n          var _getUsedModuleIdsAndM = getUsedModuleIdsAndModules(compilation),\n            _getUsedModuleIdsAndM2 = _slicedToArray(_getUsedModuleIdsAndM, 2),\n            usedIds = _getUsedModuleIdsAndM2[0],\n            modulesInOccurrenceOrder = _getUsedModuleIdsAndM2[1];\n          var occursInInitialChunksMap = new Map();\n          var occursInAllChunksMap = new Map();\n          var initialChunkChunkMap = new Map();\n          var entryCountMap = new Map();\n          var _iterator = _createForOfIteratorHelper(modulesInOccurrenceOrder),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _m = _step.value;\n              var initial = 0;\n              var entry = 0;\n              var _iterator7 = _createForOfIteratorHelper(chunkGraph.getModuleChunksIterable(_m)),\n                _step7;\n              try {\n                for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                  var c = _step7.value;\n                  if (c.canBeInitial()) initial++;\n                  if (chunkGraph.isEntryModuleInChunk(_m, c)) entry++;\n                }\n              } catch (err) {\n                _iterator7.e(err);\n              } finally {\n                _iterator7.f();\n              }\n              initialChunkChunkMap.set(_m, initial);\n              entryCountMap.set(_m, entry);\n            }\n\n            /**\n             * @param {Module} module module\n             * @returns {number} count of occurs\n             */\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n          var countOccursInEntry = function countOccursInEntry(module) {\n            var sum = 0;\n            var _iterator2 = _createForOfIteratorHelper(moduleGraph.getIncomingConnectionsByOriginModule(module)),\n              _step2;\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var _step2$value = _slicedToArray(_step2.value, 2),\n                  originModule = _step2$value[0],\n                  connections = _step2$value[1];\n                if (!originModule) continue;\n                if (!connections.some(function (c) {\n                  return c.isTargetActive(undefined);\n                })) continue;\n                sum += initialChunkChunkMap.get(originModule);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n            return sum;\n          };\n\n          /**\n           * @param {Module} module module\n           * @returns {number} count of occurs\n           */\n          var countOccurs = function countOccurs(module) {\n            var sum = 0;\n            var _iterator3 = _createForOfIteratorHelper(moduleGraph.getIncomingConnectionsByOriginModule(module)),\n              _step3;\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var _step3$value = _slicedToArray(_step3.value, 2),\n                  originModule = _step3$value[0],\n                  connections = _step3$value[1];\n                if (!originModule) continue;\n                var chunkModules = chunkGraph.getNumberOfModuleChunks(originModule);\n                var _iterator4 = _createForOfIteratorHelper(connections),\n                  _step4;\n                try {\n                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                    var c = _step4.value;\n                    if (!c.isTargetActive(undefined)) continue;\n                    if (!c.dependency) continue;\n                    var factor = c.dependency.getNumberOfIdOccurrences();\n                    if (factor === 0) continue;\n                    sum += factor * chunkModules;\n                  }\n                } catch (err) {\n                  _iterator4.e(err);\n                } finally {\n                  _iterator4.f();\n                }\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n            return sum;\n          };\n          if (prioritiseInitial) {\n            var _iterator5 = _createForOfIteratorHelper(modulesInOccurrenceOrder),\n              _step5;\n            try {\n              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                var m = _step5.value;\n                var result = countOccursInEntry(m) + initialChunkChunkMap.get(m) + entryCountMap.get(m);\n                occursInInitialChunksMap.set(m, result);\n              }\n            } catch (err) {\n              _iterator5.e(err);\n            } finally {\n              _iterator5.f();\n            }\n          }\n          var _iterator6 = _createForOfIteratorHelper(modulesInOccurrenceOrder),\n            _step6;\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var _m2 = _step6.value;\n              var _result = countOccurs(_m2) + chunkGraph.getNumberOfModuleChunks(_m2) + entryCountMap.get(_m2);\n              occursInAllChunksMap.set(_m2, _result);\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n          var naturalCompare = compareModulesByPreOrderIndexOrIdentifier(compilation.moduleGraph);\n          modulesInOccurrenceOrder.sort(function (a, b) {\n            if (prioritiseInitial) {\n              var aEntryOccurs = occursInInitialChunksMap.get(a);\n              var bEntryOccurs = occursInInitialChunksMap.get(b);\n              if (aEntryOccurs > bEntryOccurs) return -1;\n              if (aEntryOccurs < bEntryOccurs) return 1;\n            }\n            var aOccurs = occursInAllChunksMap.get(a);\n            var bOccurs = occursInAllChunksMap.get(b);\n            if (aOccurs > bOccurs) return -1;\n            if (aOccurs < bOccurs) return 1;\n            return naturalCompare(a, b);\n          });\n          assignAscendingModuleIds(usedIds, modulesInOccurrenceOrder, compilation);\n        });\n      });\n    }\n  }]);\n  return OccurrenceModuleIdsPlugin;\n}();\nmodule.exports = OccurrenceModuleIdsPlugin;","map":{"version":3,"names":["require","compareModulesByPreOrderIndexOrIdentifier","createSchemaValidation","assignAscendingModuleIds","getUsedModuleIdsAndModules","validate","name","baseDataPath","OccurrenceModuleIdsPlugin","options","compiler","prioritiseInitial","hooks","compilation","tap","moduleGraph","moduleIds","chunkGraph","usedIds","modulesInOccurrenceOrder","occursInInitialChunksMap","Map","occursInAllChunksMap","initialChunkChunkMap","entryCountMap","m","initial","entry","getModuleChunksIterable","c","canBeInitial","isEntryModuleInChunk","set","countOccursInEntry","module","sum","getIncomingConnectionsByOriginModule","originModule","connections","some","isTargetActive","undefined","get","countOccurs","chunkModules","getNumberOfModuleChunks","dependency","factor","getNumberOfIdOccurrences","result","naturalCompare","sort","a","b","aEntryOccurs","bEntryOccurs","aOccurs","bOccurs","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/ids/OccurrenceModuleIdsPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst {\n\tcompareModulesByPreOrderIndexOrIdentifier\n} = require(\"../util/comparators\");\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\nconst {\n\tassignAscendingModuleIds,\n\tgetUsedModuleIdsAndModules\n} = require(\"./IdHelpers\");\n\n/** @typedef {import(\"../../declarations/plugins/ids/OccurrenceModuleIdsPlugin\").OccurrenceModuleIdsPluginOptions} OccurrenceModuleIdsPluginOptions */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n\nconst validate = createSchemaValidation(\n\trequire(\"../../schemas/plugins/ids/OccurrenceModuleIdsPlugin.check.js\"),\n\t() => require(\"../../schemas/plugins/ids/OccurrenceModuleIdsPlugin.json\"),\n\t{\n\t\tname: \"Occurrence Order Module Ids Plugin\",\n\t\tbaseDataPath: \"options\"\n\t}\n);\n\nclass OccurrenceModuleIdsPlugin {\n\t/**\n\t * @param {OccurrenceModuleIdsPluginOptions=} options options object\n\t */\n\tconstructor(options = {}) {\n\t\tvalidate(options);\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst prioritiseInitial = this.options.prioritiseInitial;\n\t\tcompiler.hooks.compilation.tap(\"OccurrenceModuleIdsPlugin\", compilation => {\n\t\t\tconst moduleGraph = compilation.moduleGraph;\n\n\t\t\tcompilation.hooks.moduleIds.tap(\"OccurrenceModuleIdsPlugin\", () => {\n\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\n\t\t\t\tconst [usedIds, modulesInOccurrenceOrder] =\n\t\t\t\t\tgetUsedModuleIdsAndModules(compilation);\n\n\t\t\t\tconst occursInInitialChunksMap = new Map();\n\t\t\t\tconst occursInAllChunksMap = new Map();\n\n\t\t\t\tconst initialChunkChunkMap = new Map();\n\t\t\t\tconst entryCountMap = new Map();\n\t\t\t\tfor (const m of modulesInOccurrenceOrder) {\n\t\t\t\t\tlet initial = 0;\n\t\t\t\t\tlet entry = 0;\n\t\t\t\t\tfor (const c of chunkGraph.getModuleChunksIterable(m)) {\n\t\t\t\t\t\tif (c.canBeInitial()) initial++;\n\t\t\t\t\t\tif (chunkGraph.isEntryModuleInChunk(m, c)) entry++;\n\t\t\t\t\t}\n\t\t\t\t\tinitialChunkChunkMap.set(m, initial);\n\t\t\t\t\tentryCountMap.set(m, entry);\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * @param {Module} module module\n\t\t\t\t * @returns {number} count of occurs\n\t\t\t\t */\n\t\t\t\tconst countOccursInEntry = module => {\n\t\t\t\t\tlet sum = 0;\n\t\t\t\t\tfor (const [\n\t\t\t\t\t\toriginModule,\n\t\t\t\t\t\tconnections\n\t\t\t\t\t] of moduleGraph.getIncomingConnectionsByOriginModule(module)) {\n\t\t\t\t\t\tif (!originModule) continue;\n\t\t\t\t\t\tif (!connections.some(c => c.isTargetActive(undefined))) continue;\n\t\t\t\t\t\tsum += initialChunkChunkMap.get(originModule);\n\t\t\t\t\t}\n\t\t\t\t\treturn sum;\n\t\t\t\t};\n\n\t\t\t\t/**\n\t\t\t\t * @param {Module} module module\n\t\t\t\t * @returns {number} count of occurs\n\t\t\t\t */\n\t\t\t\tconst countOccurs = module => {\n\t\t\t\t\tlet sum = 0;\n\t\t\t\t\tfor (const [\n\t\t\t\t\t\toriginModule,\n\t\t\t\t\t\tconnections\n\t\t\t\t\t] of moduleGraph.getIncomingConnectionsByOriginModule(module)) {\n\t\t\t\t\t\tif (!originModule) continue;\n\t\t\t\t\t\tconst chunkModules =\n\t\t\t\t\t\t\tchunkGraph.getNumberOfModuleChunks(originModule);\n\t\t\t\t\t\tfor (const c of connections) {\n\t\t\t\t\t\t\tif (!c.isTargetActive(undefined)) continue;\n\t\t\t\t\t\t\tif (!c.dependency) continue;\n\t\t\t\t\t\t\tconst factor = c.dependency.getNumberOfIdOccurrences();\n\t\t\t\t\t\t\tif (factor === 0) continue;\n\t\t\t\t\t\t\tsum += factor * chunkModules;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn sum;\n\t\t\t\t};\n\n\t\t\t\tif (prioritiseInitial) {\n\t\t\t\t\tfor (const m of modulesInOccurrenceOrder) {\n\t\t\t\t\t\tconst result =\n\t\t\t\t\t\t\tcountOccursInEntry(m) +\n\t\t\t\t\t\t\tinitialChunkChunkMap.get(m) +\n\t\t\t\t\t\t\tentryCountMap.get(m);\n\t\t\t\t\t\toccursInInitialChunksMap.set(m, result);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (const m of modulesInOccurrenceOrder) {\n\t\t\t\t\tconst result =\n\t\t\t\t\t\tcountOccurs(m) +\n\t\t\t\t\t\tchunkGraph.getNumberOfModuleChunks(m) +\n\t\t\t\t\t\tentryCountMap.get(m);\n\t\t\t\t\toccursInAllChunksMap.set(m, result);\n\t\t\t\t}\n\n\t\t\t\tconst naturalCompare = compareModulesByPreOrderIndexOrIdentifier(\n\t\t\t\t\tcompilation.moduleGraph\n\t\t\t\t);\n\n\t\t\t\tmodulesInOccurrenceOrder.sort((a, b) => {\n\t\t\t\t\tif (prioritiseInitial) {\n\t\t\t\t\t\tconst aEntryOccurs = occursInInitialChunksMap.get(a);\n\t\t\t\t\t\tconst bEntryOccurs = occursInInitialChunksMap.get(b);\n\t\t\t\t\t\tif (aEntryOccurs > bEntryOccurs) return -1;\n\t\t\t\t\t\tif (aEntryOccurs < bEntryOccurs) return 1;\n\t\t\t\t\t}\n\t\t\t\t\tconst aOccurs = occursInAllChunksMap.get(a);\n\t\t\t\t\tconst bOccurs = occursInAllChunksMap.get(b);\n\t\t\t\t\tif (aOccurs > bOccurs) return -1;\n\t\t\t\t\tif (aOccurs < bOccurs) return 1;\n\t\t\t\t\treturn naturalCompare(a, b);\n\t\t\t\t});\n\n\t\t\t\tassignAscendingModuleIds(\n\t\t\t\t\tusedIds,\n\t\t\t\t\tmodulesInOccurrenceOrder,\n\t\t\t\t\tcompilation\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = OccurrenceModuleIdsPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}