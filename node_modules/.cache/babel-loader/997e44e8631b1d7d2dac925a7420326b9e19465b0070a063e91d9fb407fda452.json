{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryOptions} LibraryOptions */\n/** @typedef {import(\"../../declarations/WebpackOptions\").WasmLoadingType} WasmLoadingType */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @type {WeakMap<Compiler, Set<WasmLoadingType>>} */\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar enabledTypes = new WeakMap();\nvar getEnabledTypes = function getEnabledTypes(compiler) {\n  var set = enabledTypes.get(compiler);\n  if (set === undefined) {\n    set = new Set();\n    enabledTypes.set(compiler, set);\n  }\n  return set;\n};\nvar EnableWasmLoadingPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {WasmLoadingType} type library type that should be available\n   */\n  function EnableWasmLoadingPlugin(type) {\n    _classCallCheck(this, EnableWasmLoadingPlugin);\n    this.type = type;\n  }\n\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @param {WasmLoadingType} type type of library\n   * @returns {void}\n   */\n  _createClass(EnableWasmLoadingPlugin, [{\n    key: \"apply\",\n    value:\n    /**\n     * Apply the plugin\n     * @param {Compiler} compiler the compiler instance\n     * @returns {void}\n     */\n    function apply(compiler) {\n      var type = this.type;\n\n      // Only enable once\n      var enabled = getEnabledTypes(compiler);\n      if (enabled.has(type)) return;\n      enabled.add(type);\n      if (typeof type === \"string\") {\n        switch (type) {\n          case \"fetch\":\n            {\n              // TODO webpack 6 remove FetchCompileWasmPlugin\n              var FetchCompileWasmPlugin = require(\"../web/FetchCompileWasmPlugin\");\n              var FetchCompileAsyncWasmPlugin = require(\"../web/FetchCompileAsyncWasmPlugin\");\n              new FetchCompileWasmPlugin({\n                mangleImports: compiler.options.optimization.mangleWasmImports\n              }).apply(compiler);\n              new FetchCompileAsyncWasmPlugin().apply(compiler);\n              break;\n            }\n          case \"async-node\":\n            {\n              // TODO webpack 6 remove ReadFileCompileWasmPlugin\n              var ReadFileCompileWasmPlugin = require(\"../node/ReadFileCompileWasmPlugin\");\n              // @ts-expect-error typescript bug for duplicate require\n              var ReadFileCompileAsyncWasmPlugin = require(\"../node/ReadFileCompileAsyncWasmPlugin\");\n              new ReadFileCompileWasmPlugin({\n                mangleImports: compiler.options.optimization.mangleWasmImports\n              }).apply(compiler);\n              new ReadFileCompileAsyncWasmPlugin({\n                type: type\n              }).apply(compiler);\n              break;\n            }\n          case \"async-node-module\":\n            {\n              // @ts-expect-error typescript bug for duplicate require\n              var _ReadFileCompileAsyncWasmPlugin = require(\"../node/ReadFileCompileAsyncWasmPlugin\");\n              new _ReadFileCompileAsyncWasmPlugin({\n                type: type,\n                import: true\n              }).apply(compiler);\n              break;\n            }\n          case \"universal\":\n            throw new Error(\"Universal WebAssembly Loading is not implemented yet\");\n          default:\n            throw new Error(\"Unsupported wasm loading type \".concat(type, \".\\nPlugins which provide custom wasm loading types must call EnableWasmLoadingPlugin.setEnabled(compiler, type) to disable this error.\"));\n        }\n      } else {\n        // TODO support plugin instances here\n        // apply them to the compiler\n      }\n    }\n  }], [{\n    key: \"setEnabled\",\n    value: function setEnabled(compiler, type) {\n      getEnabledTypes(compiler).add(type);\n    }\n\n    /**\n     * @param {Compiler} compiler the compiler instance\n     * @param {WasmLoadingType} type type of library\n     * @returns {void}\n     */\n  }, {\n    key: \"checkEnabled\",\n    value: function checkEnabled(compiler, type) {\n      if (!getEnabledTypes(compiler).has(type)) {\n        throw new Error(\"Library type \\\"\".concat(type, \"\\\" is not enabled. \") + \"EnableWasmLoadingPlugin need to be used to enable this type of wasm loading. \" + 'This usually happens through the \"output.enabledWasmLoadingTypes\" option. ' + 'If you are using a function as entry which sets \"wasmLoading\", you need to add all potential library types to \"output.enabledWasmLoadingTypes\". ' + \"These types are enabled: \" + Array.from(getEnabledTypes(compiler)).join(\", \"));\n      }\n    }\n  }]);\n  return EnableWasmLoadingPlugin;\n}();\nmodule.exports = EnableWasmLoadingPlugin;","map":{"version":3,"names":["enabledTypes","WeakMap","getEnabledTypes","compiler","set","get","undefined","Set","EnableWasmLoadingPlugin","type","enabled","has","add","FetchCompileWasmPlugin","require","FetchCompileAsyncWasmPlugin","mangleImports","options","optimization","mangleWasmImports","apply","ReadFileCompileWasmPlugin","ReadFileCompileAsyncWasmPlugin","import","Error","Array","from","join","module","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/wasm/EnableWasmLoadingPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryOptions} LibraryOptions */\n/** @typedef {import(\"../../declarations/WebpackOptions\").WasmLoadingType} WasmLoadingType */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @type {WeakMap<Compiler, Set<WasmLoadingType>>} */\nconst enabledTypes = new WeakMap();\n\nconst getEnabledTypes = compiler => {\n\tlet set = enabledTypes.get(compiler);\n\tif (set === undefined) {\n\t\tset = new Set();\n\t\tenabledTypes.set(compiler, set);\n\t}\n\treturn set;\n};\n\nclass EnableWasmLoadingPlugin {\n\t/**\n\t * @param {WasmLoadingType} type library type that should be available\n\t */\n\tconstructor(type) {\n\t\tthis.type = type;\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the compiler instance\n\t * @param {WasmLoadingType} type type of library\n\t * @returns {void}\n\t */\n\tstatic setEnabled(compiler, type) {\n\t\tgetEnabledTypes(compiler).add(type);\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the compiler instance\n\t * @param {WasmLoadingType} type type of library\n\t * @returns {void}\n\t */\n\tstatic checkEnabled(compiler, type) {\n\t\tif (!getEnabledTypes(compiler).has(type)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Library type \"${type}\" is not enabled. ` +\n\t\t\t\t\t\"EnableWasmLoadingPlugin need to be used to enable this type of wasm loading. \" +\n\t\t\t\t\t'This usually happens through the \"output.enabledWasmLoadingTypes\" option. ' +\n\t\t\t\t\t'If you are using a function as entry which sets \"wasmLoading\", you need to add all potential library types to \"output.enabledWasmLoadingTypes\". ' +\n\t\t\t\t\t\"These types are enabled: \" +\n\t\t\t\t\tArray.from(getEnabledTypes(compiler)).join(\", \")\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst { type } = this;\n\n\t\t// Only enable once\n\t\tconst enabled = getEnabledTypes(compiler);\n\t\tif (enabled.has(type)) return;\n\t\tenabled.add(type);\n\n\t\tif (typeof type === \"string\") {\n\t\t\tswitch (type) {\n\t\t\t\tcase \"fetch\": {\n\t\t\t\t\t// TODO webpack 6 remove FetchCompileWasmPlugin\n\t\t\t\t\tconst FetchCompileWasmPlugin = require(\"../web/FetchCompileWasmPlugin\");\n\t\t\t\t\tconst FetchCompileAsyncWasmPlugin = require(\"../web/FetchCompileAsyncWasmPlugin\");\n\t\t\t\t\tnew FetchCompileWasmPlugin({\n\t\t\t\t\t\tmangleImports: compiler.options.optimization.mangleWasmImports\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tnew FetchCompileAsyncWasmPlugin().apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"async-node\": {\n\t\t\t\t\t// TODO webpack 6 remove ReadFileCompileWasmPlugin\n\t\t\t\t\tconst ReadFileCompileWasmPlugin = require(\"../node/ReadFileCompileWasmPlugin\");\n\t\t\t\t\t// @ts-expect-error typescript bug for duplicate require\n\t\t\t\t\tconst ReadFileCompileAsyncWasmPlugin = require(\"../node/ReadFileCompileAsyncWasmPlugin\");\n\t\t\t\t\tnew ReadFileCompileWasmPlugin({\n\t\t\t\t\t\tmangleImports: compiler.options.optimization.mangleWasmImports\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tnew ReadFileCompileAsyncWasmPlugin({ type }).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"async-node-module\": {\n\t\t\t\t\t// @ts-expect-error typescript bug for duplicate require\n\t\t\t\t\tconst ReadFileCompileAsyncWasmPlugin = require(\"../node/ReadFileCompileAsyncWasmPlugin\");\n\t\t\t\t\tnew ReadFileCompileAsyncWasmPlugin({ type, import: true }).apply(\n\t\t\t\t\t\tcompiler\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"universal\":\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\"Universal WebAssembly Loading is not implemented yet\"\n\t\t\t\t\t);\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Unsupported wasm loading type ${type}.\nPlugins which provide custom wasm loading types must call EnableWasmLoadingPlugin.setEnabled(compiler, type) to disable this error.`);\n\t\t\t}\n\t\t} else {\n\t\t\t// TODO support plugin instances here\n\t\t\t// apply them to the compiler\n\t\t}\n\t}\n}\n\nmodule.exports = EnableWasmLoadingPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;;AAEA;AAAA;AAAA;AACA,IAAMA,YAAY,GAAG,IAAIC,OAAO,EAAE;AAElC,IAAMC,eAAe,GAAG,SAAlBA,eAAe,CAAGC,QAAQ,EAAI;EACnC,IAAIC,GAAG,GAAGJ,YAAY,CAACK,GAAG,CAACF,QAAQ,CAAC;EACpC,IAAIC,GAAG,KAAKE,SAAS,EAAE;IACtBF,GAAG,GAAG,IAAIG,GAAG,EAAE;IACfP,YAAY,CAACI,GAAG,CAACD,QAAQ,EAAEC,GAAG,CAAC;EAChC;EACA,OAAOA,GAAG;AACX,CAAC;AAAC,IAEII,uBAAuB;EAC5B;AACD;AACA;EACC,iCAAYC,IAAI,EAAE;IAAA;IACjB,IAAI,CAACA,IAAI,GAAGA,IAAI;EACjB;;EAEA;AACD;AACA;AACA;AACA;EAJC;IAAA;IAAA;IA2BA;AACD;AACA;AACA;AACA;IACC,eAAMN,QAAQ,EAAE;MACf,IAAQM,IAAI,GAAK,IAAI,CAAbA,IAAI;;MAEZ;MACA,IAAMC,OAAO,GAAGR,eAAe,CAACC,QAAQ,CAAC;MACzC,IAAIO,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC,EAAE;MACvBC,OAAO,CAACE,GAAG,CAACH,IAAI,CAAC;MAEjB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;QAC7B,QAAQA,IAAI;UACX,KAAK,OAAO;YAAE;cACb;cACA,IAAMI,sBAAsB,GAAGC,OAAO,CAAC,+BAA+B,CAAC;cACvE,IAAMC,2BAA2B,GAAGD,OAAO,CAAC,oCAAoC,CAAC;cACjF,IAAID,sBAAsB,CAAC;gBAC1BG,aAAa,EAAEb,QAAQ,CAACc,OAAO,CAACC,YAAY,CAACC;cAC9C,CAAC,CAAC,CAACC,KAAK,CAACjB,QAAQ,CAAC;cAClB,IAAIY,2BAA2B,EAAE,CAACK,KAAK,CAACjB,QAAQ,CAAC;cACjD;YACD;UACA,KAAK,YAAY;YAAE;cAClB;cACA,IAAMkB,yBAAyB,GAAGP,OAAO,CAAC,mCAAmC,CAAC;cAC9E;cACA,IAAMQ,8BAA8B,GAAGR,OAAO,CAAC,wCAAwC,CAAC;cACxF,IAAIO,yBAAyB,CAAC;gBAC7BL,aAAa,EAAEb,QAAQ,CAACc,OAAO,CAACC,YAAY,CAACC;cAC9C,CAAC,CAAC,CAACC,KAAK,CAACjB,QAAQ,CAAC;cAClB,IAAImB,8BAA8B,CAAC;gBAAEb,IAAI,EAAJA;cAAK,CAAC,CAAC,CAACW,KAAK,CAACjB,QAAQ,CAAC;cAC5D;YACD;UACA,KAAK,mBAAmB;YAAE;cACzB;cACA,IAAMmB,+BAA8B,GAAGR,OAAO,CAAC,wCAAwC,CAAC;cACxF,IAAIQ,+BAA8B,CAAC;gBAAEb,IAAI,EAAJA,IAAI;gBAAEc,MAAM,EAAE;cAAK,CAAC,CAAC,CAACH,KAAK,CAC/DjB,QAAQ,CACR;cACD;YACD;UACA,KAAK,WAAW;YACf,MAAM,IAAIqB,KAAK,CACd,sDAAsD,CACtD;UACF;YACC,MAAM,IAAIA,KAAK,yCAAkCf,IAAI,4IAC2E;QAAC;MAEpI,CAAC,MAAM;QACN;QACA;MAAA;IAEF;EAAC;IAAA;IAAA,OA9ED,oBAAkBN,QAAQ,EAAEM,IAAI,EAAE;MACjCP,eAAe,CAACC,QAAQ,CAAC,CAACS,GAAG,CAACH,IAAI,CAAC;IACpC;;IAEA;AACD;AACA;AACA;AACA;EAJC;IAAA;IAAA,OAKA,sBAAoBN,QAAQ,EAAEM,IAAI,EAAE;MACnC,IAAI,CAACP,eAAe,CAACC,QAAQ,CAAC,CAACQ,GAAG,CAACF,IAAI,CAAC,EAAE;QACzC,MAAM,IAAIe,KAAK,CACd,yBAAiBf,IAAI,2BACpB,+EAA+E,GAC/E,4EAA4E,GAC5E,kJAAkJ,GAClJ,2BAA2B,GAC3BgB,KAAK,CAACC,IAAI,CAACxB,eAAe,CAACC,QAAQ,CAAC,CAAC,CAACwB,IAAI,CAAC,IAAI,CAAC,CACjD;MACF;IACD;EAAC;EAAA;AAAA;AA6DFC,MAAM,CAACC,OAAO,GAAGrB,uBAAuB"},"metadata":{},"sourceType":"script","externalDependencies":[]}