{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar Hash = /*#__PURE__*/function () {\n  function Hash() {\n    _classCallCheck(this, Hash);\n  }\n  _createClass(Hash, [{\n    key: \"update\",\n    value: /* istanbul ignore next */\n    /**\n     * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n     * @abstract\n     * @param {string|Buffer} data data\n     * @param {string=} inputEncoding data encoding\n     * @returns {this} updated hash\n     */\n    function update(data, inputEncoding) {\n      var AbstractMethodError = require(\"../AbstractMethodError\");\n      throw new AbstractMethodError();\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n     * @abstract\n     * @param {string=} encoding encoding of the return value\n     * @returns {string|Buffer} digest\n     */\n  }, {\n    key: \"digest\",\n    value: function digest(encoding) {\n      var AbstractMethodError = require(\"../AbstractMethodError\");\n      throw new AbstractMethodError();\n    }\n  }]);\n  return Hash;\n}();\nmodule.exports = Hash;","map":{"version":3,"names":["Hash","data","inputEncoding","AbstractMethodError","require","encoding","module","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/util/Hash.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nclass Hash {\n\t/* istanbul ignore next */\n\t/**\n\t * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n\t * @abstract\n\t * @param {string|Buffer} data data\n\t * @param {string=} inputEncoding data encoding\n\t * @returns {this} updated hash\n\t */\n\tupdate(data, inputEncoding) {\n\t\tconst AbstractMethodError = require(\"../AbstractMethodError\");\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/* istanbul ignore next */\n\t/**\n\t * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n\t * @abstract\n\t * @param {string=} encoding encoding of the return value\n\t * @returns {string|Buffer} digest\n\t */\n\tdigest(encoding) {\n\t\tconst AbstractMethodError = require(\"../AbstractMethodError\");\n\t\tthrow new AbstractMethodError();\n\t}\n}\n\nmodule.exports = Hash;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAAC;AAAA;AAAA,IAEPA,IAAI;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OACT;IACA;AACD;AACA;AACA;AACA;AACA;AACA;IACC,gBAAOC,IAAI,EAAEC,aAAa,EAAE;MAC3B,IAAMC,mBAAmB,GAAGC,OAAO,CAAC,wBAAwB,CAAC;MAC7D,MAAM,IAAID,mBAAmB,EAAE;IAChC;;IAEA;IACA;AACD;AACA;AACA;AACA;AACA;EALC;IAAA;IAAA,OAMA,gBAAOE,QAAQ,EAAE;MAChB,IAAMF,mBAAmB,GAAGC,OAAO,CAAC,wBAAwB,CAAC;MAC7D,MAAM,IAAID,mBAAmB,EAAE;IAChC;EAAC;EAAA;AAAA;AAGFG,MAAM,CAACC,OAAO,GAAGP,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}