{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar RuntimeGlobals = require(\"../RuntimeGlobals\");\nvar ChunkPrefetchFunctionRuntimeModule = require(\"./ChunkPrefetchFunctionRuntimeModule\");\nvar ChunkPrefetchStartupRuntimeModule = require(\"./ChunkPrefetchStartupRuntimeModule\");\nvar ChunkPrefetchTriggerRuntimeModule = require(\"./ChunkPrefetchTriggerRuntimeModule\");\nvar ChunkPreloadTriggerRuntimeModule = require(\"./ChunkPreloadTriggerRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\nvar ChunkPrefetchPreloadPlugin = /*#__PURE__*/function () {\n  function ChunkPrefetchPreloadPlugin() {\n    _classCallCheck(this, ChunkPrefetchPreloadPlugin);\n  }\n  _createClass(ChunkPrefetchPreloadPlugin, [{\n    key: \"apply\",\n    value:\n    /**\n     * @param {Compiler} compiler the compiler\n     * @returns {void}\n     */\n    function apply(compiler) {\n      compiler.hooks.compilation.tap(\"ChunkPrefetchPreloadPlugin\", function (compilation) {\n        compilation.hooks.additionalChunkRuntimeRequirements.tap(\"ChunkPrefetchPreloadPlugin\", function (chunk, set, _ref) {\n          var chunkGraph = _ref.chunkGraph;\n          if (chunkGraph.getNumberOfEntryModules(chunk) === 0) return;\n          var startupChildChunks = chunk.getChildrenOfTypeInOrder(chunkGraph, \"prefetchOrder\");\n          if (startupChildChunks) {\n            set.add(RuntimeGlobals.prefetchChunk);\n            set.add(RuntimeGlobals.onChunksLoaded);\n            compilation.addRuntimeModule(chunk, new ChunkPrefetchStartupRuntimeModule(startupChildChunks));\n          }\n        });\n        compilation.hooks.additionalTreeRuntimeRequirements.tap(\"ChunkPrefetchPreloadPlugin\", function (chunk, set, _ref2) {\n          var chunkGraph = _ref2.chunkGraph;\n          var chunkMap = chunk.getChildIdsByOrdersMap(chunkGraph, false);\n          if (chunkMap.prefetch) {\n            set.add(RuntimeGlobals.prefetchChunk);\n            compilation.addRuntimeModule(chunk, new ChunkPrefetchTriggerRuntimeModule(chunkMap.prefetch));\n          }\n          if (chunkMap.preload) {\n            set.add(RuntimeGlobals.preloadChunk);\n            compilation.addRuntimeModule(chunk, new ChunkPreloadTriggerRuntimeModule(chunkMap.preload));\n          }\n        });\n        compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.prefetchChunk).tap(\"ChunkPrefetchPreloadPlugin\", function (chunk, set) {\n          compilation.addRuntimeModule(chunk, new ChunkPrefetchFunctionRuntimeModule(\"prefetch\", RuntimeGlobals.prefetchChunk, RuntimeGlobals.prefetchChunkHandlers));\n          set.add(RuntimeGlobals.prefetchChunkHandlers);\n        });\n        compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.preloadChunk).tap(\"ChunkPrefetchPreloadPlugin\", function (chunk, set) {\n          compilation.addRuntimeModule(chunk, new ChunkPrefetchFunctionRuntimeModule(\"preload\", RuntimeGlobals.preloadChunk, RuntimeGlobals.preloadChunkHandlers));\n          set.add(RuntimeGlobals.preloadChunkHandlers);\n        });\n      });\n    }\n  }]);\n  return ChunkPrefetchPreloadPlugin;\n}();\nmodule.exports = ChunkPrefetchPreloadPlugin;","map":{"version":3,"names":["RuntimeGlobals","require","ChunkPrefetchFunctionRuntimeModule","ChunkPrefetchStartupRuntimeModule","ChunkPrefetchTriggerRuntimeModule","ChunkPreloadTriggerRuntimeModule","ChunkPrefetchPreloadPlugin","compiler","hooks","compilation","tap","additionalChunkRuntimeRequirements","chunk","set","chunkGraph","getNumberOfEntryModules","startupChildChunks","getChildrenOfTypeInOrder","add","prefetchChunk","onChunksLoaded","addRuntimeModule","additionalTreeRuntimeRequirements","chunkMap","getChildIdsByOrdersMap","prefetch","preload","preloadChunk","runtimeRequirementInTree","for","prefetchChunkHandlers","preloadChunkHandlers","module","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/prefetch/ChunkPrefetchPreloadPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst ChunkPrefetchFunctionRuntimeModule = require(\"./ChunkPrefetchFunctionRuntimeModule\");\nconst ChunkPrefetchStartupRuntimeModule = require(\"./ChunkPrefetchStartupRuntimeModule\");\nconst ChunkPrefetchTriggerRuntimeModule = require(\"./ChunkPrefetchTriggerRuntimeModule\");\nconst ChunkPreloadTriggerRuntimeModule = require(\"./ChunkPreloadTriggerRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass ChunkPrefetchPreloadPlugin {\n\t/**\n\t * @param {Compiler} compiler the compiler\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"ChunkPrefetchPreloadPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tcompilation.hooks.additionalChunkRuntimeRequirements.tap(\n\t\t\t\t\t\"ChunkPrefetchPreloadPlugin\",\n\t\t\t\t\t(chunk, set, { chunkGraph }) => {\n\t\t\t\t\t\tif (chunkGraph.getNumberOfEntryModules(chunk) === 0) return;\n\t\t\t\t\t\tconst startupChildChunks = chunk.getChildrenOfTypeInOrder(\n\t\t\t\t\t\t\tchunkGraph,\n\t\t\t\t\t\t\t\"prefetchOrder\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (startupChildChunks) {\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.prefetchChunk);\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.onChunksLoaded);\n\t\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tnew ChunkPrefetchStartupRuntimeModule(startupChildChunks)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tcompilation.hooks.additionalTreeRuntimeRequirements.tap(\n\t\t\t\t\t\"ChunkPrefetchPreloadPlugin\",\n\t\t\t\t\t(chunk, set, { chunkGraph }) => {\n\t\t\t\t\t\tconst chunkMap = chunk.getChildIdsByOrdersMap(chunkGraph, false);\n\n\t\t\t\t\t\tif (chunkMap.prefetch) {\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.prefetchChunk);\n\t\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tnew ChunkPrefetchTriggerRuntimeModule(chunkMap.prefetch)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (chunkMap.preload) {\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.preloadChunk);\n\t\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tnew ChunkPreloadTriggerRuntimeModule(chunkMap.preload)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.prefetchChunk)\n\t\t\t\t\t.tap(\"ChunkPrefetchPreloadPlugin\", (chunk, set) => {\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew ChunkPrefetchFunctionRuntimeModule(\n\t\t\t\t\t\t\t\t\"prefetch\",\n\t\t\t\t\t\t\t\tRuntimeGlobals.prefetchChunk,\n\t\t\t\t\t\t\t\tRuntimeGlobals.prefetchChunkHandlers\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tset.add(RuntimeGlobals.prefetchChunkHandlers);\n\t\t\t\t\t});\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.preloadChunk)\n\t\t\t\t\t.tap(\"ChunkPrefetchPreloadPlugin\", (chunk, set) => {\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew ChunkPrefetchFunctionRuntimeModule(\n\t\t\t\t\t\t\t\t\"preload\",\n\t\t\t\t\t\t\t\tRuntimeGlobals.preloadChunk,\n\t\t\t\t\t\t\t\tRuntimeGlobals.preloadChunkHandlers\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tset.add(RuntimeGlobals.preloadChunkHandlers);\n\t\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = ChunkPrefetchPreloadPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}