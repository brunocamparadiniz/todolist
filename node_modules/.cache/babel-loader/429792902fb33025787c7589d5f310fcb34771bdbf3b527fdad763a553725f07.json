{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar getGeneratedSourceInfo = require(\"./getGeneratedSourceInfo\");\nvar splitIntoLines = require(\"./splitIntoLines\");\nvar streamChunksOfRawSource = function streamChunksOfRawSource(source, onChunk, onSource, onName) {\n  var line = 1;\n  var matches = splitIntoLines(source);\n  var match;\n  var _iterator = _createForOfIteratorHelper(matches),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      match = _step.value;\n      onChunk(match, line, 0, -1, -1, -1, -1);\n      line++;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return matches.length === 0 || match.endsWith(\"\\n\") ? {\n    generatedLine: matches.length + 1,\n    generatedColumn: 0\n  } : {\n    generatedLine: matches.length,\n    generatedColumn: match.length\n  };\n};\nmodule.exports = function (source, onChunk, onSource, onName, finalSource) {\n  return finalSource ? getGeneratedSourceInfo(source) : streamChunksOfRawSource(source, onChunk, onSource, onName);\n};","map":{"version":3,"names":["getGeneratedSourceInfo","require","splitIntoLines","streamChunksOfRawSource","source","onChunk","onSource","onName","line","matches","match","length","endsWith","generatedLine","generatedColumn","module","exports","finalSource"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack-sources/lib/helpers/streamChunksOfRawSource.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst getGeneratedSourceInfo = require(\"./getGeneratedSourceInfo\");\nconst splitIntoLines = require(\"./splitIntoLines\");\n\nconst streamChunksOfRawSource = (source, onChunk, onSource, onName) => {\n\tlet line = 1;\n\tconst matches = splitIntoLines(source);\n\tlet match;\n\tfor (match of matches) {\n\t\tonChunk(match, line, 0, -1, -1, -1, -1);\n\t\tline++;\n\t}\n\treturn matches.length === 0 || match.endsWith(\"\\n\")\n\t\t? {\n\t\t\t\tgeneratedLine: matches.length + 1,\n\t\t\t\tgeneratedColumn: 0\n\t\t  }\n\t\t: {\n\t\t\t\tgeneratedLine: matches.length,\n\t\t\t\tgeneratedColumn: match.length\n\t\t  };\n};\n\nmodule.exports = (source, onChunk, onSource, onName, finalSource) => {\n\treturn finalSource\n\t\t? getGeneratedSourceInfo(source)\n\t\t: streamChunksOfRawSource(source, onChunk, onSource, onName);\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAAC;AAEb,IAAMA,sBAAsB,GAAGC,OAAO,CAAC,0BAA0B,CAAC;AAClE,IAAMC,cAAc,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAElD,IAAME,uBAAuB,GAAG,SAA1BA,uBAAuB,CAAIC,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,MAAM,EAAK;EACtE,IAAIC,IAAI,GAAG,CAAC;EACZ,IAAMC,OAAO,GAAGP,cAAc,CAACE,MAAM,CAAC;EACtC,IAAIM,KAAK;EAAC,2CACID,OAAO;IAAA;EAAA;IAArB,oDAAuB;MAAlBC,KAAK;MACTL,OAAO,CAACK,KAAK,EAAEF,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MACvCA,IAAI,EAAE;IACP;EAAC;IAAA;EAAA;IAAA;EAAA;EACD,OAAOC,OAAO,CAACE,MAAM,KAAK,CAAC,IAAID,KAAK,CAACE,QAAQ,CAAC,IAAI,CAAC,GAChD;IACAC,aAAa,EAAEJ,OAAO,CAACE,MAAM,GAAG,CAAC;IACjCG,eAAe,EAAE;EACjB,CAAC,GACD;IACAD,aAAa,EAAEJ,OAAO,CAACE,MAAM;IAC7BG,eAAe,EAAEJ,KAAK,CAACC;EACvB,CAAC;AACL,CAAC;AAEDI,MAAM,CAACC,OAAO,GAAG,UAACZ,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,MAAM,EAAEU,WAAW,EAAK;EACpE,OAAOA,WAAW,GACfjB,sBAAsB,CAACI,MAAM,CAAC,GAC9BD,uBAAuB,CAACC,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,MAAM,CAAC;AAC9D,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}