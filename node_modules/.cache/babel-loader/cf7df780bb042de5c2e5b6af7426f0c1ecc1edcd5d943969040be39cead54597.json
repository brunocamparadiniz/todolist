{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar Dependency = require(\"../Dependency\");\nvar DependencyTemplate = require(\"../DependencyTemplate\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../Dependency\").TRANSITIVE} TRANSITIVE */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\nvar NullDependency = /*#__PURE__*/function (_Dependency) {\n  _inherits(NullDependency, _Dependency);\n  var _super = _createSuper(NullDependency);\n  function NullDependency() {\n    _classCallCheck(this, NullDependency);\n    return _super.apply(this, arguments);\n  }\n  _createClass(NullDependency, [{\n    key: \"type\",\n    get: function get() {\n      return \"null\";\n    }\n\n    /**\n     * @returns {boolean | TRANSITIVE} true, when changes to the referenced module could affect the referencing module; TRANSITIVE, when changes to the referenced module could affect referencing modules of the referencing module\n     */\n  }, {\n    key: \"couldAffectReferencingModule\",\n    value: function couldAffectReferencingModule() {\n      return false;\n    }\n  }]);\n  return NullDependency;\n}(Dependency);\nNullDependency.Template = /*#__PURE__*/function (_DependencyTemplate) {\n  _inherits(NullDependencyTemplate, _DependencyTemplate);\n  var _super2 = _createSuper(NullDependencyTemplate);\n  function NullDependencyTemplate() {\n    _classCallCheck(this, NullDependencyTemplate);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(NullDependencyTemplate, [{\n    key: \"apply\",\n    value:\n    /**\n     * @param {Dependency} dependency the dependency for which the template should be applied\n     * @param {ReplaceSource} source the current replace source which can be modified\n     * @param {DependencyTemplateContext} templateContext the context object\n     * @returns {void}\n     */\n    function apply(dependency, source, templateContext) {}\n  }]);\n  return NullDependencyTemplate;\n}(DependencyTemplate);\nmodule.exports = NullDependency;","map":{"version":3,"names":["Dependency","require","DependencyTemplate","NullDependency","Template","dependency","source","templateContext","module","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/dependencies/NullDependency.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Dependency = require(\"../Dependency\");\nconst DependencyTemplate = require(\"../DependencyTemplate\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../Dependency\").TRANSITIVE} TRANSITIVE */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\nclass NullDependency extends Dependency {\n\tget type() {\n\t\treturn \"null\";\n\t}\n\n\t/**\n\t * @returns {boolean | TRANSITIVE} true, when changes to the referenced module could affect the referencing module; TRANSITIVE, when changes to the referenced module could affect referencing modules of the referencing module\n\t */\n\tcouldAffectReferencingModule() {\n\t\treturn false;\n\t}\n}\n\nNullDependency.Template = class NullDependencyTemplate extends (\n\tDependencyTemplate\n) {\n\t/**\n\t * @param {Dependency} dependency the dependency for which the template should be applied\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {DependencyTemplateContext} templateContext the context object\n\t * @returns {void}\n\t */\n\tapply(dependency, source, templateContext) {}\n};\n\nmodule.exports = NullDependency;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAAC;AAAA;AAAA;AAAA;AAEb,IAAMA,UAAU,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC3C,IAAMC,kBAAkB,GAAGD,OAAO,CAAC,uBAAuB,CAAC;;AAE3D;AACA;AACA;AAAA,IAEME,cAAc;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,KACnB,eAAW;MACV,OAAO,MAAM;IACd;;IAEA;AACD;AACA;EAFC;IAAA;IAAA,OAGA,wCAA+B;MAC9B,OAAO,KAAK;IACb;EAAC;EAAA;AAAA,EAV2BH,UAAU;AAavCG,cAAc,CAACC,QAAQ;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAGtB;AACD;AACA;AACA;AACA;AACA;IACC,eAAMC,UAAU,EAAEC,MAAM,EAAEC,eAAe,EAAE,CAAC;EAAC;EAAA;AAAA,EAR7CL,kBAAkB,CASlB;AAEDM,MAAM,CAACC,OAAO,GAAGN,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}