{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _require = require(\"webpack-sources\"),\n  ConcatSource = _require.ConcatSource,\n  PrefixSource = _require.PrefixSource;\nvar InitFragment = require(\"./InitFragment\");\nvar Template = require(\"./Template\");\nvar _require2 = require(\"./util/runtime\"),\n  mergeRuntime = _require2.mergeRuntime;\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"./Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"./util/runtime\").RuntimeSpec} RuntimeSpec */\n\nvar wrapInCondition = function wrapInCondition(condition, source) {\n  if (typeof source === \"string\") {\n    return Template.asString([\"if (\".concat(condition, \") {\"), Template.indent(source), \"}\", \"\"]);\n  } else {\n    return new ConcatSource(\"if (\".concat(condition, \") {\\n\"), new PrefixSource(\"\\t\", source), \"}\\n\");\n  }\n};\n\n/**\n * @typedef {GenerateContext} Context\n */\nvar ConditionalInitFragment = /*#__PURE__*/function (_InitFragment) {\n  _inherits(ConditionalInitFragment, _InitFragment);\n  var _super = _createSuper(ConditionalInitFragment);\n  /**\n   * @param {string|Source} content the source code that will be included as initialization code\n   * @param {number} stage category of initialization code (contribute to order)\n   * @param {number} position position in the category (contribute to order)\n   * @param {string} key unique key to avoid emitting the same initialization code twice\n   * @param {RuntimeSpec | boolean} runtimeCondition in which runtime this fragment should be executed\n   * @param {string|Source=} endContent the source code that will be included at the end of the module\n   */\n  function ConditionalInitFragment(content, stage, position, key) {\n    var _this;\n    var runtimeCondition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    var endContent = arguments.length > 5 ? arguments[5] : undefined;\n    _classCallCheck(this, ConditionalInitFragment);\n    _this = _super.call(this, content, stage, position, key, endContent);\n    _this.runtimeCondition = runtimeCondition;\n    return _this;\n  }\n\n  /**\n   * @param {Context} context context\n   * @returns {string|Source} the source code that will be included as initialization code\n   */\n  _createClass(ConditionalInitFragment, [{\n    key: \"getContent\",\n    value: function getContent(context) {\n      if (this.runtimeCondition === false || !this.content) return \"\";\n      if (this.runtimeCondition === true) return this.content;\n      var expr = context.runtimeTemplate.runtimeConditionExpression({\n        chunkGraph: context.chunkGraph,\n        runtimeRequirements: context.runtimeRequirements,\n        runtime: context.runtime,\n        runtimeCondition: this.runtimeCondition\n      });\n      if (expr === \"true\") return this.content;\n      return wrapInCondition(expr, this.content);\n    }\n\n    /**\n     * @param {Context} context context\n     * @returns {string|Source=} the source code that will be included at the end of the module\n     */\n  }, {\n    key: \"getEndContent\",\n    value: function getEndContent(context) {\n      if (this.runtimeCondition === false || !this.endContent) return \"\";\n      if (this.runtimeCondition === true) return this.endContent;\n      var expr = context.runtimeTemplate.runtimeConditionExpression({\n        chunkGraph: context.chunkGraph,\n        runtimeRequirements: context.runtimeRequirements,\n        runtime: context.runtime,\n        runtimeCondition: this.runtimeCondition\n      });\n      if (expr === \"true\") return this.endContent;\n      return wrapInCondition(expr, this.endContent);\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(other) {\n      if (this.runtimeCondition === true) return this;\n      if (other.runtimeCondition === true) return other;\n      if (this.runtimeCondition === false) return other;\n      if (other.runtimeCondition === false) return this;\n      var runtimeCondition = mergeRuntime(this.runtimeCondition, other.runtimeCondition);\n      return new ConditionalInitFragment(this.content, this.stage, this.position, this.key, runtimeCondition, this.endContent);\n    }\n  }]);\n  return ConditionalInitFragment;\n}(InitFragment);\nmodule.exports = ConditionalInitFragment;","map":{"version":3,"names":["require","ConcatSource","PrefixSource","InitFragment","Template","mergeRuntime","wrapInCondition","condition","source","asString","indent","ConditionalInitFragment","content","stage","position","key","runtimeCondition","endContent","context","expr","runtimeTemplate","runtimeConditionExpression","chunkGraph","runtimeRequirements","runtime","other","module","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/ConditionalInitFragment.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { ConcatSource, PrefixSource } = require(\"webpack-sources\");\nconst InitFragment = require(\"./InitFragment\");\nconst Template = require(\"./Template\");\nconst { mergeRuntime } = require(\"./util/runtime\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"./Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"./util/runtime\").RuntimeSpec} RuntimeSpec */\n\nconst wrapInCondition = (condition, source) => {\n\tif (typeof source === \"string\") {\n\t\treturn Template.asString([\n\t\t\t`if (${condition}) {`,\n\t\t\tTemplate.indent(source),\n\t\t\t\"}\",\n\t\t\t\"\"\n\t\t]);\n\t} else {\n\t\treturn new ConcatSource(\n\t\t\t`if (${condition}) {\\n`,\n\t\t\tnew PrefixSource(\"\\t\", source),\n\t\t\t\"}\\n\"\n\t\t);\n\t}\n};\n\n/**\n * @typedef {GenerateContext} Context\n */\nclass ConditionalInitFragment extends InitFragment {\n\t/**\n\t * @param {string|Source} content the source code that will be included as initialization code\n\t * @param {number} stage category of initialization code (contribute to order)\n\t * @param {number} position position in the category (contribute to order)\n\t * @param {string} key unique key to avoid emitting the same initialization code twice\n\t * @param {RuntimeSpec | boolean} runtimeCondition in which runtime this fragment should be executed\n\t * @param {string|Source=} endContent the source code that will be included at the end of the module\n\t */\n\tconstructor(\n\t\tcontent,\n\t\tstage,\n\t\tposition,\n\t\tkey,\n\t\truntimeCondition = true,\n\t\tendContent\n\t) {\n\t\tsuper(content, stage, position, key, endContent);\n\t\tthis.runtimeCondition = runtimeCondition;\n\t}\n\n\t/**\n\t * @param {Context} context context\n\t * @returns {string|Source} the source code that will be included as initialization code\n\t */\n\tgetContent(context) {\n\t\tif (this.runtimeCondition === false || !this.content) return \"\";\n\t\tif (this.runtimeCondition === true) return this.content;\n\t\tconst expr = context.runtimeTemplate.runtimeConditionExpression({\n\t\t\tchunkGraph: context.chunkGraph,\n\t\t\truntimeRequirements: context.runtimeRequirements,\n\t\t\truntime: context.runtime,\n\t\t\truntimeCondition: this.runtimeCondition\n\t\t});\n\t\tif (expr === \"true\") return this.content;\n\t\treturn wrapInCondition(expr, this.content);\n\t}\n\n\t/**\n\t * @param {Context} context context\n\t * @returns {string|Source=} the source code that will be included at the end of the module\n\t */\n\tgetEndContent(context) {\n\t\tif (this.runtimeCondition === false || !this.endContent) return \"\";\n\t\tif (this.runtimeCondition === true) return this.endContent;\n\t\tconst expr = context.runtimeTemplate.runtimeConditionExpression({\n\t\t\tchunkGraph: context.chunkGraph,\n\t\t\truntimeRequirements: context.runtimeRequirements,\n\t\t\truntime: context.runtime,\n\t\t\truntimeCondition: this.runtimeCondition\n\t\t});\n\t\tif (expr === \"true\") return this.endContent;\n\t\treturn wrapInCondition(expr, this.endContent);\n\t}\n\n\tmerge(other) {\n\t\tif (this.runtimeCondition === true) return this;\n\t\tif (other.runtimeCondition === true) return other;\n\t\tif (this.runtimeCondition === false) return other;\n\t\tif (other.runtimeCondition === false) return this;\n\t\tconst runtimeCondition = mergeRuntime(\n\t\t\tthis.runtimeCondition,\n\t\t\tother.runtimeCondition\n\t\t);\n\t\treturn new ConditionalInitFragment(\n\t\t\tthis.content,\n\t\t\tthis.stage,\n\t\t\tthis.position,\n\t\t\tthis.key,\n\t\t\truntimeCondition,\n\t\t\tthis.endContent\n\t\t);\n\t}\n}\n\nmodule.exports = ConditionalInitFragment;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}