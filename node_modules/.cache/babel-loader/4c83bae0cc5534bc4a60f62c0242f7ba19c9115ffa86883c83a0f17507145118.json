{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra, Zackary Jackson @ScriptedAlchemy, Marais Rossouw @maraisr\n*/\n\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar createSchemaValidation = require(\"../util/create-schema-validation\");\nvar ContainerEntryDependency = require(\"./ContainerEntryDependency\");\nvar ContainerEntryModuleFactory = require(\"./ContainerEntryModuleFactory\");\nvar ContainerExposedDependency = require(\"./ContainerExposedDependency\");\nvar _require = require(\"./options\"),\n  parseOptions = _require.parseOptions;\n\n/** @typedef {import(\"../../declarations/plugins/container/ContainerPlugin\").ContainerPluginOptions} ContainerPluginOptions */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nvar validate = createSchemaValidation(require(\"../../schemas/plugins/container/ContainerPlugin.check.js\"), function () {\n  return require(\"../../schemas/plugins/container/ContainerPlugin.json\");\n}, {\n  name: \"Container Plugin\",\n  baseDataPath: \"options\"\n});\nvar PLUGIN_NAME = \"ContainerPlugin\";\nvar ContainerPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {ContainerPluginOptions} options options\n   */\n  function ContainerPlugin(options) {\n    _classCallCheck(this, ContainerPlugin);\n    validate(options);\n    this._options = {\n      name: options.name,\n      shareScope: options.shareScope || \"default\",\n      library: options.library || {\n        type: \"var\",\n        name: options.name\n      },\n      runtime: options.runtime,\n      filename: options.filename || undefined,\n      exposes: parseOptions(options.exposes, function (item) {\n        return {\n          import: Array.isArray(item) ? item : [item],\n          name: undefined\n        };\n      }, function (item) {\n        return {\n          import: Array.isArray(item.import) ? item.import : [item.import],\n          name: item.name || undefined\n        };\n      })\n    };\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  _createClass(ContainerPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this$_options = this._options,\n        name = _this$_options.name,\n        exposes = _this$_options.exposes,\n        shareScope = _this$_options.shareScope,\n        filename = _this$_options.filename,\n        library = _this$_options.library,\n        runtime = _this$_options.runtime;\n      compiler.options.output.enabledLibraryTypes.push(library.type);\n      compiler.hooks.make.tapAsync(PLUGIN_NAME, function (compilation, callback) {\n        var dep = new ContainerEntryDependency(name, exposes, shareScope);\n        dep.loc = {\n          name: name\n        };\n        compilation.addEntry(compilation.options.context, dep, {\n          name: name,\n          filename: filename,\n          runtime: runtime,\n          library: library\n        }, function (error) {\n          if (error) return callback(error);\n          callback();\n        });\n      });\n      compiler.hooks.thisCompilation.tap(PLUGIN_NAME, function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(ContainerEntryDependency, new ContainerEntryModuleFactory());\n        compilation.dependencyFactories.set(ContainerExposedDependency, normalModuleFactory);\n      });\n    }\n  }]);\n  return ContainerPlugin;\n}();\nmodule.exports = ContainerPlugin;","map":{"version":3,"names":["createSchemaValidation","require","ContainerEntryDependency","ContainerEntryModuleFactory","ContainerExposedDependency","parseOptions","validate","name","baseDataPath","PLUGIN_NAME","ContainerPlugin","options","_options","shareScope","library","type","runtime","filename","undefined","exposes","item","import","Array","isArray","compiler","output","enabledLibraryTypes","push","hooks","make","tapAsync","compilation","callback","dep","loc","addEntry","context","error","thisCompilation","tap","normalModuleFactory","dependencyFactories","set","module","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/container/ContainerPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra, Zackary Jackson @ScriptedAlchemy, Marais Rossouw @maraisr\n*/\n\n\"use strict\";\n\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\nconst ContainerEntryDependency = require(\"./ContainerEntryDependency\");\nconst ContainerEntryModuleFactory = require(\"./ContainerEntryModuleFactory\");\nconst ContainerExposedDependency = require(\"./ContainerExposedDependency\");\nconst { parseOptions } = require(\"./options\");\n\n/** @typedef {import(\"../../declarations/plugins/container/ContainerPlugin\").ContainerPluginOptions} ContainerPluginOptions */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nconst validate = createSchemaValidation(\n\trequire(\"../../schemas/plugins/container/ContainerPlugin.check.js\"),\n\t() => require(\"../../schemas/plugins/container/ContainerPlugin.json\"),\n\t{\n\t\tname: \"Container Plugin\",\n\t\tbaseDataPath: \"options\"\n\t}\n);\n\nconst PLUGIN_NAME = \"ContainerPlugin\";\n\nclass ContainerPlugin {\n\t/**\n\t * @param {ContainerPluginOptions} options options\n\t */\n\tconstructor(options) {\n\t\tvalidate(options);\n\n\t\tthis._options = {\n\t\t\tname: options.name,\n\t\t\tshareScope: options.shareScope || \"default\",\n\t\t\tlibrary: options.library || {\n\t\t\t\ttype: \"var\",\n\t\t\t\tname: options.name\n\t\t\t},\n\t\t\truntime: options.runtime,\n\t\t\tfilename: options.filename || undefined,\n\t\t\texposes: parseOptions(\n\t\t\t\toptions.exposes,\n\t\t\t\titem => ({\n\t\t\t\t\timport: Array.isArray(item) ? item : [item],\n\t\t\t\t\tname: undefined\n\t\t\t\t}),\n\t\t\t\titem => ({\n\t\t\t\t\timport: Array.isArray(item.import) ? item.import : [item.import],\n\t\t\t\t\tname: item.name || undefined\n\t\t\t\t})\n\t\t\t)\n\t\t};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst { name, exposes, shareScope, filename, library, runtime } =\n\t\t\tthis._options;\n\n\t\tcompiler.options.output.enabledLibraryTypes.push(library.type);\n\n\t\tcompiler.hooks.make.tapAsync(PLUGIN_NAME, (compilation, callback) => {\n\t\t\tconst dep = new ContainerEntryDependency(name, exposes, shareScope);\n\t\t\tdep.loc = { name };\n\t\t\tcompilation.addEntry(\n\t\t\t\tcompilation.options.context,\n\t\t\t\tdep,\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t\tfilename,\n\t\t\t\t\truntime,\n\t\t\t\t\tlibrary\n\t\t\t\t},\n\t\t\t\terror => {\n\t\t\t\t\tif (error) return callback(error);\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\tPLUGIN_NAME,\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tContainerEntryDependency,\n\t\t\t\t\tnew ContainerEntryModuleFactory()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tContainerExposedDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = ContainerPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}