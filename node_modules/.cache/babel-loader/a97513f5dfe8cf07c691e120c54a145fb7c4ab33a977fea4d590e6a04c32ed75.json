{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar t = require(\"@webassemblyjs/ast\");\nvar _require = require(\"@webassemblyjs/wasm-parser\"),\n  decode = _require.decode;\nvar Parser = require(\"../Parser\");\nvar StaticExportsDependency = require(\"../dependencies/StaticExportsDependency\");\nvar WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n\nvar decoderOpts = {\n  ignoreCodeSection: true,\n  ignoreDataSection: true,\n  // this will avoid having to lookup with identifiers in the ModuleContext\n  ignoreCustomNameSection: true\n};\nvar WebAssemblyParser = /*#__PURE__*/function (_Parser) {\n  _inherits(WebAssemblyParser, _Parser);\n  var _super = _createSuper(WebAssemblyParser);\n  function WebAssemblyParser(options) {\n    var _this;\n    _classCallCheck(this, WebAssemblyParser);\n    _this = _super.call(this);\n    _this.hooks = Object.freeze({});\n    _this.options = options;\n    return _this;\n  }\n\n  /**\n   * @param {string | Buffer | PreparsedAst} source the source to parse\n   * @param {ParserState} state the parser state\n   * @returns {ParserState} the parser state\n   */\n  _createClass(WebAssemblyParser, [{\n    key: \"parse\",\n    value: function parse(source, state) {\n      if (!Buffer.isBuffer(source)) {\n        throw new Error(\"WebAssemblyParser input must be a Buffer\");\n      }\n\n      // flag it as async module\n      state.module.buildInfo.strict = true;\n      state.module.buildMeta.exportsType = \"namespace\";\n      state.module.buildMeta.async = true;\n\n      // parse it\n      var program = decode(source, decoderOpts);\n      var module = program.body[0];\n      var exports = [];\n      t.traverse(module, {\n        ModuleExport: function ModuleExport(_ref) {\n          var node = _ref.node;\n          exports.push(node.name);\n        },\n        ModuleImport: function ModuleImport(_ref2) {\n          var node = _ref2.node;\n          var dep = new WebAssemblyImportDependency(node.module, node.name, node.descr, false);\n          state.module.addDependency(dep);\n        }\n      });\n      state.module.addDependency(new StaticExportsDependency(exports, false));\n      return state;\n    }\n  }]);\n  return WebAssemblyParser;\n}(Parser);\nmodule.exports = WebAssemblyParser;","map":{"version":3,"names":["t","require","decode","Parser","StaticExportsDependency","WebAssemblyImportDependency","decoderOpts","ignoreCodeSection","ignoreDataSection","ignoreCustomNameSection","WebAssemblyParser","options","hooks","Object","freeze","source","state","Buffer","isBuffer","Error","module","buildInfo","strict","buildMeta","exportsType","async","program","body","exports","traverse","ModuleExport","node","push","name","ModuleImport","dep","descr","addDependency"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/wasm-async/AsyncWebAssemblyParser.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst t = require(\"@webassemblyjs/ast\");\nconst { decode } = require(\"@webassemblyjs/wasm-parser\");\nconst Parser = require(\"../Parser\");\nconst StaticExportsDependency = require(\"../dependencies/StaticExportsDependency\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n\nconst decoderOpts = {\n\tignoreCodeSection: true,\n\tignoreDataSection: true,\n\n\t// this will avoid having to lookup with identifiers in the ModuleContext\n\tignoreCustomNameSection: true\n};\n\nclass WebAssemblyParser extends Parser {\n\tconstructor(options) {\n\t\tsuper();\n\t\tthis.hooks = Object.freeze({});\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * @param {string | Buffer | PreparsedAst} source the source to parse\n\t * @param {ParserState} state the parser state\n\t * @returns {ParserState} the parser state\n\t */\n\tparse(source, state) {\n\t\tif (!Buffer.isBuffer(source)) {\n\t\t\tthrow new Error(\"WebAssemblyParser input must be a Buffer\");\n\t\t}\n\n\t\t// flag it as async module\n\t\tstate.module.buildInfo.strict = true;\n\t\tstate.module.buildMeta.exportsType = \"namespace\";\n\t\tstate.module.buildMeta.async = true;\n\n\t\t// parse it\n\t\tconst program = decode(source, decoderOpts);\n\t\tconst module = program.body[0];\n\n\t\tconst exports = [];\n\t\tt.traverse(module, {\n\t\t\tModuleExport({ node }) {\n\t\t\t\texports.push(node.name);\n\t\t\t},\n\n\t\t\tModuleImport({ node }) {\n\t\t\t\tconst dep = new WebAssemblyImportDependency(\n\t\t\t\t\tnode.module,\n\t\t\t\t\tnode.name,\n\t\t\t\t\tnode.descr,\n\t\t\t\t\tfalse\n\t\t\t\t);\n\n\t\t\t\tstate.module.addDependency(dep);\n\t\t\t}\n\t\t});\n\n\t\tstate.module.addDependency(new StaticExportsDependency(exports, false));\n\n\t\treturn state;\n\t}\n}\n\nmodule.exports = WebAssemblyParser;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAAC;AAAA;AAAA;AAAA;AAEb,IAAMA,CAAC,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AACvC,eAAmBA,OAAO,CAAC,4BAA4B,CAAC;EAAhDC,MAAM,YAANA,MAAM;AACd,IAAMC,MAAM,GAAGF,OAAO,CAAC,WAAW,CAAC;AACnC,IAAMG,uBAAuB,GAAGH,OAAO,CAAC,yCAAyC,CAAC;AAClF,IAAMI,2BAA2B,GAAGJ,OAAO,CAAC,6CAA6C,CAAC;;AAE1F;AACA;;AAEA,IAAMK,WAAW,GAAG;EACnBC,iBAAiB,EAAE,IAAI;EACvBC,iBAAiB,EAAE,IAAI;EAEvB;EACAC,uBAAuB,EAAE;AAC1B,CAAC;AAAC,IAEIC,iBAAiB;EAAA;EAAA;EACtB,2BAAYC,OAAO,EAAE;IAAA;IAAA;IACpB;IACA,MAAKC,KAAK,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC9B,MAAKH,OAAO,GAAGA,OAAO;IAAC;EACxB;;EAEA;AACD;AACA;AACA;AACA;EAJC;IAAA;IAAA,OAKA,eAAMI,MAAM,EAAEC,KAAK,EAAE;MACpB,IAAI,CAACC,MAAM,CAACC,QAAQ,CAACH,MAAM,CAAC,EAAE;QAC7B,MAAM,IAAII,KAAK,CAAC,0CAA0C,CAAC;MAC5D;;MAEA;MACAH,KAAK,CAACI,MAAM,CAACC,SAAS,CAACC,MAAM,GAAG,IAAI;MACpCN,KAAK,CAACI,MAAM,CAACG,SAAS,CAACC,WAAW,GAAG,WAAW;MAChDR,KAAK,CAACI,MAAM,CAACG,SAAS,CAACE,KAAK,GAAG,IAAI;;MAEnC;MACA,IAAMC,OAAO,GAAGxB,MAAM,CAACa,MAAM,EAAET,WAAW,CAAC;MAC3C,IAAMc,MAAM,GAAGM,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;MAE9B,IAAMC,OAAO,GAAG,EAAE;MAClB5B,CAAC,CAAC6B,QAAQ,CAACT,MAAM,EAAE;QAClBU,YAAY,8BAAW;UAAA,IAARC,IAAI,QAAJA,IAAI;UAClBH,OAAO,CAACI,IAAI,CAACD,IAAI,CAACE,IAAI,CAAC;QACxB,CAAC;QAEDC,YAAY,+BAAW;UAAA,IAARH,IAAI,SAAJA,IAAI;UAClB,IAAMI,GAAG,GAAG,IAAI9B,2BAA2B,CAC1C0B,IAAI,CAACX,MAAM,EACXW,IAAI,CAACE,IAAI,EACTF,IAAI,CAACK,KAAK,EACV,KAAK,CACL;UAEDpB,KAAK,CAACI,MAAM,CAACiB,aAAa,CAACF,GAAG,CAAC;QAChC;MACD,CAAC,CAAC;MAEFnB,KAAK,CAACI,MAAM,CAACiB,aAAa,CAAC,IAAIjC,uBAAuB,CAACwB,OAAO,EAAE,KAAK,CAAC,CAAC;MAEvE,OAAOZ,KAAK;IACb;EAAC;EAAA;AAAA,EA/C8Bb,MAAM;AAkDtCiB,MAAM,CAACQ,OAAO,GAAGlB,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}