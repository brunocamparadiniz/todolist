{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nvar _objectSpread = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar forEachBail = require(\"./forEachBail\");\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n/** @typedef {{ alias: string|string[], extension: string }} ExtensionAliasOption */\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {ExtensionAliasOption} options options\n   * @param {string | ResolveStepHook} target target\n   */\n  function ExtensionAliasPlugin(source, options, target) {\n    _classCallCheck(this, ExtensionAliasPlugin);\n    this.source = source;\n    this.options = options;\n    this.target = target;\n  }\n\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n  _createClass(ExtensionAliasPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var target = resolver.ensureHook(this.target);\n      var _this$options = this.options,\n        extension = _this$options.extension,\n        alias = _this$options.alias;\n      resolver.getHook(this.source).tapAsync(\"ExtensionAliasPlugin\", function (request, resolveContext, callback) {\n        var requestPath = request.request;\n        if (!requestPath || !requestPath.endsWith(extension)) return callback();\n        var resolve = function resolve(alias, callback) {\n          resolver.doResolve(target, _objectSpread(_objectSpread({}, request), {}, {\n            request: \"\".concat(requestPath.slice(0, -extension.length)).concat(alias),\n            fullySpecified: true\n          }), \"aliased from extension alias with mapping '\".concat(extension, \"' to '\").concat(alias, \"'\"), resolveContext, callback);\n        };\n        var stoppingCallback = function stoppingCallback(err, result) {\n          if (err) return callback(err);\n          if (result) return callback(null, result);\n          // Don't allow other aliasing or raw request\n          return callback(null, null);\n        };\n        if (typeof alias === \"string\") {\n          resolve(alias, stoppingCallback);\n        } else if (alias.length > 1) {\n          forEachBail(alias, resolve, stoppingCallback);\n        } else {\n          resolve(alias[0], stoppingCallback);\n        }\n      });\n    }\n  }]);\n  return ExtensionAliasPlugin;\n}();","map":{"version":3,"names":["forEachBail","require","module","exports","source","options","target","resolver","ensureHook","extension","alias","getHook","tapAsync","request","resolveContext","callback","requestPath","endsWith","resolve","doResolve","slice","length","fullySpecified","stoppingCallback","err","result"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/enhanced-resolve/lib/ExtensionAliasPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n/** @typedef {{ alias: string|string[], extension: string }} ExtensionAliasOption */\n\nmodule.exports = class ExtensionAliasPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {ExtensionAliasOption} options options\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, options, target) {\n\t\tthis.source = source;\n\t\tthis.options = options;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tconst { extension, alias } = this.options;\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"ExtensionAliasPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tconst requestPath = request.request;\n\t\t\t\tif (!requestPath || !requestPath.endsWith(extension)) return callback();\n\t\t\t\tconst resolve = (alias, callback) => {\n\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...request,\n\t\t\t\t\t\t\trequest: `${requestPath.slice(0, -extension.length)}${alias}`,\n\t\t\t\t\t\t\tfullySpecified: true\n\t\t\t\t\t\t},\n\t\t\t\t\t\t`aliased from extension alias with mapping '${extension}' to '${alias}'`,\n\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\tcallback\n\t\t\t\t\t);\n\t\t\t\t};\n\n\t\t\t\tconst stoppingCallback = (err, result) => {\n\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\tif (result) return callback(null, result);\n\t\t\t\t\t// Don't allow other aliasing or raw request\n\t\t\t\t\treturn callback(null, null);\n\t\t\t\t};\n\t\t\t\tif (typeof alias === \"string\") {\n\t\t\t\t\tresolve(alias, stoppingCallback);\n\t\t\t\t} else if (alias.length > 1) {\n\t\t\t\t\tforEachBail(alias, resolve, stoppingCallback);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(alias[0], stoppingCallback);\n\t\t\t\t}\n\t\t\t});\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAAC;AAAA;AAAA;AAEb,IAAMA,WAAW,GAAGC,OAAO,CAAC,eAAe,CAAC;;AAE5C;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO;EACb;AACD;AACA;AACA;AACA;EACC,8BAAYC,MAAM,EAAEC,OAAO,EAAEC,MAAM,EAAE;IAAA;IACpC,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACrB;;EAEA;AACD;AACA;AACA;EAHC;IAAA;IAAA,OAIA,eAAMC,QAAQ,EAAE;MACf,IAAMD,MAAM,GAAGC,QAAQ,CAACC,UAAU,CAAC,IAAI,CAACF,MAAM,CAAC;MAC/C,oBAA6B,IAAI,CAACD,OAAO;QAAjCI,SAAS,iBAATA,SAAS;QAAEC,KAAK,iBAALA,KAAK;MACxBH,QAAQ,CACNI,OAAO,CAAC,IAAI,CAACP,MAAM,CAAC,CACpBQ,QAAQ,CAAC,sBAAsB,EAAE,UAACC,OAAO,EAAEC,cAAc,EAAEC,QAAQ,EAAK;QACxE,IAAMC,WAAW,GAAGH,OAAO,CAACA,OAAO;QACnC,IAAI,CAACG,WAAW,IAAI,CAACA,WAAW,CAACC,QAAQ,CAACR,SAAS,CAAC,EAAE,OAAOM,QAAQ,EAAE;QACvE,IAAMG,OAAO,GAAG,SAAVA,OAAO,CAAIR,KAAK,EAAEK,QAAQ,EAAK;UACpCR,QAAQ,CAACY,SAAS,CACjBb,MAAM,kCAEFO,OAAO;YACVA,OAAO,YAAKG,WAAW,CAACI,KAAK,CAAC,CAAC,EAAE,CAACX,SAAS,CAACY,MAAM,CAAC,SAAGX,KAAK,CAAE;YAC7DY,cAAc,EAAE;UAAI,yDAEyBb,SAAS,mBAASC,KAAK,QACrEI,cAAc,EACdC,QAAQ,CACR;QACF,CAAC;QAED,IAAMQ,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAIC,GAAG,EAAEC,MAAM,EAAK;UACzC,IAAID,GAAG,EAAE,OAAOT,QAAQ,CAACS,GAAG,CAAC;UAC7B,IAAIC,MAAM,EAAE,OAAOV,QAAQ,CAAC,IAAI,EAAEU,MAAM,CAAC;UACzC;UACA,OAAOV,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;QAC5B,CAAC;QACD,IAAI,OAAOL,KAAK,KAAK,QAAQ,EAAE;UAC9BQ,OAAO,CAACR,KAAK,EAAEa,gBAAgB,CAAC;QACjC,CAAC,MAAM,IAAIb,KAAK,CAACW,MAAM,GAAG,CAAC,EAAE;UAC5BrB,WAAW,CAACU,KAAK,EAAEQ,OAAO,EAAEK,gBAAgB,CAAC;QAC9C,CAAC,MAAM;UACNL,OAAO,CAACR,KAAK,CAAC,CAAC,CAAC,EAAEa,gBAAgB,CAAC;QACpC;MACD,CAAC,CAAC;IACJ;EAAC;EAAA;AAAA,GACD"},"metadata":{},"sourceType":"script","externalDependencies":[]}