{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar RuntimeGlobals = require(\"../RuntimeGlobals\");\nvar AsyncWasmLoadingRuntimeModule = require(\"../wasm-async/AsyncWasmLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\nvar FetchCompileAsyncWasmPlugin = /*#__PURE__*/function () {\n  function FetchCompileAsyncWasmPlugin() {\n    _classCallCheck(this, FetchCompileAsyncWasmPlugin);\n  }\n  _createClass(FetchCompileAsyncWasmPlugin, [{\n    key: \"apply\",\n    value:\n    /**\n     * Apply the plugin\n     * @param {Compiler} compiler the compiler instance\n     * @returns {void}\n     */\n    function apply(compiler) {\n      compiler.hooks.thisCompilation.tap(\"FetchCompileAsyncWasmPlugin\", function (compilation) {\n        var globalWasmLoading = compilation.outputOptions.wasmLoading;\n        var isEnabledForChunk = function isEnabledForChunk(chunk) {\n          var options = chunk.getEntryOptions();\n          var wasmLoading = options && options.wasmLoading !== undefined ? options.wasmLoading : globalWasmLoading;\n          return wasmLoading === \"fetch\";\n        };\n        var generateLoadBinaryCode = function generateLoadBinaryCode(path) {\n          return \"fetch(\".concat(RuntimeGlobals.publicPath, \" + \").concat(path, \")\");\n        };\n        compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.instantiateWasm).tap(\"FetchCompileAsyncWasmPlugin\", function (chunk, set) {\n          if (!isEnabledForChunk(chunk)) return;\n          var chunkGraph = compilation.chunkGraph;\n          if (!chunkGraph.hasModuleInGraph(chunk, function (m) {\n            return m.type === \"webassembly/async\";\n          })) {\n            return;\n          }\n          set.add(RuntimeGlobals.publicPath);\n          compilation.addRuntimeModule(chunk, new AsyncWasmLoadingRuntimeModule({\n            generateLoadBinaryCode: generateLoadBinaryCode,\n            supportsStreaming: true\n          }));\n        });\n      });\n    }\n  }]);\n  return FetchCompileAsyncWasmPlugin;\n}();\nmodule.exports = FetchCompileAsyncWasmPlugin;","map":{"version":3,"names":["RuntimeGlobals","require","AsyncWasmLoadingRuntimeModule","FetchCompileAsyncWasmPlugin","compiler","hooks","thisCompilation","tap","compilation","globalWasmLoading","outputOptions","wasmLoading","isEnabledForChunk","chunk","options","getEntryOptions","undefined","generateLoadBinaryCode","path","publicPath","runtimeRequirementInTree","for","instantiateWasm","set","chunkGraph","hasModuleInGraph","m","type","add","addRuntimeModule","supportsStreaming","module","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/web/FetchCompileAsyncWasmPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst AsyncWasmLoadingRuntimeModule = require(\"../wasm-async/AsyncWasmLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass FetchCompileAsyncWasmPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"FetchCompileAsyncWasmPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tconst globalWasmLoading = compilation.outputOptions.wasmLoading;\n\t\t\t\tconst isEnabledForChunk = chunk => {\n\t\t\t\t\tconst options = chunk.getEntryOptions();\n\t\t\t\t\tconst wasmLoading =\n\t\t\t\t\t\toptions && options.wasmLoading !== undefined\n\t\t\t\t\t\t\t? options.wasmLoading\n\t\t\t\t\t\t\t: globalWasmLoading;\n\t\t\t\t\treturn wasmLoading === \"fetch\";\n\t\t\t\t};\n\t\t\t\tconst generateLoadBinaryCode = path =>\n\t\t\t\t\t`fetch(${RuntimeGlobals.publicPath} + ${path})`;\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.instantiateWasm)\n\t\t\t\t\t.tap(\"FetchCompileAsyncWasmPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!chunkGraph.hasModuleInGraph(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tm => m.type === \"webassembly/async\"\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tset.add(RuntimeGlobals.publicPath);\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew AsyncWasmLoadingRuntimeModule({\n\t\t\t\t\t\t\t\tgenerateLoadBinaryCode,\n\t\t\t\t\t\t\t\tsupportsStreaming: true\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = FetchCompileAsyncWasmPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAAC;AAAA;AAEb,IAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACnD,IAAMC,6BAA6B,GAAGD,OAAO,CAAC,6CAA6C,CAAC;;AAE5F;AAAA,IAEME,2BAA2B;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAChC;AACD;AACA;AACA;AACA;IACC,eAAMC,QAAQ,EAAE;MACfA,QAAQ,CAACC,KAAK,CAACC,eAAe,CAACC,GAAG,CACjC,6BAA6B,EAC7B,UAAAC,WAAW,EAAI;QACd,IAAMC,iBAAiB,GAAGD,WAAW,CAACE,aAAa,CAACC,WAAW;QAC/D,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiB,CAAGC,KAAK,EAAI;UAClC,IAAMC,OAAO,GAAGD,KAAK,CAACE,eAAe,EAAE;UACvC,IAAMJ,WAAW,GAChBG,OAAO,IAAIA,OAAO,CAACH,WAAW,KAAKK,SAAS,GACzCF,OAAO,CAACH,WAAW,GACnBF,iBAAiB;UACrB,OAAOE,WAAW,KAAK,OAAO;QAC/B,CAAC;QACD,IAAMM,sBAAsB,GAAG,SAAzBA,sBAAsB,CAAGC,IAAI;UAAA,uBACzBlB,cAAc,CAACmB,UAAU,gBAAMD,IAAI;QAAA,CAAG;QAEhDV,WAAW,CAACH,KAAK,CAACe,wBAAwB,CACxCC,GAAG,CAACrB,cAAc,CAACsB,eAAe,CAAC,CACnCf,GAAG,CAAC,6BAA6B,EAAE,UAACM,KAAK,EAAEU,GAAG,EAAK;UACnD,IAAI,CAACX,iBAAiB,CAACC,KAAK,CAAC,EAAE;UAC/B,IAAMW,UAAU,GAAGhB,WAAW,CAACgB,UAAU;UACzC,IACC,CAACA,UAAU,CAACC,gBAAgB,CAC3BZ,KAAK,EACL,UAAAa,CAAC;YAAA,OAAIA,CAAC,CAACC,IAAI,KAAK,mBAAmB;UAAA,EACnC,EACA;YACD;UACD;UACAJ,GAAG,CAACK,GAAG,CAAC5B,cAAc,CAACmB,UAAU,CAAC;UAClCX,WAAW,CAACqB,gBAAgB,CAC3BhB,KAAK,EACL,IAAIX,6BAA6B,CAAC;YACjCe,sBAAsB,EAAtBA,sBAAsB;YACtBa,iBAAiB,EAAE;UACpB,CAAC,CAAC,CACF;QACF,CAAC,CAAC;MACJ,CAAC,CACD;IACF;EAAC;EAAA;AAAA;AAGFC,MAAM,CAACC,OAAO,GAAG7B,2BAA2B"},"metadata":{},"sourceType":"script","externalDependencies":[]}