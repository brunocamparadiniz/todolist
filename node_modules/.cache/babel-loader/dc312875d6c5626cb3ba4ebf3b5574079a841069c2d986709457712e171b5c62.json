{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nvar _slicedToArray = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar asyncLib = require(\"neo-async\");\nvar ChunkGraph = require(\"../ChunkGraph\");\nvar ModuleGraph = require(\"../ModuleGraph\");\nvar _require = require(\"../OptimizationStages\"),\n  STAGE_DEFAULT = _require.STAGE_DEFAULT;\nvar HarmonyImportDependency = require(\"../dependencies/HarmonyImportDependency\");\nvar _require2 = require(\"../util/comparators\"),\n  compareModulesByIdentifier = _require2.compareModulesByIdentifier;\nvar _require3 = require(\"../util/runtime\"),\n  intersectRuntime = _require3.intersectRuntime,\n  mergeRuntimeOwned = _require3.mergeRuntimeOwned,\n  filterRuntime = _require3.filterRuntime,\n  runtimeToString = _require3.runtimeToString,\n  mergeRuntime = _require3.mergeRuntime;\nvar ConcatenatedModule = require(\"./ConcatenatedModule\");\n\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../RequestShortener\")} RequestShortener */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\n/**\n * @typedef {Object} Statistics\n * @property {number} cached\n * @property {number} alreadyInConfig\n * @property {number} invalidModule\n * @property {number} incorrectChunks\n * @property {number} incorrectDependency\n * @property {number} incorrectModuleDependency\n * @property {number} incorrectChunksOfImporter\n * @property {number} incorrectRuntimeCondition\n * @property {number} importerFailed\n * @property {number} added\n */\n\nvar formatBailoutReason = function formatBailoutReason(msg) {\n  return \"ModuleConcatenation bailout: \" + msg;\n};\nvar ModuleConcatenationPlugin = /*#__PURE__*/function () {\n  function ModuleConcatenationPlugin(options) {\n    _classCallCheck(this, ModuleConcatenationPlugin);\n    if (typeof options !== \"object\") options = {};\n    this.options = options;\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  _createClass(ModuleConcatenationPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n      var backCompat = compiler._backCompat;\n      compiler.hooks.compilation.tap(\"ModuleConcatenationPlugin\", function (compilation) {\n        if (compilation.moduleMemCaches) {\n          throw new Error(\"optimization.concatenateModules can't be used with cacheUnaffected as module concatenation is a global effect\");\n        }\n        var moduleGraph = compilation.moduleGraph;\n        var bailoutReasonMap = new Map();\n        var setBailoutReason = function setBailoutReason(module, reason) {\n          setInnerBailoutReason(module, reason);\n          moduleGraph.getOptimizationBailout(module).push(typeof reason === \"function\" ? function (rs) {\n            return formatBailoutReason(reason(rs));\n          } : formatBailoutReason(reason));\n        };\n        var setInnerBailoutReason = function setInnerBailoutReason(module, reason) {\n          bailoutReasonMap.set(module, reason);\n        };\n        var getInnerBailoutReason = function getInnerBailoutReason(module, requestShortener) {\n          var reason = bailoutReasonMap.get(module);\n          if (typeof reason === \"function\") return reason(requestShortener);\n          return reason;\n        };\n        var formatBailoutWarning = function formatBailoutWarning(module, problem) {\n          return function (requestShortener) {\n            if (typeof problem === \"function\") {\n              return formatBailoutReason(\"Cannot concat with \".concat(module.readableIdentifier(requestShortener), \": \").concat(problem(requestShortener)));\n            }\n            var reason = getInnerBailoutReason(module, requestShortener);\n            var reasonWithPrefix = reason ? \": \".concat(reason) : \"\";\n            if (module === problem) {\n              return formatBailoutReason(\"Cannot concat with \".concat(module.readableIdentifier(requestShortener)).concat(reasonWithPrefix));\n            } else {\n              return formatBailoutReason(\"Cannot concat with \".concat(module.readableIdentifier(requestShortener), \" because of \").concat(problem.readableIdentifier(requestShortener)).concat(reasonWithPrefix));\n            }\n          };\n        };\n        compilation.hooks.optimizeChunkModules.tapAsync({\n          name: \"ModuleConcatenationPlugin\",\n          stage: STAGE_DEFAULT\n        }, function (allChunks, modules, callback) {\n          var logger = compilation.getLogger(\"webpack.ModuleConcatenationPlugin\");\n          var chunkGraph = compilation.chunkGraph,\n            moduleGraph = compilation.moduleGraph;\n          var relevantModules = [];\n          var possibleInners = new Set();\n          var context = {\n            chunkGraph: chunkGraph,\n            moduleGraph: moduleGraph\n          };\n          logger.time(\"select relevant modules\");\n          var _iterator = _createForOfIteratorHelper(modules),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _module2 = _step.value;\n              var canBeRoot = true;\n              var canBeInner = true;\n              var bailoutReason = _module2.getConcatenationBailoutReason(context);\n              if (bailoutReason) {\n                setBailoutReason(_module2, bailoutReason);\n                continue;\n              }\n\n              // Must not be an async module\n              if (moduleGraph.isAsync(_module2)) {\n                setBailoutReason(_module2, \"Module is async\");\n                continue;\n              }\n\n              // Must be in strict mode\n              if (!_module2.buildInfo.strict) {\n                setBailoutReason(_module2, \"Module is not in strict mode\");\n                continue;\n              }\n\n              // Module must be in any chunk (we don't want to do useless work)\n              if (chunkGraph.getNumberOfModuleChunks(_module2) === 0) {\n                setBailoutReason(_module2, \"Module is not in any chunk\");\n                continue;\n              }\n\n              // Exports must be known (and not dynamic)\n              var exportsInfo = moduleGraph.getExportsInfo(_module2);\n              var relevantExports = exportsInfo.getRelevantExports(undefined);\n              var unknownReexports = relevantExports.filter(function (exportInfo) {\n                return exportInfo.isReexport() && !exportInfo.getTarget(moduleGraph);\n              });\n              if (unknownReexports.length > 0) {\n                setBailoutReason(_module2, \"Reexports in this module do not have a static target (\".concat(Array.from(unknownReexports, function (exportInfo) {\n                  return \"\".concat(exportInfo.name || \"other exports\", \": \").concat(exportInfo.getUsedInfo());\n                }).join(\", \"), \")\"));\n                continue;\n              }\n\n              // Root modules must have a static list of exports\n              var unknownProvidedExports = relevantExports.filter(function (exportInfo) {\n                return exportInfo.provided !== true;\n              });\n              if (unknownProvidedExports.length > 0) {\n                setBailoutReason(_module2, \"List of module exports is dynamic (\".concat(Array.from(unknownProvidedExports, function (exportInfo) {\n                  return \"\".concat(exportInfo.name || \"other exports\", \": \").concat(exportInfo.getProvidedInfo(), \" and \").concat(exportInfo.getUsedInfo());\n                }).join(\", \"), \")\"));\n                canBeRoot = false;\n              }\n\n              // Module must not be an entry point\n              if (chunkGraph.isEntryModule(_module2)) {\n                setInnerBailoutReason(_module2, \"Module is an entry point\");\n                canBeInner = false;\n              }\n              if (canBeRoot) relevantModules.push(_module2);\n              if (canBeInner) possibleInners.add(_module2);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n          logger.timeEnd(\"select relevant modules\");\n          logger.debug(\"\".concat(relevantModules.length, \" potential root modules, \").concat(possibleInners.size, \" potential inner modules\"));\n          // sort by depth\n          // modules with lower depth are more likely suited as roots\n          // this improves performance, because modules already selected as inner are skipped\n          logger.time(\"sort relevant modules\");\n          relevantModules.sort(function (a, b) {\n            return moduleGraph.getDepth(a) - moduleGraph.getDepth(b);\n          });\n          logger.timeEnd(\"sort relevant modules\");\n\n          /** @type {Statistics} */\n          var stats = {\n            cached: 0,\n            alreadyInConfig: 0,\n            invalidModule: 0,\n            incorrectChunks: 0,\n            incorrectDependency: 0,\n            incorrectModuleDependency: 0,\n            incorrectChunksOfImporter: 0,\n            incorrectRuntimeCondition: 0,\n            importerFailed: 0,\n            added: 0\n          };\n          var statsCandidates = 0;\n          var statsSizeSum = 0;\n          var statsEmptyConfigurations = 0;\n          logger.time(\"find modules to concatenate\");\n          var concatConfigurations = [];\n          var usedAsInner = new Set();\n          var _loop = function _loop() {\n            var currentRoot = _relevantModules[_i];\n            // when used by another configuration as inner:\n            // the other configuration is better and we can skip this one\n            // TODO reconsider that when it's only used in a different runtime\n            if (usedAsInner.has(currentRoot)) return \"continue\";\n            var chunkRuntime = undefined;\n            var _iterator2 = _createForOfIteratorHelper(chunkGraph.getModuleRuntimes(currentRoot)),\n              _step2;\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var r = _step2.value;\n                chunkRuntime = mergeRuntimeOwned(chunkRuntime, r);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n            var exportsInfo = moduleGraph.getExportsInfo(currentRoot);\n            var filteredRuntime = filterRuntime(chunkRuntime, function (r) {\n              return exportsInfo.isModuleUsed(r);\n            });\n            var activeRuntime = filteredRuntime === true ? chunkRuntime : filteredRuntime === false ? undefined : filteredRuntime;\n\n            // create a configuration with the root\n            var currentConfiguration = new ConcatConfiguration(currentRoot, activeRuntime);\n\n            // cache failures to add modules\n            var failureCache = new Map();\n\n            // potential optional import candidates\n            /** @type {Set<Module>} */\n            var candidates = new Set();\n\n            // try to add all imports\n            var _iterator3 = _createForOfIteratorHelper(_this._getImports(compilation, currentRoot, activeRuntime)),\n              _step3;\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var imp = _step3.value;\n                candidates.add(imp);\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n            var _iterator4 = _createForOfIteratorHelper(candidates),\n              _step4;\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var _imp = _step4.value;\n                var impCandidates = new Set();\n                var problem = _this._tryToAdd(compilation, currentConfiguration, _imp, chunkRuntime, activeRuntime, possibleInners, impCandidates, failureCache, chunkGraph, true, stats);\n                if (problem) {\n                  failureCache.set(_imp, problem);\n                  currentConfiguration.addWarning(_imp, problem);\n                } else {\n                  var _iterator7 = _createForOfIteratorHelper(impCandidates),\n                    _step7;\n                  try {\n                    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                      var c = _step7.value;\n                      candidates.add(c);\n                    }\n                  } catch (err) {\n                    _iterator7.e(err);\n                  } finally {\n                    _iterator7.f();\n                  }\n                }\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n            statsCandidates += candidates.size;\n            if (!currentConfiguration.isEmpty()) {\n              var _modules = currentConfiguration.getModules();\n              statsSizeSum += _modules.size;\n              concatConfigurations.push(currentConfiguration);\n              var _iterator5 = _createForOfIteratorHelper(_modules),\n                _step5;\n              try {\n                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                  var _module = _step5.value;\n                  if (_module !== currentConfiguration.rootModule) {\n                    usedAsInner.add(_module);\n                  }\n                }\n              } catch (err) {\n                _iterator5.e(err);\n              } finally {\n                _iterator5.f();\n              }\n            } else {\n              statsEmptyConfigurations++;\n              var optimizationBailouts = moduleGraph.getOptimizationBailout(currentRoot);\n              var _iterator6 = _createForOfIteratorHelper(currentConfiguration.getWarningsSorted()),\n                _step6;\n              try {\n                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                  var warning = _step6.value;\n                  optimizationBailouts.push(formatBailoutWarning(warning[0], warning[1]));\n                }\n              } catch (err) {\n                _iterator6.e(err);\n              } finally {\n                _iterator6.f();\n              }\n            }\n          };\n          for (var _i = 0, _relevantModules = relevantModules; _i < _relevantModules.length; _i++) {\n            var _ret = _loop();\n            if (_ret === \"continue\") continue;\n          }\n          logger.timeEnd(\"find modules to concatenate\");\n          logger.debug(\"\".concat(concatConfigurations.length, \" successful concat configurations (avg size: \").concat(statsSizeSum / concatConfigurations.length, \"), \").concat(statsEmptyConfigurations, \" bailed out completely\"));\n          logger.debug(\"\".concat(statsCandidates, \" candidates were considered for adding (\").concat(stats.cached, \" cached failure, \").concat(stats.alreadyInConfig, \" already in config, \").concat(stats.invalidModule, \" invalid module, \").concat(stats.incorrectChunks, \" incorrect chunks, \").concat(stats.incorrectDependency, \" incorrect dependency, \").concat(stats.incorrectChunksOfImporter, \" incorrect chunks of importer, \").concat(stats.incorrectModuleDependency, \" incorrect module dependency, \").concat(stats.incorrectRuntimeCondition, \" incorrect runtime condition, \").concat(stats.importerFailed, \" importer failed, \").concat(stats.added, \" added)\"));\n          // HACK: Sort configurations by length and start with the longest one\n          // to get the biggest groups possible. Used modules are marked with usedModules\n          // TODO: Allow to reuse existing configuration while trying to add dependencies.\n          // This would improve performance. O(n^2) -> O(n)\n          logger.time(\"sort concat configurations\");\n          concatConfigurations.sort(function (a, b) {\n            return b.modules.size - a.modules.size;\n          });\n          logger.timeEnd(\"sort concat configurations\");\n          var usedModules = new Set();\n          logger.time(\"create concatenated modules\");\n          asyncLib.each(concatConfigurations, function (concatConfiguration, callback) {\n            var rootModule = concatConfiguration.rootModule;\n\n            // Avoid overlapping configurations\n            // TODO: remove this when todo above is fixed\n            if (usedModules.has(rootModule)) return callback();\n            var modules = concatConfiguration.getModules();\n            var _iterator8 = _createForOfIteratorHelper(modules),\n              _step8;\n            try {\n              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                var m = _step8.value;\n                usedModules.add(m);\n              }\n\n              // Create a new ConcatenatedModule\n            } catch (err) {\n              _iterator8.e(err);\n            } finally {\n              _iterator8.f();\n            }\n            var newModule = ConcatenatedModule.create(rootModule, modules, concatConfiguration.runtime, compiler.root, compilation.outputOptions.hashFunction);\n            var build = function build() {\n              newModule.build(compiler.options, compilation, null, null, function (err) {\n                if (err) {\n                  if (!err.module) {\n                    err.module = newModule;\n                  }\n                  return callback(err);\n                }\n                integrate();\n              });\n            };\n            var integrate = function integrate() {\n              if (backCompat) {\n                ChunkGraph.setChunkGraphForModule(newModule, chunkGraph);\n                ModuleGraph.setModuleGraphForModule(newModule, moduleGraph);\n              }\n              var _iterator9 = _createForOfIteratorHelper(concatConfiguration.getWarningsSorted()),\n                _step9;\n              try {\n                for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                  var warning = _step9.value;\n                  moduleGraph.getOptimizationBailout(newModule).push(formatBailoutWarning(warning[0], warning[1]));\n                }\n              } catch (err) {\n                _iterator9.e(err);\n              } finally {\n                _iterator9.f();\n              }\n              moduleGraph.cloneModuleAttributes(rootModule, newModule);\n              var _iterator10 = _createForOfIteratorHelper(modules),\n                _step10;\n              try {\n                var _loop2 = function _loop2() {\n                  var m = _step10.value;\n                  // add to builtModules when one of the included modules was built\n                  if (compilation.builtModules.has(m)) {\n                    compilation.builtModules.add(newModule);\n                  }\n                  if (m !== rootModule) {\n                    // attach external references to the concatenated module too\n                    moduleGraph.copyOutgoingModuleConnections(m, newModule, function (c) {\n                      return c.originModule === m && !(c.dependency instanceof HarmonyImportDependency && modules.has(c.module));\n                    });\n                    // remove module from chunk\n                    var _iterator11 = _createForOfIteratorHelper(chunkGraph.getModuleChunksIterable(rootModule)),\n                      _step11;\n                    try {\n                      for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n                        var chunk = _step11.value;\n                        var sourceTypes = chunkGraph.getChunkModuleSourceTypes(chunk, m);\n                        if (sourceTypes.size === 1) {\n                          chunkGraph.disconnectChunkAndModule(chunk, m);\n                        } else {\n                          var newSourceTypes = new Set(sourceTypes);\n                          newSourceTypes.delete(\"javascript\");\n                          chunkGraph.setChunkModuleSourceTypes(chunk, m, newSourceTypes);\n                        }\n                      }\n                    } catch (err) {\n                      _iterator11.e(err);\n                    } finally {\n                      _iterator11.f();\n                    }\n                  }\n                };\n                for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n                  _loop2();\n                }\n              } catch (err) {\n                _iterator10.e(err);\n              } finally {\n                _iterator10.f();\n              }\n              compilation.modules.delete(rootModule);\n              ChunkGraph.clearChunkGraphForModule(rootModule);\n              ModuleGraph.clearModuleGraphForModule(rootModule);\n\n              // remove module from chunk\n              chunkGraph.replaceModule(rootModule, newModule);\n              // replace module references with the concatenated module\n              moduleGraph.moveModuleConnections(rootModule, newModule, function (c) {\n                var otherModule = c.module === rootModule ? c.originModule : c.module;\n                var innerConnection = c.dependency instanceof HarmonyImportDependency && modules.has(otherModule);\n                return !innerConnection;\n              });\n              // add concatenated module to the compilation\n              compilation.modules.add(newModule);\n              callback();\n            };\n            build();\n          }, function (err) {\n            logger.timeEnd(\"create concatenated modules\");\n            process.nextTick(callback.bind(null, err));\n          });\n        });\n      });\n    }\n\n    /**\n     * @param {Compilation} compilation the compilation\n     * @param {Module} module the module to be added\n     * @param {RuntimeSpec} runtime the runtime scope\n     * @returns {Set<Module>} the imported modules\n     */\n  }, {\n    key: \"_getImports\",\n    value: function _getImports(compilation, module, runtime) {\n      var moduleGraph = compilation.moduleGraph;\n      var set = new Set();\n      var _iterator12 = _createForOfIteratorHelper(module.dependencies),\n        _step12;\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var dep = _step12.value;\n          // Get reference info only for harmony Dependencies\n          if (!(dep instanceof HarmonyImportDependency)) continue;\n          var connection = moduleGraph.getConnection(dep);\n          // Reference is valid and has a module\n          if (!connection || !connection.module || !connection.isTargetActive(runtime)) {\n            continue;\n          }\n          var importedNames = compilation.getDependencyReferencedExports(dep, undefined);\n          if (importedNames.every(function (i) {\n            return Array.isArray(i) ? i.length > 0 : i.name.length > 0;\n          }) || Array.isArray(moduleGraph.getProvidedExports(module))) {\n            set.add(connection.module);\n          }\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n      return set;\n    }\n\n    /**\n     * @param {Compilation} compilation webpack compilation\n     * @param {ConcatConfiguration} config concat configuration (will be modified when added)\n     * @param {Module} module the module to be added\n     * @param {RuntimeSpec} runtime the runtime scope of the generated code\n     * @param {RuntimeSpec} activeRuntime the runtime scope of the root module\n     * @param {Set<Module>} possibleModules modules that are candidates\n     * @param {Set<Module>} candidates list of potential candidates (will be added to)\n     * @param {Map<Module, Module | function(RequestShortener): string>} failureCache cache for problematic modules to be more performant\n     * @param {ChunkGraph} chunkGraph the chunk graph\n     * @param {boolean} avoidMutateOnFailure avoid mutating the config when adding fails\n     * @param {Statistics} statistics gathering metrics\n     * @returns {Module | function(RequestShortener): string} the problematic module\n     */\n  }, {\n    key: \"_tryToAdd\",\n    value: function _tryToAdd(compilation, config, module, runtime, activeRuntime, possibleModules, candidates, failureCache, chunkGraph, avoidMutateOnFailure, statistics) {\n      var cacheEntry = failureCache.get(module);\n      if (cacheEntry) {\n        statistics.cached++;\n        return cacheEntry;\n      }\n\n      // Already added?\n      if (config.has(module)) {\n        statistics.alreadyInConfig++;\n        return null;\n      }\n\n      // Not possible to add?\n      if (!possibleModules.has(module)) {\n        statistics.invalidModule++;\n        failureCache.set(module, module); // cache failures for performance\n        return module;\n      }\n\n      // Module must be in the correct chunks\n      var missingChunks = Array.from(chunkGraph.getModuleChunksIterable(config.rootModule)).filter(function (chunk) {\n        return !chunkGraph.isModuleInChunk(module, chunk);\n      });\n      if (missingChunks.length > 0) {\n        var problem = function problem(requestShortener) {\n          var missingChunksList = Array.from(new Set(missingChunks.map(function (chunk) {\n            return chunk.name || \"unnamed chunk(s)\";\n          }))).sort();\n          var chunks = Array.from(new Set(Array.from(chunkGraph.getModuleChunksIterable(module)).map(function (chunk) {\n            return chunk.name || \"unnamed chunk(s)\";\n          }))).sort();\n          return \"Module \".concat(module.readableIdentifier(requestShortener), \" is not in the same chunk(s) (expected in chunk(s) \").concat(missingChunksList.join(\", \"), \", module is in chunk(s) \").concat(chunks.join(\", \"), \")\");\n        };\n        statistics.incorrectChunks++;\n        failureCache.set(module, problem); // cache failures for performance\n        return problem;\n      }\n      var moduleGraph = compilation.moduleGraph;\n      var incomingConnections = moduleGraph.getIncomingConnectionsByOriginModule(module);\n      var incomingConnectionsFromNonModules = incomingConnections.get(null) || incomingConnections.get(undefined);\n      if (incomingConnectionsFromNonModules) {\n        var activeNonModulesConnections = incomingConnectionsFromNonModules.filter(function (connection) {\n          // We are not interested in inactive connections\n          // or connections without dependency\n          return connection.isActive(runtime);\n        });\n        if (activeNonModulesConnections.length > 0) {\n          var _problem = function _problem(requestShortener) {\n            var importingExplanations = new Set(activeNonModulesConnections.map(function (c) {\n              return c.explanation;\n            }).filter(Boolean));\n            var explanations = Array.from(importingExplanations).sort();\n            return \"Module \".concat(module.readableIdentifier(requestShortener), \" is referenced \").concat(explanations.length > 0 ? \"by: \".concat(explanations.join(\", \")) : \"in an unsupported way\");\n          };\n          statistics.incorrectDependency++;\n          failureCache.set(module, _problem); // cache failures for performance\n          return _problem;\n        }\n      }\n\n      /** @type {Map<Module, readonly ModuleGraph.ModuleGraphConnection[]>} */\n      var incomingConnectionsFromModules = new Map();\n      var _iterator13 = _createForOfIteratorHelper(incomingConnections),\n        _step13;\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var _step13$value = _slicedToArray(_step13.value, 2),\n            _originModule2 = _step13$value[0],\n            _connections = _step13$value[1];\n          if (_originModule2) {\n            // Ignore connection from orphan modules\n            if (chunkGraph.getNumberOfModuleChunks(_originModule2) === 0) continue;\n\n            // We don't care for connections from other runtimes\n            var originRuntime = undefined;\n            var _iterator19 = _createForOfIteratorHelper(chunkGraph.getModuleRuntimes(_originModule2)),\n              _step19;\n            try {\n              for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n                var r = _step19.value;\n                originRuntime = mergeRuntimeOwned(originRuntime, r);\n              }\n            } catch (err) {\n              _iterator19.e(err);\n            } finally {\n              _iterator19.f();\n            }\n            if (!intersectRuntime(runtime, originRuntime)) continue;\n\n            // We are not interested in inactive connections\n            var activeConnections = _connections.filter(function (connection) {\n              return connection.isActive(runtime);\n            });\n            if (activeConnections.length > 0) incomingConnectionsFromModules.set(_originModule2, activeConnections);\n          }\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n      var incomingModules = Array.from(incomingConnectionsFromModules.keys());\n\n      // Module must be in the same chunks like the referencing module\n      var otherChunkModules = incomingModules.filter(function (originModule) {\n        var _iterator14 = _createForOfIteratorHelper(chunkGraph.getModuleChunksIterable(config.rootModule)),\n          _step14;\n        try {\n          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n            var chunk = _step14.value;\n            if (!chunkGraph.isModuleInChunk(originModule, chunk)) {\n              return true;\n            }\n          }\n        } catch (err) {\n          _iterator14.e(err);\n        } finally {\n          _iterator14.f();\n        }\n        return false;\n      });\n      if (otherChunkModules.length > 0) {\n        var _problem2 = function _problem2(requestShortener) {\n          var names = otherChunkModules.map(function (m) {\n            return m.readableIdentifier(requestShortener);\n          }).sort();\n          return \"Module \".concat(module.readableIdentifier(requestShortener), \" is referenced from different chunks by these modules: \").concat(names.join(\", \"));\n        };\n        statistics.incorrectChunksOfImporter++;\n        failureCache.set(module, _problem2); // cache failures for performance\n        return _problem2;\n      }\n\n      /** @type {Map<Module, readonly ModuleGraph.ModuleGraphConnection[]>} */\n      var nonHarmonyConnections = new Map();\n      var _iterator15 = _createForOfIteratorHelper(incomingConnectionsFromModules),\n        _step15;\n      try {\n        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n          var _step15$value = _slicedToArray(_step15.value, 2),\n            _originModule3 = _step15$value[0],\n            _connections2 = _step15$value[1];\n          var selected = _connections2.filter(function (connection) {\n            return !connection.dependency || !(connection.dependency instanceof HarmonyImportDependency);\n          });\n          if (selected.length > 0) nonHarmonyConnections.set(_originModule3, _connections2);\n        }\n      } catch (err) {\n        _iterator15.e(err);\n      } finally {\n        _iterator15.f();\n      }\n      if (nonHarmonyConnections.size > 0) {\n        var _problem3 = function _problem3(requestShortener) {\n          var names = Array.from(nonHarmonyConnections).map(function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n              originModule = _ref2[0],\n              connections = _ref2[1];\n            return \"\".concat(originModule.readableIdentifier(requestShortener), \" (referenced with \").concat(Array.from(new Set(connections.map(function (c) {\n              return c.dependency && c.dependency.type;\n            }).filter(Boolean))).sort().join(\", \"), \")\");\n          }).sort();\n          return \"Module \".concat(module.readableIdentifier(requestShortener), \" is referenced from these modules with unsupported syntax: \").concat(names.join(\", \"));\n        };\n        statistics.incorrectModuleDependency++;\n        failureCache.set(module, _problem3); // cache failures for performance\n        return _problem3;\n      }\n      if (runtime !== undefined && typeof runtime !== \"string\") {\n        // Module must be consistently referenced in the same runtimes\n        /** @type {{ originModule: Module, runtimeCondition: RuntimeSpec }[]} */\n        var otherRuntimeConnections = [];\n        var _iterator16 = _createForOfIteratorHelper(incomingConnectionsFromModules),\n          _step16;\n        try {\n          outer: for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n            var _step16$value = _slicedToArray(_step16.value, 2),\n              originModule = _step16$value[0],\n              connections = _step16$value[1];\n            /** @type {false | RuntimeSpec} */\n            var currentRuntimeCondition = false;\n            var _iterator17 = _createForOfIteratorHelper(connections),\n              _step17;\n            try {\n              var _loop3 = function _loop3() {\n                var connection = _step17.value;\n                var runtimeCondition = filterRuntime(runtime, function (runtime) {\n                  return connection.isTargetActive(runtime);\n                });\n                if (runtimeCondition === false) return \"continue\";\n                if (runtimeCondition === true) return \"continue|outer\";\n                if (currentRuntimeCondition !== false) {\n                  currentRuntimeCondition = mergeRuntime(currentRuntimeCondition, runtimeCondition);\n                } else {\n                  currentRuntimeCondition = runtimeCondition;\n                }\n              };\n              for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n                var _ret2 = _loop3();\n                if (_ret2 === \"continue\") continue;\n                if (_ret2 === \"continue|outer\") continue outer;\n              }\n            } catch (err) {\n              _iterator17.e(err);\n            } finally {\n              _iterator17.f();\n            }\n            if (currentRuntimeCondition !== false) {\n              otherRuntimeConnections.push({\n                originModule: originModule,\n                runtimeCondition: currentRuntimeCondition\n              });\n            }\n          }\n        } catch (err) {\n          _iterator16.e(err);\n        } finally {\n          _iterator16.f();\n        }\n        if (otherRuntimeConnections.length > 0) {\n          var _problem4 = function _problem4(requestShortener) {\n            return \"Module \".concat(module.readableIdentifier(requestShortener), \" is runtime-dependent referenced by these modules: \").concat(Array.from(otherRuntimeConnections, function (_ref3) {\n              var originModule = _ref3.originModule,\n                runtimeCondition = _ref3.runtimeCondition;\n              return \"\".concat(originModule.readableIdentifier(requestShortener), \" (expected runtime \").concat(runtimeToString(runtime), \", module is only referenced in \").concat(runtimeToString( /** @type {RuntimeSpec} */runtimeCondition), \")\");\n            }).join(\", \"));\n          };\n          statistics.incorrectRuntimeCondition++;\n          failureCache.set(module, _problem4); // cache failures for performance\n          return _problem4;\n        }\n      }\n      var backup;\n      if (avoidMutateOnFailure) {\n        backup = config.snapshot();\n      }\n\n      // Add the module\n      config.add(module);\n      incomingModules.sort(compareModulesByIdentifier);\n\n      // Every module which depends on the added module must be in the configuration too.\n      for (var _i2 = 0, _incomingModules = incomingModules; _i2 < _incomingModules.length; _i2++) {\n        var _originModule = _incomingModules[_i2];\n        var _problem5 = this._tryToAdd(compilation, config, _originModule, runtime, activeRuntime, possibleModules, candidates, failureCache, chunkGraph, false, statistics);\n        if (_problem5) {\n          if (backup !== undefined) config.rollback(backup);\n          statistics.importerFailed++;\n          failureCache.set(module, _problem5); // cache failures for performance\n          return _problem5;\n        }\n      }\n\n      // Add imports to possible candidates list\n      var _iterator18 = _createForOfIteratorHelper(this._getImports(compilation, module, runtime)),\n        _step18;\n      try {\n        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n          var imp = _step18.value;\n          candidates.add(imp);\n        }\n      } catch (err) {\n        _iterator18.e(err);\n      } finally {\n        _iterator18.f();\n      }\n      statistics.added++;\n      return null;\n    }\n  }]);\n  return ModuleConcatenationPlugin;\n}();\nvar ConcatConfiguration = /*#__PURE__*/function () {\n  /**\n   * @param {Module} rootModule the root module\n   * @param {RuntimeSpec} runtime the runtime\n   */\n  function ConcatConfiguration(rootModule, runtime) {\n    _classCallCheck(this, ConcatConfiguration);\n    this.rootModule = rootModule;\n    this.runtime = runtime;\n    /** @type {Set<Module>} */\n    this.modules = new Set();\n    this.modules.add(rootModule);\n    /** @type {Map<Module, Module | function(RequestShortener): string>} */\n    this.warnings = new Map();\n  }\n  _createClass(ConcatConfiguration, [{\n    key: \"add\",\n    value: function add(module) {\n      this.modules.add(module);\n    }\n  }, {\n    key: \"has\",\n    value: function has(module) {\n      return this.modules.has(module);\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.modules.size === 1;\n    }\n  }, {\n    key: \"addWarning\",\n    value: function addWarning(module, problem) {\n      this.warnings.set(module, problem);\n    }\n  }, {\n    key: \"getWarningsSorted\",\n    value: function getWarningsSorted() {\n      return new Map(Array.from(this.warnings).sort(function (a, b) {\n        var ai = a[0].identifier();\n        var bi = b[0].identifier();\n        if (ai < bi) return -1;\n        if (ai > bi) return 1;\n        return 0;\n      }));\n    }\n\n    /**\n     * @returns {Set<Module>} modules as set\n     */\n  }, {\n    key: \"getModules\",\n    value: function getModules() {\n      return this.modules;\n    }\n  }, {\n    key: \"snapshot\",\n    value: function snapshot() {\n      return this.modules.size;\n    }\n  }, {\n    key: \"rollback\",\n    value: function rollback(snapshot) {\n      var modules = this.modules;\n      var _iterator20 = _createForOfIteratorHelper(modules),\n        _step20;\n      try {\n        for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n          var m = _step20.value;\n          if (snapshot === 0) {\n            modules.delete(m);\n          } else {\n            snapshot--;\n          }\n        }\n      } catch (err) {\n        _iterator20.e(err);\n      } finally {\n        _iterator20.f();\n      }\n    }\n  }]);\n  return ConcatConfiguration;\n}();\nmodule.exports = ModuleConcatenationPlugin;","map":{"version":3,"names":["asyncLib","require","ChunkGraph","ModuleGraph","STAGE_DEFAULT","HarmonyImportDependency","compareModulesByIdentifier","intersectRuntime","mergeRuntimeOwned","filterRuntime","runtimeToString","mergeRuntime","ConcatenatedModule","formatBailoutReason","msg","ModuleConcatenationPlugin","options","compiler","backCompat","_backCompat","hooks","compilation","tap","moduleMemCaches","Error","moduleGraph","bailoutReasonMap","Map","setBailoutReason","module","reason","setInnerBailoutReason","getOptimizationBailout","push","rs","set","getInnerBailoutReason","requestShortener","get","formatBailoutWarning","problem","readableIdentifier","reasonWithPrefix","optimizeChunkModules","tapAsync","name","stage","allChunks","modules","callback","logger","getLogger","chunkGraph","relevantModules","possibleInners","Set","context","time","canBeRoot","canBeInner","bailoutReason","getConcatenationBailoutReason","isAsync","buildInfo","strict","getNumberOfModuleChunks","exportsInfo","getExportsInfo","relevantExports","getRelevantExports","undefined","unknownReexports","filter","exportInfo","isReexport","getTarget","length","Array","from","getUsedInfo","join","unknownProvidedExports","provided","getProvidedInfo","isEntryModule","add","timeEnd","debug","size","sort","a","b","getDepth","stats","cached","alreadyInConfig","invalidModule","incorrectChunks","incorrectDependency","incorrectModuleDependency","incorrectChunksOfImporter","incorrectRuntimeCondition","importerFailed","added","statsCandidates","statsSizeSum","statsEmptyConfigurations","concatConfigurations","usedAsInner","currentRoot","has","chunkRuntime","getModuleRuntimes","r","filteredRuntime","isModuleUsed","activeRuntime","currentConfiguration","ConcatConfiguration","failureCache","candidates","_getImports","imp","impCandidates","_tryToAdd","addWarning","c","isEmpty","getModules","rootModule","optimizationBailouts","getWarningsSorted","warning","usedModules","each","concatConfiguration","m","newModule","create","runtime","root","outputOptions","hashFunction","build","err","integrate","setChunkGraphForModule","setModuleGraphForModule","cloneModuleAttributes","builtModules","copyOutgoingModuleConnections","originModule","dependency","getModuleChunksIterable","chunk","sourceTypes","getChunkModuleSourceTypes","disconnectChunkAndModule","newSourceTypes","delete","setChunkModuleSourceTypes","clearChunkGraphForModule","clearModuleGraphForModule","replaceModule","moveModuleConnections","otherModule","innerConnection","process","nextTick","bind","dependencies","dep","connection","getConnection","isTargetActive","importedNames","getDependencyReferencedExports","every","i","isArray","getProvidedExports","config","possibleModules","avoidMutateOnFailure","statistics","cacheEntry","missingChunks","isModuleInChunk","missingChunksList","map","chunks","incomingConnections","getIncomingConnectionsByOriginModule","incomingConnectionsFromNonModules","activeNonModulesConnections","isActive","importingExplanations","explanation","Boolean","explanations","incomingConnectionsFromModules","connections","originRuntime","activeConnections","incomingModules","keys","otherChunkModules","names","nonHarmonyConnections","selected","type","otherRuntimeConnections","outer","currentRuntimeCondition","runtimeCondition","backup","snapshot","rollback","warnings","ai","identifier","bi","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/optimize/ModuleConcatenationPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst asyncLib = require(\"neo-async\");\nconst ChunkGraph = require(\"../ChunkGraph\");\nconst ModuleGraph = require(\"../ModuleGraph\");\nconst { STAGE_DEFAULT } = require(\"../OptimizationStages\");\nconst HarmonyImportDependency = require(\"../dependencies/HarmonyImportDependency\");\nconst { compareModulesByIdentifier } = require(\"../util/comparators\");\nconst {\n\tintersectRuntime,\n\tmergeRuntimeOwned,\n\tfilterRuntime,\n\truntimeToString,\n\tmergeRuntime\n} = require(\"../util/runtime\");\nconst ConcatenatedModule = require(\"./ConcatenatedModule\");\n\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../RequestShortener\")} RequestShortener */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\n/**\n * @typedef {Object} Statistics\n * @property {number} cached\n * @property {number} alreadyInConfig\n * @property {number} invalidModule\n * @property {number} incorrectChunks\n * @property {number} incorrectDependency\n * @property {number} incorrectModuleDependency\n * @property {number} incorrectChunksOfImporter\n * @property {number} incorrectRuntimeCondition\n * @property {number} importerFailed\n * @property {number} added\n */\n\nconst formatBailoutReason = msg => {\n\treturn \"ModuleConcatenation bailout: \" + msg;\n};\n\nclass ModuleConcatenationPlugin {\n\tconstructor(options) {\n\t\tif (typeof options !== \"object\") options = {};\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst { _backCompat: backCompat } = compiler;\n\t\tcompiler.hooks.compilation.tap(\"ModuleConcatenationPlugin\", compilation => {\n\t\t\tif (compilation.moduleMemCaches) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"optimization.concatenateModules can't be used with cacheUnaffected as module concatenation is a global effect\"\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst moduleGraph = compilation.moduleGraph;\n\t\t\tconst bailoutReasonMap = new Map();\n\n\t\t\tconst setBailoutReason = (module, reason) => {\n\t\t\t\tsetInnerBailoutReason(module, reason);\n\t\t\t\tmoduleGraph\n\t\t\t\t\t.getOptimizationBailout(module)\n\t\t\t\t\t.push(\n\t\t\t\t\t\ttypeof reason === \"function\"\n\t\t\t\t\t\t\t? rs => formatBailoutReason(reason(rs))\n\t\t\t\t\t\t\t: formatBailoutReason(reason)\n\t\t\t\t\t);\n\t\t\t};\n\n\t\t\tconst setInnerBailoutReason = (module, reason) => {\n\t\t\t\tbailoutReasonMap.set(module, reason);\n\t\t\t};\n\n\t\t\tconst getInnerBailoutReason = (module, requestShortener) => {\n\t\t\t\tconst reason = bailoutReasonMap.get(module);\n\t\t\t\tif (typeof reason === \"function\") return reason(requestShortener);\n\t\t\t\treturn reason;\n\t\t\t};\n\n\t\t\tconst formatBailoutWarning = (module, problem) => requestShortener => {\n\t\t\t\tif (typeof problem === \"function\") {\n\t\t\t\t\treturn formatBailoutReason(\n\t\t\t\t\t\t`Cannot concat with ${module.readableIdentifier(\n\t\t\t\t\t\t\trequestShortener\n\t\t\t\t\t\t)}: ${problem(requestShortener)}`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tconst reason = getInnerBailoutReason(module, requestShortener);\n\t\t\t\tconst reasonWithPrefix = reason ? `: ${reason}` : \"\";\n\t\t\t\tif (module === problem) {\n\t\t\t\t\treturn formatBailoutReason(\n\t\t\t\t\t\t`Cannot concat with ${module.readableIdentifier(\n\t\t\t\t\t\t\trequestShortener\n\t\t\t\t\t\t)}${reasonWithPrefix}`\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\treturn formatBailoutReason(\n\t\t\t\t\t\t`Cannot concat with ${module.readableIdentifier(\n\t\t\t\t\t\t\trequestShortener\n\t\t\t\t\t\t)} because of ${problem.readableIdentifier(\n\t\t\t\t\t\t\trequestShortener\n\t\t\t\t\t\t)}${reasonWithPrefix}`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tcompilation.hooks.optimizeChunkModules.tapAsync(\n\t\t\t\t{\n\t\t\t\t\tname: \"ModuleConcatenationPlugin\",\n\t\t\t\t\tstage: STAGE_DEFAULT\n\t\t\t\t},\n\t\t\t\t(allChunks, modules, callback) => {\n\t\t\t\t\tconst logger = compilation.getLogger(\n\t\t\t\t\t\t\"webpack.ModuleConcatenationPlugin\"\n\t\t\t\t\t);\n\t\t\t\t\tconst { chunkGraph, moduleGraph } = compilation;\n\t\t\t\t\tconst relevantModules = [];\n\t\t\t\t\tconst possibleInners = new Set();\n\t\t\t\t\tconst context = {\n\t\t\t\t\t\tchunkGraph,\n\t\t\t\t\t\tmoduleGraph\n\t\t\t\t\t};\n\t\t\t\t\tlogger.time(\"select relevant modules\");\n\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\tlet canBeRoot = true;\n\t\t\t\t\t\tlet canBeInner = true;\n\n\t\t\t\t\t\tconst bailoutReason = module.getConcatenationBailoutReason(context);\n\t\t\t\t\t\tif (bailoutReason) {\n\t\t\t\t\t\t\tsetBailoutReason(module, bailoutReason);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Must not be an async module\n\t\t\t\t\t\tif (moduleGraph.isAsync(module)) {\n\t\t\t\t\t\t\tsetBailoutReason(module, `Module is async`);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Must be in strict mode\n\t\t\t\t\t\tif (!module.buildInfo.strict) {\n\t\t\t\t\t\t\tsetBailoutReason(module, `Module is not in strict mode`);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Module must be in any chunk (we don't want to do useless work)\n\t\t\t\t\t\tif (chunkGraph.getNumberOfModuleChunks(module) === 0) {\n\t\t\t\t\t\t\tsetBailoutReason(module, \"Module is not in any chunk\");\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Exports must be known (and not dynamic)\n\t\t\t\t\t\tconst exportsInfo = moduleGraph.getExportsInfo(module);\n\t\t\t\t\t\tconst relevantExports = exportsInfo.getRelevantExports(undefined);\n\t\t\t\t\t\tconst unknownReexports = relevantExports.filter(exportInfo => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\texportInfo.isReexport() && !exportInfo.getTarget(moduleGraph)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (unknownReexports.length > 0) {\n\t\t\t\t\t\t\tsetBailoutReason(\n\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t`Reexports in this module do not have a static target (${Array.from(\n\t\t\t\t\t\t\t\t\tunknownReexports,\n\t\t\t\t\t\t\t\t\texportInfo =>\n\t\t\t\t\t\t\t\t\t\t`${\n\t\t\t\t\t\t\t\t\t\t\texportInfo.name || \"other exports\"\n\t\t\t\t\t\t\t\t\t\t}: ${exportInfo.getUsedInfo()}`\n\t\t\t\t\t\t\t\t).join(\", \")})`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Root modules must have a static list of exports\n\t\t\t\t\t\tconst unknownProvidedExports = relevantExports.filter(\n\t\t\t\t\t\t\texportInfo => {\n\t\t\t\t\t\t\t\treturn exportInfo.provided !== true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (unknownProvidedExports.length > 0) {\n\t\t\t\t\t\t\tsetBailoutReason(\n\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t`List of module exports is dynamic (${Array.from(\n\t\t\t\t\t\t\t\t\tunknownProvidedExports,\n\t\t\t\t\t\t\t\t\texportInfo =>\n\t\t\t\t\t\t\t\t\t\t`${\n\t\t\t\t\t\t\t\t\t\t\texportInfo.name || \"other exports\"\n\t\t\t\t\t\t\t\t\t\t}: ${exportInfo.getProvidedInfo()} and ${exportInfo.getUsedInfo()}`\n\t\t\t\t\t\t\t\t).join(\", \")})`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcanBeRoot = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Module must not be an entry point\n\t\t\t\t\t\tif (chunkGraph.isEntryModule(module)) {\n\t\t\t\t\t\t\tsetInnerBailoutReason(module, \"Module is an entry point\");\n\t\t\t\t\t\t\tcanBeInner = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (canBeRoot) relevantModules.push(module);\n\t\t\t\t\t\tif (canBeInner) possibleInners.add(module);\n\t\t\t\t\t}\n\t\t\t\t\tlogger.timeEnd(\"select relevant modules\");\n\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t`${relevantModules.length} potential root modules, ${possibleInners.size} potential inner modules`\n\t\t\t\t\t);\n\t\t\t\t\t// sort by depth\n\t\t\t\t\t// modules with lower depth are more likely suited as roots\n\t\t\t\t\t// this improves performance, because modules already selected as inner are skipped\n\t\t\t\t\tlogger.time(\"sort relevant modules\");\n\t\t\t\t\trelevantModules.sort((a, b) => {\n\t\t\t\t\t\treturn moduleGraph.getDepth(a) - moduleGraph.getDepth(b);\n\t\t\t\t\t});\n\t\t\t\t\tlogger.timeEnd(\"sort relevant modules\");\n\n\t\t\t\t\t/** @type {Statistics} */\n\t\t\t\t\tconst stats = {\n\t\t\t\t\t\tcached: 0,\n\t\t\t\t\t\talreadyInConfig: 0,\n\t\t\t\t\t\tinvalidModule: 0,\n\t\t\t\t\t\tincorrectChunks: 0,\n\t\t\t\t\t\tincorrectDependency: 0,\n\t\t\t\t\t\tincorrectModuleDependency: 0,\n\t\t\t\t\t\tincorrectChunksOfImporter: 0,\n\t\t\t\t\t\tincorrectRuntimeCondition: 0,\n\t\t\t\t\t\timporterFailed: 0,\n\t\t\t\t\t\tadded: 0\n\t\t\t\t\t};\n\t\t\t\t\tlet statsCandidates = 0;\n\t\t\t\t\tlet statsSizeSum = 0;\n\t\t\t\t\tlet statsEmptyConfigurations = 0;\n\n\t\t\t\t\tlogger.time(\"find modules to concatenate\");\n\t\t\t\t\tconst concatConfigurations = [];\n\t\t\t\t\tconst usedAsInner = new Set();\n\t\t\t\t\tfor (const currentRoot of relevantModules) {\n\t\t\t\t\t\t// when used by another configuration as inner:\n\t\t\t\t\t\t// the other configuration is better and we can skip this one\n\t\t\t\t\t\t// TODO reconsider that when it's only used in a different runtime\n\t\t\t\t\t\tif (usedAsInner.has(currentRoot)) continue;\n\n\t\t\t\t\t\tlet chunkRuntime = undefined;\n\t\t\t\t\t\tfor (const r of chunkGraph.getModuleRuntimes(currentRoot)) {\n\t\t\t\t\t\t\tchunkRuntime = mergeRuntimeOwned(chunkRuntime, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst exportsInfo = moduleGraph.getExportsInfo(currentRoot);\n\t\t\t\t\t\tconst filteredRuntime = filterRuntime(chunkRuntime, r =>\n\t\t\t\t\t\t\texportsInfo.isModuleUsed(r)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst activeRuntime =\n\t\t\t\t\t\t\tfilteredRuntime === true\n\t\t\t\t\t\t\t\t? chunkRuntime\n\t\t\t\t\t\t\t\t: filteredRuntime === false\n\t\t\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t\t\t: filteredRuntime;\n\n\t\t\t\t\t\t// create a configuration with the root\n\t\t\t\t\t\tconst currentConfiguration = new ConcatConfiguration(\n\t\t\t\t\t\t\tcurrentRoot,\n\t\t\t\t\t\t\tactiveRuntime\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// cache failures to add modules\n\t\t\t\t\t\tconst failureCache = new Map();\n\n\t\t\t\t\t\t// potential optional import candidates\n\t\t\t\t\t\t/** @type {Set<Module>} */\n\t\t\t\t\t\tconst candidates = new Set();\n\n\t\t\t\t\t\t// try to add all imports\n\t\t\t\t\t\tfor (const imp of this._getImports(\n\t\t\t\t\t\t\tcompilation,\n\t\t\t\t\t\t\tcurrentRoot,\n\t\t\t\t\t\t\tactiveRuntime\n\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\tcandidates.add(imp);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (const imp of candidates) {\n\t\t\t\t\t\t\tconst impCandidates = new Set();\n\t\t\t\t\t\t\tconst problem = this._tryToAdd(\n\t\t\t\t\t\t\t\tcompilation,\n\t\t\t\t\t\t\t\tcurrentConfiguration,\n\t\t\t\t\t\t\t\timp,\n\t\t\t\t\t\t\t\tchunkRuntime,\n\t\t\t\t\t\t\t\tactiveRuntime,\n\t\t\t\t\t\t\t\tpossibleInners,\n\t\t\t\t\t\t\t\timpCandidates,\n\t\t\t\t\t\t\t\tfailureCache,\n\t\t\t\t\t\t\t\tchunkGraph,\n\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\tstats\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (problem) {\n\t\t\t\t\t\t\t\tfailureCache.set(imp, problem);\n\t\t\t\t\t\t\t\tcurrentConfiguration.addWarning(imp, problem);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfor (const c of impCandidates) {\n\t\t\t\t\t\t\t\t\tcandidates.add(c);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstatsCandidates += candidates.size;\n\t\t\t\t\t\tif (!currentConfiguration.isEmpty()) {\n\t\t\t\t\t\t\tconst modules = currentConfiguration.getModules();\n\t\t\t\t\t\t\tstatsSizeSum += modules.size;\n\t\t\t\t\t\t\tconcatConfigurations.push(currentConfiguration);\n\t\t\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\t\t\tif (module !== currentConfiguration.rootModule) {\n\t\t\t\t\t\t\t\t\tusedAsInner.add(module);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstatsEmptyConfigurations++;\n\t\t\t\t\t\t\tconst optimizationBailouts =\n\t\t\t\t\t\t\t\tmoduleGraph.getOptimizationBailout(currentRoot);\n\t\t\t\t\t\t\tfor (const warning of currentConfiguration.getWarningsSorted()) {\n\t\t\t\t\t\t\t\toptimizationBailouts.push(\n\t\t\t\t\t\t\t\t\tformatBailoutWarning(warning[0], warning[1])\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlogger.timeEnd(\"find modules to concatenate\");\n\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t`${\n\t\t\t\t\t\t\tconcatConfigurations.length\n\t\t\t\t\t\t} successful concat configurations (avg size: ${\n\t\t\t\t\t\t\tstatsSizeSum / concatConfigurations.length\n\t\t\t\t\t\t}), ${statsEmptyConfigurations} bailed out completely`\n\t\t\t\t\t);\n\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t`${statsCandidates} candidates were considered for adding (${stats.cached} cached failure, ${stats.alreadyInConfig} already in config, ${stats.invalidModule} invalid module, ${stats.incorrectChunks} incorrect chunks, ${stats.incorrectDependency} incorrect dependency, ${stats.incorrectChunksOfImporter} incorrect chunks of importer, ${stats.incorrectModuleDependency} incorrect module dependency, ${stats.incorrectRuntimeCondition} incorrect runtime condition, ${stats.importerFailed} importer failed, ${stats.added} added)`\n\t\t\t\t\t);\n\t\t\t\t\t// HACK: Sort configurations by length and start with the longest one\n\t\t\t\t\t// to get the biggest groups possible. Used modules are marked with usedModules\n\t\t\t\t\t// TODO: Allow to reuse existing configuration while trying to add dependencies.\n\t\t\t\t\t// This would improve performance. O(n^2) -> O(n)\n\t\t\t\t\tlogger.time(`sort concat configurations`);\n\t\t\t\t\tconcatConfigurations.sort((a, b) => {\n\t\t\t\t\t\treturn b.modules.size - a.modules.size;\n\t\t\t\t\t});\n\t\t\t\t\tlogger.timeEnd(`sort concat configurations`);\n\t\t\t\t\tconst usedModules = new Set();\n\n\t\t\t\t\tlogger.time(\"create concatenated modules\");\n\t\t\t\t\tasyncLib.each(\n\t\t\t\t\t\tconcatConfigurations,\n\t\t\t\t\t\t(concatConfiguration, callback) => {\n\t\t\t\t\t\t\tconst rootModule = concatConfiguration.rootModule;\n\n\t\t\t\t\t\t\t// Avoid overlapping configurations\n\t\t\t\t\t\t\t// TODO: remove this when todo above is fixed\n\t\t\t\t\t\t\tif (usedModules.has(rootModule)) return callback();\n\t\t\t\t\t\t\tconst modules = concatConfiguration.getModules();\n\t\t\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\t\t\tusedModules.add(m);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Create a new ConcatenatedModule\n\t\t\t\t\t\t\tlet newModule = ConcatenatedModule.create(\n\t\t\t\t\t\t\t\trootModule,\n\t\t\t\t\t\t\t\tmodules,\n\t\t\t\t\t\t\t\tconcatConfiguration.runtime,\n\t\t\t\t\t\t\t\tcompiler.root,\n\t\t\t\t\t\t\t\tcompilation.outputOptions.hashFunction\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tconst build = () => {\n\t\t\t\t\t\t\t\tnewModule.build(\n\t\t\t\t\t\t\t\t\tcompiler.options,\n\t\t\t\t\t\t\t\t\tcompilation,\n\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\terr => {\n\t\t\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\t\t\tif (!err.module) {\n\t\t\t\t\t\t\t\t\t\t\t\terr.module = newModule;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tintegrate();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tconst integrate = () => {\n\t\t\t\t\t\t\t\tif (backCompat) {\n\t\t\t\t\t\t\t\t\tChunkGraph.setChunkGraphForModule(newModule, chunkGraph);\n\t\t\t\t\t\t\t\t\tModuleGraph.setModuleGraphForModule(newModule, moduleGraph);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tfor (const warning of concatConfiguration.getWarningsSorted()) {\n\t\t\t\t\t\t\t\t\tmoduleGraph\n\t\t\t\t\t\t\t\t\t\t.getOptimizationBailout(newModule)\n\t\t\t\t\t\t\t\t\t\t.push(formatBailoutWarning(warning[0], warning[1]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tmoduleGraph.cloneModuleAttributes(rootModule, newModule);\n\t\t\t\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\t\t\t\t// add to builtModules when one of the included modules was built\n\t\t\t\t\t\t\t\t\tif (compilation.builtModules.has(m)) {\n\t\t\t\t\t\t\t\t\t\tcompilation.builtModules.add(newModule);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (m !== rootModule) {\n\t\t\t\t\t\t\t\t\t\t// attach external references to the concatenated module too\n\t\t\t\t\t\t\t\t\t\tmoduleGraph.copyOutgoingModuleConnections(\n\t\t\t\t\t\t\t\t\t\t\tm,\n\t\t\t\t\t\t\t\t\t\t\tnewModule,\n\t\t\t\t\t\t\t\t\t\t\tc => {\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\tc.originModule === m &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t!(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tc.dependency instanceof HarmonyImportDependency &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodules.has(c.module)\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t// remove module from chunk\n\t\t\t\t\t\t\t\t\t\tfor (const chunk of chunkGraph.getModuleChunksIterable(\n\t\t\t\t\t\t\t\t\t\t\trootModule\n\t\t\t\t\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\t\t\t\t\tconst sourceTypes = chunkGraph.getChunkModuleSourceTypes(\n\t\t\t\t\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\t\t\t\t\tm\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tif (sourceTypes.size === 1) {\n\t\t\t\t\t\t\t\t\t\t\t\tchunkGraph.disconnectChunkAndModule(chunk, m);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tconst newSourceTypes = new Set(sourceTypes);\n\t\t\t\t\t\t\t\t\t\t\t\tnewSourceTypes.delete(\"javascript\");\n\t\t\t\t\t\t\t\t\t\t\t\tchunkGraph.setChunkModuleSourceTypes(\n\t\t\t\t\t\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\t\t\t\t\t\tm,\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewSourceTypes\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcompilation.modules.delete(rootModule);\n\t\t\t\t\t\t\t\tChunkGraph.clearChunkGraphForModule(rootModule);\n\t\t\t\t\t\t\t\tModuleGraph.clearModuleGraphForModule(rootModule);\n\n\t\t\t\t\t\t\t\t// remove module from chunk\n\t\t\t\t\t\t\t\tchunkGraph.replaceModule(rootModule, newModule);\n\t\t\t\t\t\t\t\t// replace module references with the concatenated module\n\t\t\t\t\t\t\t\tmoduleGraph.moveModuleConnections(rootModule, newModule, c => {\n\t\t\t\t\t\t\t\t\tconst otherModule =\n\t\t\t\t\t\t\t\t\t\tc.module === rootModule ? c.originModule : c.module;\n\t\t\t\t\t\t\t\t\tconst innerConnection =\n\t\t\t\t\t\t\t\t\t\tc.dependency instanceof HarmonyImportDependency &&\n\t\t\t\t\t\t\t\t\t\tmodules.has(otherModule);\n\t\t\t\t\t\t\t\t\treturn !innerConnection;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t// add concatenated module to the compilation\n\t\t\t\t\t\t\t\tcompilation.modules.add(newModule);\n\n\t\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tbuild();\n\t\t\t\t\t\t},\n\t\t\t\t\t\terr => {\n\t\t\t\t\t\t\tlogger.timeEnd(\"create concatenated modules\");\n\t\t\t\t\t\t\tprocess.nextTick(callback.bind(null, err));\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * @param {Compilation} compilation the compilation\n\t * @param {Module} module the module to be added\n\t * @param {RuntimeSpec} runtime the runtime scope\n\t * @returns {Set<Module>} the imported modules\n\t */\n\t_getImports(compilation, module, runtime) {\n\t\tconst moduleGraph = compilation.moduleGraph;\n\t\tconst set = new Set();\n\t\tfor (const dep of module.dependencies) {\n\t\t\t// Get reference info only for harmony Dependencies\n\t\t\tif (!(dep instanceof HarmonyImportDependency)) continue;\n\n\t\t\tconst connection = moduleGraph.getConnection(dep);\n\t\t\t// Reference is valid and has a module\n\t\t\tif (\n\t\t\t\t!connection ||\n\t\t\t\t!connection.module ||\n\t\t\t\t!connection.isTargetActive(runtime)\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst importedNames = compilation.getDependencyReferencedExports(\n\t\t\t\tdep,\n\t\t\t\tundefined\n\t\t\t);\n\n\t\t\tif (\n\t\t\t\timportedNames.every(i =>\n\t\t\t\t\tArray.isArray(i) ? i.length > 0 : i.name.length > 0\n\t\t\t\t) ||\n\t\t\t\tArray.isArray(moduleGraph.getProvidedExports(module))\n\t\t\t) {\n\t\t\t\tset.add(connection.module);\n\t\t\t}\n\t\t}\n\t\treturn set;\n\t}\n\n\t/**\n\t * @param {Compilation} compilation webpack compilation\n\t * @param {ConcatConfiguration} config concat configuration (will be modified when added)\n\t * @param {Module} module the module to be added\n\t * @param {RuntimeSpec} runtime the runtime scope of the generated code\n\t * @param {RuntimeSpec} activeRuntime the runtime scope of the root module\n\t * @param {Set<Module>} possibleModules modules that are candidates\n\t * @param {Set<Module>} candidates list of potential candidates (will be added to)\n\t * @param {Map<Module, Module | function(RequestShortener): string>} failureCache cache for problematic modules to be more performant\n\t * @param {ChunkGraph} chunkGraph the chunk graph\n\t * @param {boolean} avoidMutateOnFailure avoid mutating the config when adding fails\n\t * @param {Statistics} statistics gathering metrics\n\t * @returns {Module | function(RequestShortener): string} the problematic module\n\t */\n\t_tryToAdd(\n\t\tcompilation,\n\t\tconfig,\n\t\tmodule,\n\t\truntime,\n\t\tactiveRuntime,\n\t\tpossibleModules,\n\t\tcandidates,\n\t\tfailureCache,\n\t\tchunkGraph,\n\t\tavoidMutateOnFailure,\n\t\tstatistics\n\t) {\n\t\tconst cacheEntry = failureCache.get(module);\n\t\tif (cacheEntry) {\n\t\t\tstatistics.cached++;\n\t\t\treturn cacheEntry;\n\t\t}\n\n\t\t// Already added?\n\t\tif (config.has(module)) {\n\t\t\tstatistics.alreadyInConfig++;\n\t\t\treturn null;\n\t\t}\n\n\t\t// Not possible to add?\n\t\tif (!possibleModules.has(module)) {\n\t\t\tstatistics.invalidModule++;\n\t\t\tfailureCache.set(module, module); // cache failures for performance\n\t\t\treturn module;\n\t\t}\n\n\t\t// Module must be in the correct chunks\n\t\tconst missingChunks = Array.from(\n\t\t\tchunkGraph.getModuleChunksIterable(config.rootModule)\n\t\t).filter(chunk => !chunkGraph.isModuleInChunk(module, chunk));\n\t\tif (missingChunks.length > 0) {\n\t\t\tconst problem = requestShortener => {\n\t\t\t\tconst missingChunksList = Array.from(\n\t\t\t\t\tnew Set(missingChunks.map(chunk => chunk.name || \"unnamed chunk(s)\"))\n\t\t\t\t).sort();\n\t\t\t\tconst chunks = Array.from(\n\t\t\t\t\tnew Set(\n\t\t\t\t\t\tArray.from(chunkGraph.getModuleChunksIterable(module)).map(\n\t\t\t\t\t\t\tchunk => chunk.name || \"unnamed chunk(s)\"\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t).sort();\n\t\t\t\treturn `Module ${module.readableIdentifier(\n\t\t\t\t\trequestShortener\n\t\t\t\t)} is not in the same chunk(s) (expected in chunk(s) ${missingChunksList.join(\n\t\t\t\t\t\", \"\n\t\t\t\t)}, module is in chunk(s) ${chunks.join(\", \")})`;\n\t\t\t};\n\t\t\tstatistics.incorrectChunks++;\n\t\t\tfailureCache.set(module, problem); // cache failures for performance\n\t\t\treturn problem;\n\t\t}\n\n\t\tconst moduleGraph = compilation.moduleGraph;\n\n\t\tconst incomingConnections =\n\t\t\tmoduleGraph.getIncomingConnectionsByOriginModule(module);\n\n\t\tconst incomingConnectionsFromNonModules =\n\t\t\tincomingConnections.get(null) || incomingConnections.get(undefined);\n\t\tif (incomingConnectionsFromNonModules) {\n\t\t\tconst activeNonModulesConnections =\n\t\t\t\tincomingConnectionsFromNonModules.filter(connection => {\n\t\t\t\t\t// We are not interested in inactive connections\n\t\t\t\t\t// or connections without dependency\n\t\t\t\t\treturn connection.isActive(runtime);\n\t\t\t\t});\n\t\t\tif (activeNonModulesConnections.length > 0) {\n\t\t\t\tconst problem = requestShortener => {\n\t\t\t\t\tconst importingExplanations = new Set(\n\t\t\t\t\t\tactiveNonModulesConnections.map(c => c.explanation).filter(Boolean)\n\t\t\t\t\t);\n\t\t\t\t\tconst explanations = Array.from(importingExplanations).sort();\n\t\t\t\t\treturn `Module ${module.readableIdentifier(\n\t\t\t\t\t\trequestShortener\n\t\t\t\t\t)} is referenced ${\n\t\t\t\t\t\texplanations.length > 0\n\t\t\t\t\t\t\t? `by: ${explanations.join(\", \")}`\n\t\t\t\t\t\t\t: \"in an unsupported way\"\n\t\t\t\t\t}`;\n\t\t\t\t};\n\t\t\t\tstatistics.incorrectDependency++;\n\t\t\t\tfailureCache.set(module, problem); // cache failures for performance\n\t\t\t\treturn problem;\n\t\t\t}\n\t\t}\n\n\t\t/** @type {Map<Module, readonly ModuleGraph.ModuleGraphConnection[]>} */\n\t\tconst incomingConnectionsFromModules = new Map();\n\t\tfor (const [originModule, connections] of incomingConnections) {\n\t\t\tif (originModule) {\n\t\t\t\t// Ignore connection from orphan modules\n\t\t\t\tif (chunkGraph.getNumberOfModuleChunks(originModule) === 0) continue;\n\n\t\t\t\t// We don't care for connections from other runtimes\n\t\t\t\tlet originRuntime = undefined;\n\t\t\t\tfor (const r of chunkGraph.getModuleRuntimes(originModule)) {\n\t\t\t\t\toriginRuntime = mergeRuntimeOwned(originRuntime, r);\n\t\t\t\t}\n\n\t\t\t\tif (!intersectRuntime(runtime, originRuntime)) continue;\n\n\t\t\t\t// We are not interested in inactive connections\n\t\t\t\tconst activeConnections = connections.filter(connection =>\n\t\t\t\t\tconnection.isActive(runtime)\n\t\t\t\t);\n\t\t\t\tif (activeConnections.length > 0)\n\t\t\t\t\tincomingConnectionsFromModules.set(originModule, activeConnections);\n\t\t\t}\n\t\t}\n\n\t\tconst incomingModules = Array.from(incomingConnectionsFromModules.keys());\n\n\t\t// Module must be in the same chunks like the referencing module\n\t\tconst otherChunkModules = incomingModules.filter(originModule => {\n\t\t\tfor (const chunk of chunkGraph.getModuleChunksIterable(\n\t\t\t\tconfig.rootModule\n\t\t\t)) {\n\t\t\t\tif (!chunkGraph.isModuleInChunk(originModule, chunk)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\t\tif (otherChunkModules.length > 0) {\n\t\t\tconst problem = requestShortener => {\n\t\t\t\tconst names = otherChunkModules\n\t\t\t\t\t.map(m => m.readableIdentifier(requestShortener))\n\t\t\t\t\t.sort();\n\t\t\t\treturn `Module ${module.readableIdentifier(\n\t\t\t\t\trequestShortener\n\t\t\t\t)} is referenced from different chunks by these modules: ${names.join(\n\t\t\t\t\t\", \"\n\t\t\t\t)}`;\n\t\t\t};\n\t\t\tstatistics.incorrectChunksOfImporter++;\n\t\t\tfailureCache.set(module, problem); // cache failures for performance\n\t\t\treturn problem;\n\t\t}\n\n\t\t/** @type {Map<Module, readonly ModuleGraph.ModuleGraphConnection[]>} */\n\t\tconst nonHarmonyConnections = new Map();\n\t\tfor (const [originModule, connections] of incomingConnectionsFromModules) {\n\t\t\tconst selected = connections.filter(\n\t\t\t\tconnection =>\n\t\t\t\t\t!connection.dependency ||\n\t\t\t\t\t!(connection.dependency instanceof HarmonyImportDependency)\n\t\t\t);\n\t\t\tif (selected.length > 0)\n\t\t\t\tnonHarmonyConnections.set(originModule, connections);\n\t\t}\n\t\tif (nonHarmonyConnections.size > 0) {\n\t\t\tconst problem = requestShortener => {\n\t\t\t\tconst names = Array.from(nonHarmonyConnections)\n\t\t\t\t\t.map(([originModule, connections]) => {\n\t\t\t\t\t\treturn `${originModule.readableIdentifier(\n\t\t\t\t\t\t\trequestShortener\n\t\t\t\t\t\t)} (referenced with ${Array.from(\n\t\t\t\t\t\t\tnew Set(\n\t\t\t\t\t\t\t\tconnections\n\t\t\t\t\t\t\t\t\t.map(c => c.dependency && c.dependency.type)\n\t\t\t\t\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.sort()\n\t\t\t\t\t\t\t.join(\", \")})`;\n\t\t\t\t\t})\n\t\t\t\t\t.sort();\n\t\t\t\treturn `Module ${module.readableIdentifier(\n\t\t\t\t\trequestShortener\n\t\t\t\t)} is referenced from these modules with unsupported syntax: ${names.join(\n\t\t\t\t\t\", \"\n\t\t\t\t)}`;\n\t\t\t};\n\t\t\tstatistics.incorrectModuleDependency++;\n\t\t\tfailureCache.set(module, problem); // cache failures for performance\n\t\t\treturn problem;\n\t\t}\n\n\t\tif (runtime !== undefined && typeof runtime !== \"string\") {\n\t\t\t// Module must be consistently referenced in the same runtimes\n\t\t\t/** @type {{ originModule: Module, runtimeCondition: RuntimeSpec }[]} */\n\t\t\tconst otherRuntimeConnections = [];\n\t\t\touter: for (const [\n\t\t\t\toriginModule,\n\t\t\t\tconnections\n\t\t\t] of incomingConnectionsFromModules) {\n\t\t\t\t/** @type {false | RuntimeSpec} */\n\t\t\t\tlet currentRuntimeCondition = false;\n\t\t\t\tfor (const connection of connections) {\n\t\t\t\t\tconst runtimeCondition = filterRuntime(runtime, runtime => {\n\t\t\t\t\t\treturn connection.isTargetActive(runtime);\n\t\t\t\t\t});\n\t\t\t\t\tif (runtimeCondition === false) continue;\n\t\t\t\t\tif (runtimeCondition === true) continue outer;\n\t\t\t\t\tif (currentRuntimeCondition !== false) {\n\t\t\t\t\t\tcurrentRuntimeCondition = mergeRuntime(\n\t\t\t\t\t\t\tcurrentRuntimeCondition,\n\t\t\t\t\t\t\truntimeCondition\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentRuntimeCondition = runtimeCondition;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (currentRuntimeCondition !== false) {\n\t\t\t\t\totherRuntimeConnections.push({\n\t\t\t\t\t\toriginModule,\n\t\t\t\t\t\truntimeCondition: currentRuntimeCondition\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (otherRuntimeConnections.length > 0) {\n\t\t\t\tconst problem = requestShortener => {\n\t\t\t\t\treturn `Module ${module.readableIdentifier(\n\t\t\t\t\t\trequestShortener\n\t\t\t\t\t)} is runtime-dependent referenced by these modules: ${Array.from(\n\t\t\t\t\t\totherRuntimeConnections,\n\t\t\t\t\t\t({ originModule, runtimeCondition }) =>\n\t\t\t\t\t\t\t`${originModule.readableIdentifier(\n\t\t\t\t\t\t\t\trequestShortener\n\t\t\t\t\t\t\t)} (expected runtime ${runtimeToString(\n\t\t\t\t\t\t\t\truntime\n\t\t\t\t\t\t\t)}, module is only referenced in ${runtimeToString(\n\t\t\t\t\t\t\t\t/** @type {RuntimeSpec} */ (runtimeCondition)\n\t\t\t\t\t\t\t)})`\n\t\t\t\t\t).join(\", \")}`;\n\t\t\t\t};\n\t\t\t\tstatistics.incorrectRuntimeCondition++;\n\t\t\t\tfailureCache.set(module, problem); // cache failures for performance\n\t\t\t\treturn problem;\n\t\t\t}\n\t\t}\n\n\t\tlet backup;\n\t\tif (avoidMutateOnFailure) {\n\t\t\tbackup = config.snapshot();\n\t\t}\n\n\t\t// Add the module\n\t\tconfig.add(module);\n\n\t\tincomingModules.sort(compareModulesByIdentifier);\n\n\t\t// Every module which depends on the added module must be in the configuration too.\n\t\tfor (const originModule of incomingModules) {\n\t\t\tconst problem = this._tryToAdd(\n\t\t\t\tcompilation,\n\t\t\t\tconfig,\n\t\t\t\toriginModule,\n\t\t\t\truntime,\n\t\t\t\tactiveRuntime,\n\t\t\t\tpossibleModules,\n\t\t\t\tcandidates,\n\t\t\t\tfailureCache,\n\t\t\t\tchunkGraph,\n\t\t\t\tfalse,\n\t\t\t\tstatistics\n\t\t\t);\n\t\t\tif (problem) {\n\t\t\t\tif (backup !== undefined) config.rollback(backup);\n\t\t\t\tstatistics.importerFailed++;\n\t\t\t\tfailureCache.set(module, problem); // cache failures for performance\n\t\t\t\treturn problem;\n\t\t\t}\n\t\t}\n\n\t\t// Add imports to possible candidates list\n\t\tfor (const imp of this._getImports(compilation, module, runtime)) {\n\t\t\tcandidates.add(imp);\n\t\t}\n\t\tstatistics.added++;\n\t\treturn null;\n\t}\n}\n\nclass ConcatConfiguration {\n\t/**\n\t * @param {Module} rootModule the root module\n\t * @param {RuntimeSpec} runtime the runtime\n\t */\n\tconstructor(rootModule, runtime) {\n\t\tthis.rootModule = rootModule;\n\t\tthis.runtime = runtime;\n\t\t/** @type {Set<Module>} */\n\t\tthis.modules = new Set();\n\t\tthis.modules.add(rootModule);\n\t\t/** @type {Map<Module, Module | function(RequestShortener): string>} */\n\t\tthis.warnings = new Map();\n\t}\n\n\tadd(module) {\n\t\tthis.modules.add(module);\n\t}\n\n\thas(module) {\n\t\treturn this.modules.has(module);\n\t}\n\n\tisEmpty() {\n\t\treturn this.modules.size === 1;\n\t}\n\n\taddWarning(module, problem) {\n\t\tthis.warnings.set(module, problem);\n\t}\n\n\tgetWarningsSorted() {\n\t\treturn new Map(\n\t\t\tArray.from(this.warnings).sort((a, b) => {\n\t\t\t\tconst ai = a[0].identifier();\n\t\t\t\tconst bi = b[0].identifier();\n\t\t\t\tif (ai < bi) return -1;\n\t\t\t\tif (ai > bi) return 1;\n\t\t\t\treturn 0;\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * @returns {Set<Module>} modules as set\n\t */\n\tgetModules() {\n\t\treturn this.modules;\n\t}\n\n\tsnapshot() {\n\t\treturn this.modules.size;\n\t}\n\n\trollback(snapshot) {\n\t\tconst modules = this.modules;\n\t\tfor (const m of modules) {\n\t\t\tif (snapshot === 0) {\n\t\t\t\tmodules.delete(m);\n\t\t\t} else {\n\t\t\t\tsnapshot--;\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = ModuleConcatenationPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}