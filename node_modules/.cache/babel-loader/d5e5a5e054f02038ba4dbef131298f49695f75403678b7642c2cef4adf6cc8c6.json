{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar CommonJsChunkFormatPlugin = require(\"../javascript/CommonJsChunkFormatPlugin\");\nvar EnableChunkLoadingPlugin = require(\"../javascript/EnableChunkLoadingPlugin\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\nvar NodeTemplatePlugin = /*#__PURE__*/function () {\n  function NodeTemplatePlugin(options) {\n    _classCallCheck(this, NodeTemplatePlugin);\n    this._options = options || {};\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  _createClass(NodeTemplatePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var chunkLoading = this._options.asyncChunkLoading ? \"async-node\" : \"require\";\n      compiler.options.output.chunkLoading = chunkLoading;\n      new CommonJsChunkFormatPlugin().apply(compiler);\n      new EnableChunkLoadingPlugin(chunkLoading).apply(compiler);\n    }\n  }]);\n  return NodeTemplatePlugin;\n}();\nmodule.exports = NodeTemplatePlugin;","map":{"version":3,"names":["CommonJsChunkFormatPlugin","require","EnableChunkLoadingPlugin","NodeTemplatePlugin","options","_options","compiler","chunkLoading","asyncChunkLoading","output","apply","module","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/node/NodeTemplatePlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst CommonJsChunkFormatPlugin = require(\"../javascript/CommonJsChunkFormatPlugin\");\nconst EnableChunkLoadingPlugin = require(\"../javascript/EnableChunkLoadingPlugin\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass NodeTemplatePlugin {\n\tconstructor(options) {\n\t\tthis._options = options || {};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst chunkLoading = this._options.asyncChunkLoading\n\t\t\t? \"async-node\"\n\t\t\t: \"require\";\n\t\tcompiler.options.output.chunkLoading = chunkLoading;\n\t\tnew CommonJsChunkFormatPlugin().apply(compiler);\n\t\tnew EnableChunkLoadingPlugin(chunkLoading).apply(compiler);\n\t}\n}\n\nmodule.exports = NodeTemplatePlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAAC;AAAA;AAEb,IAAMA,yBAAyB,GAAGC,OAAO,CAAC,yCAAyC,CAAC;AACpF,IAAMC,wBAAwB,GAAGD,OAAO,CAAC,wCAAwC,CAAC;;AAElF;AAAA,IAEME,kBAAkB;EACvB,4BAAYC,OAAO,EAAE;IAAA;IACpB,IAAI,CAACC,QAAQ,GAAGD,OAAO,IAAI,CAAC,CAAC;EAC9B;;EAEA;AACD;AACA;AACA;AACA;EAJC;IAAA;IAAA,OAKA,eAAME,QAAQ,EAAE;MACf,IAAMC,YAAY,GAAG,IAAI,CAACF,QAAQ,CAACG,iBAAiB,GACjD,YAAY,GACZ,SAAS;MACZF,QAAQ,CAACF,OAAO,CAACK,MAAM,CAACF,YAAY,GAAGA,YAAY;MACnD,IAAIP,yBAAyB,EAAE,CAACU,KAAK,CAACJ,QAAQ,CAAC;MAC/C,IAAIJ,wBAAwB,CAACK,YAAY,CAAC,CAACG,KAAK,CAACJ,QAAQ,CAAC;IAC3D;EAAC;EAAA;AAAA;AAGFK,MAAM,CAACC,OAAO,GAAGT,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}