{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {Partial<ResolveRequest>} test compare object\n   * @param {string | null} message log message\n   * @param {boolean} allowAlternatives when false, do not continue with the current step when \"test\" matches\n   * @param {string | ResolveStepHook} target target\n   */\n  function ConditionalPlugin(source, test, message, allowAlternatives, target) {\n    _classCallCheck(this, ConditionalPlugin);\n    this.source = source;\n    this.test = test;\n    this.message = message;\n    this.allowAlternatives = allowAlternatives;\n    this.target = target;\n  }\n\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n  _createClass(ConditionalPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var target = resolver.ensureHook(this.target);\n      var test = this.test,\n        message = this.message,\n        allowAlternatives = this.allowAlternatives;\n      var keys = Object.keys(test);\n      resolver.getHook(this.source).tapAsync(\"ConditionalPlugin\", function (request, resolveContext, callback) {\n        for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {\n          var prop = _keys[_i];\n          if (request[prop] !== test[prop]) return callback();\n        }\n        resolver.doResolve(target, request, message, resolveContext, allowAlternatives ? callback : function (err, result) {\n          if (err) return callback(err);\n\n          // Don't allow other alternatives\n          if (result === undefined) return callback(null, null);\n          callback(null, result);\n        });\n      });\n    }\n  }]);\n  return ConditionalPlugin;\n}();","map":{"version":3,"names":["module","exports","source","test","message","allowAlternatives","target","resolver","ensureHook","keys","Object","getHook","tapAsync","request","resolveContext","callback","prop","doResolve","err","result","undefined"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/enhanced-resolve/lib/ConditionalPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class ConditionalPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {Partial<ResolveRequest>} test compare object\n\t * @param {string | null} message log message\n\t * @param {boolean} allowAlternatives when false, do not continue with the current step when \"test\" matches\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, test, message, allowAlternatives, target) {\n\t\tthis.source = source;\n\t\tthis.test = test;\n\t\tthis.message = message;\n\t\tthis.allowAlternatives = allowAlternatives;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tconst { test, message, allowAlternatives } = this;\n\t\tconst keys = Object.keys(test);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"ConditionalPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tfor (const prop of keys) {\n\t\t\t\t\tif (request[prop] !== test[prop]) return callback();\n\t\t\t\t}\n\t\t\t\tresolver.doResolve(\n\t\t\t\t\ttarget,\n\t\t\t\t\trequest,\n\t\t\t\t\tmessage,\n\t\t\t\t\tresolveContext,\n\t\t\t\t\tallowAlternatives\n\t\t\t\t\t\t? callback\n\t\t\t\t\t\t: (err, result) => {\n\t\t\t\t\t\t\t\tif (err) return callback(err);\n\n\t\t\t\t\t\t\t\t// Don't allow other alternatives\n\t\t\t\t\t\t\t\tif (result === undefined) return callback(null, null);\n\t\t\t\t\t\t\t\tcallback(null, result);\n\t\t\t\t\t\t  }\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAAA;AAAA;AAEAA,MAAM,CAACC,OAAO;EACb;AACD;AACA;AACA;AACA;AACA;AACA;EACC,2BAAYC,MAAM,EAAEC,IAAI,EAAEC,OAAO,EAAEC,iBAAiB,EAAEC,MAAM,EAAE;IAAA;IAC7D,IAAI,CAACJ,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,MAAM,GAAGA,MAAM;EACrB;;EAEA;AACD;AACA;AACA;EAHC;IAAA;IAAA,OAIA,eAAMC,QAAQ,EAAE;MACf,IAAMD,MAAM,GAAGC,QAAQ,CAACC,UAAU,CAAC,IAAI,CAACF,MAAM,CAAC;MAC/C,IAAQH,IAAI,GAAiC,IAAI,CAAzCA,IAAI;QAAEC,OAAO,GAAwB,IAAI,CAAnCA,OAAO;QAAEC,iBAAiB,GAAK,IAAI,CAA1BA,iBAAiB;MACxC,IAAMI,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACN,IAAI,CAAC;MAC9BI,QAAQ,CACNI,OAAO,CAAC,IAAI,CAACT,MAAM,CAAC,CACpBU,QAAQ,CAAC,mBAAmB,EAAE,UAACC,OAAO,EAAEC,cAAc,EAAEC,QAAQ,EAAK;QACrE,yBAAmBN,IAAI,2BAAE;UAApB,IAAMO,IAAI;UACd,IAAIH,OAAO,CAACG,IAAI,CAAC,KAAKb,IAAI,CAACa,IAAI,CAAC,EAAE,OAAOD,QAAQ,EAAE;QACpD;QACAR,QAAQ,CAACU,SAAS,CACjBX,MAAM,EACNO,OAAO,EACPT,OAAO,EACPU,cAAc,EACdT,iBAAiB,GACdU,QAAQ,GACR,UAACG,GAAG,EAAEC,MAAM,EAAK;UACjB,IAAID,GAAG,EAAE,OAAOH,QAAQ,CAACG,GAAG,CAAC;;UAE7B;UACA,IAAIC,MAAM,KAAKC,SAAS,EAAE,OAAOL,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;UACrDA,QAAQ,CAAC,IAAI,EAAEI,MAAM,CAAC;QACtB,CAAC,CACJ;MACF,CAAC,CAAC;IACJ;EAAC;EAAA;AAAA,GACD"},"metadata":{},"sourceType":"script","externalDependencies":[]}