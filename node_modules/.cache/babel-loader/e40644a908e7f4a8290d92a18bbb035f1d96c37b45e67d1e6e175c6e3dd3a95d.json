{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nvar _slicedToArray = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar streamChunksOfSourceMap = require(\"./streamChunksOfSourceMap\");\nvar splitIntoLines = require(\"./splitIntoLines\");\nvar streamChunksOfCombinedSourceMap = function streamChunksOfCombinedSourceMap(source, sourceMap, innerSourceName, innerSource, innerSourceMap, removeInnerSource, onChunk, onSource, onName, finalSource, columns) {\n  var sourceMapping = new Map();\n  var nameMapping = new Map();\n  var sourceIndexMapping = [];\n  var nameIndexMapping = [];\n  var nameIndexValueMapping = [];\n  var innerSourceIndex = -2;\n  var innerSourceIndexMapping = [];\n  var innerSourceIndexValueMapping = [];\n  var innerSourceContents = [];\n  var innerSourceContentLines = [];\n  var innerNameIndexMapping = [];\n  var innerNameIndexValueMapping = [];\n  var innerSourceMapLineData = [];\n  var findInnerMapping = function findInnerMapping(line, column) {\n    if (line > innerSourceMapLineData.length) return -1;\n    var mappingsData = innerSourceMapLineData[line - 1].mappingsData;\n    var l = 0;\n    var r = mappingsData.length / 5;\n    while (l < r) {\n      var m = l + r >> 1;\n      if (mappingsData[m * 5] <= column) {\n        l = m + 1;\n      } else {\n        r = m;\n      }\n    }\n    if (l === 0) return -1;\n    return l - 1;\n  };\n  return streamChunksOfSourceMap(source, sourceMap, function (chunk, generatedLine, generatedColumn, sourceIndex, originalLine, originalColumn, nameIndex) {\n    // Check if this is a mapping to the inner source\n    if (sourceIndex === innerSourceIndex) {\n      // Check if there is a mapping in the inner source\n      var idx = findInnerMapping(originalLine, originalColumn);\n      if (idx !== -1) {\n        var _innerSourceMapLineDa = innerSourceMapLineData[originalLine - 1],\n          chunks = _innerSourceMapLineDa.chunks,\n          mappingsData = _innerSourceMapLineDa.mappingsData;\n        var mi = idx * 5;\n        var _innerSourceIndex = mappingsData[mi + 1];\n        var innerOriginalLine = mappingsData[mi + 2];\n        var innerOriginalColumn = mappingsData[mi + 3];\n        var innerNameIndex = mappingsData[mi + 4];\n        if (_innerSourceIndex >= 0) {\n          // Check for an identity mapping\n          // where we are allowed to adjust the original column\n          var innerChunk = chunks[idx];\n          var innerGeneratedColumn = mappingsData[mi];\n          var locationInChunk = originalColumn - innerGeneratedColumn;\n          if (locationInChunk > 0) {\n            var originalSourceLines = _innerSourceIndex < innerSourceContentLines.length ? innerSourceContentLines[_innerSourceIndex] : null;\n            if (originalSourceLines === undefined) {\n              var originalSource = innerSourceContents[_innerSourceIndex];\n              originalSourceLines = originalSource ? splitIntoLines(originalSource) : null;\n              innerSourceContentLines[_innerSourceIndex] = originalSourceLines;\n            }\n            if (originalSourceLines !== null) {\n              var originalChunk = innerOriginalLine <= originalSourceLines.length ? originalSourceLines[innerOriginalLine - 1].slice(innerOriginalColumn, innerOriginalColumn + locationInChunk) : \"\";\n              if (innerChunk.slice(0, locationInChunk) === originalChunk) {\n                innerOriginalColumn += locationInChunk;\n                innerNameIndex = -1;\n              }\n            }\n          }\n\n          // We have a inner mapping to original source\n\n          // emit source when needed and compute global source index\n          var _sourceIndex = _innerSourceIndex < innerSourceIndexMapping.length ? innerSourceIndexMapping[_innerSourceIndex] : -2;\n          if (_sourceIndex === -2) {\n            var _ref = _innerSourceIndex < innerSourceIndexValueMapping.length ? innerSourceIndexValueMapping[_innerSourceIndex] : [null, undefined],\n              _ref2 = _slicedToArray(_ref, 2),\n              _source = _ref2[0],\n              sourceContent = _ref2[1];\n            var globalIndex = sourceMapping.get(_source);\n            if (globalIndex === undefined) {\n              sourceMapping.set(_source, globalIndex = sourceMapping.size);\n              onSource(globalIndex, _source, sourceContent);\n            }\n            _sourceIndex = globalIndex;\n            innerSourceIndexMapping[_innerSourceIndex] = _sourceIndex;\n          }\n\n          // emit name when needed and compute global name index\n          var finalNameIndex = -1;\n          if (innerNameIndex >= 0) {\n            // when we have a inner name\n            finalNameIndex = innerNameIndex < innerNameIndexMapping.length ? innerNameIndexMapping[innerNameIndex] : -2;\n            if (finalNameIndex === -2) {\n              var name = innerNameIndex < innerNameIndexValueMapping.length ? innerNameIndexValueMapping[innerNameIndex] : undefined;\n              if (name) {\n                var _globalIndex = nameMapping.get(name);\n                if (_globalIndex === undefined) {\n                  nameMapping.set(name, _globalIndex = nameMapping.size);\n                  onName(_globalIndex, name);\n                }\n                finalNameIndex = _globalIndex;\n              } else {\n                finalNameIndex = -1;\n              }\n              innerNameIndexMapping[innerNameIndex] = finalNameIndex;\n            }\n          } else if (nameIndex >= 0) {\n            // when we don't have an inner name,\n            // but we have an outer name\n            // it can be used when inner original code equals to the name\n            var _originalSourceLines = innerSourceContentLines[_innerSourceIndex];\n            if (_originalSourceLines === undefined) {\n              var _originalSource = innerSourceContents[_innerSourceIndex];\n              _originalSourceLines = _originalSource ? splitIntoLines(_originalSource) : null;\n              innerSourceContentLines[_innerSourceIndex] = _originalSourceLines;\n            }\n            if (_originalSourceLines !== null) {\n              var _name = nameIndexValueMapping[nameIndex];\n              var originalName = innerOriginalLine <= _originalSourceLines.length ? _originalSourceLines[innerOriginalLine - 1].slice(innerOriginalColumn, innerOriginalColumn + _name.length) : \"\";\n              if (_name === originalName) {\n                finalNameIndex = nameIndex < nameIndexMapping.length ? nameIndexMapping[nameIndex] : -2;\n                if (finalNameIndex === -2) {\n                  var _name2 = nameIndexValueMapping[nameIndex];\n                  if (_name2) {\n                    var _globalIndex2 = nameMapping.get(_name2);\n                    if (_globalIndex2 === undefined) {\n                      nameMapping.set(_name2, _globalIndex2 = nameMapping.size);\n                      onName(_globalIndex2, _name2);\n                    }\n                    finalNameIndex = _globalIndex2;\n                  } else {\n                    finalNameIndex = -1;\n                  }\n                  nameIndexMapping[nameIndex] = finalNameIndex;\n                }\n              }\n            }\n          }\n          onChunk(chunk, generatedLine, generatedColumn, _sourceIndex, innerOriginalLine, innerOriginalColumn, finalNameIndex);\n          return;\n        }\n      }\n\n      // We have a mapping to the inner source, but no inner mapping\n      if (removeInnerSource) {\n        onChunk(chunk, generatedLine, generatedColumn, -1, -1, -1, -1);\n        return;\n      } else {\n        if (sourceIndexMapping[sourceIndex] === -2) {\n          var _globalIndex3 = sourceMapping.get(innerSourceName);\n          if (_globalIndex3 === undefined) {\n            sourceMapping.set(source, _globalIndex3 = sourceMapping.size);\n            onSource(_globalIndex3, innerSourceName, innerSource);\n          }\n          sourceIndexMapping[sourceIndex] = _globalIndex3;\n        }\n      }\n    }\n    var finalSourceIndex = sourceIndex < 0 || sourceIndex >= sourceIndexMapping.length ? -1 : sourceIndexMapping[sourceIndex];\n    if (finalSourceIndex < 0) {\n      // no source, so we make it a generated chunk\n      onChunk(chunk, generatedLine, generatedColumn, -1, -1, -1, -1);\n    } else {\n      // Pass through the chunk with mapping\n      var _finalNameIndex = -1;\n      if (nameIndex >= 0 && nameIndex < nameIndexMapping.length) {\n        _finalNameIndex = nameIndexMapping[nameIndex];\n        if (_finalNameIndex === -2) {\n          var _name3 = nameIndexValueMapping[nameIndex];\n          var _globalIndex4 = nameMapping.get(_name3);\n          if (_globalIndex4 === undefined) {\n            nameMapping.set(_name3, _globalIndex4 = nameMapping.size);\n            onName(_globalIndex4, _name3);\n          }\n          _finalNameIndex = _globalIndex4;\n          nameIndexMapping[nameIndex] = _finalNameIndex;\n        }\n      }\n      onChunk(chunk, generatedLine, generatedColumn, finalSourceIndex, originalLine, originalColumn, _finalNameIndex);\n    }\n  }, function (i, source, sourceContent) {\n    if (source === innerSourceName) {\n      innerSourceIndex = i;\n      if (innerSource !== undefined) sourceContent = innerSource;else innerSource = sourceContent;\n      sourceIndexMapping[i] = -2;\n      streamChunksOfSourceMap(sourceContent, innerSourceMap, function (chunk, generatedLine, generatedColumn, sourceIndex, originalLine, originalColumn, nameIndex) {\n        while (innerSourceMapLineData.length < generatedLine) {\n          innerSourceMapLineData.push({\n            mappingsData: [],\n            chunks: []\n          });\n        }\n        var data = innerSourceMapLineData[generatedLine - 1];\n        data.mappingsData.push(generatedColumn, sourceIndex, originalLine, originalColumn, nameIndex);\n        data.chunks.push(chunk);\n      }, function (i, source, sourceContent) {\n        innerSourceContents[i] = sourceContent;\n        innerSourceContentLines[i] = undefined;\n        innerSourceIndexMapping[i] = -2;\n        innerSourceIndexValueMapping[i] = [source, sourceContent];\n      }, function (i, name) {\n        innerNameIndexMapping[i] = -2;\n        innerNameIndexValueMapping[i] = name;\n      }, false, columns);\n    } else {\n      var globalIndex = sourceMapping.get(source);\n      if (globalIndex === undefined) {\n        sourceMapping.set(source, globalIndex = sourceMapping.size);\n        onSource(globalIndex, source, sourceContent);\n      }\n      sourceIndexMapping[i] = globalIndex;\n    }\n  }, function (i, name) {\n    nameIndexMapping[i] = -2;\n    nameIndexValueMapping[i] = name;\n  }, finalSource, columns);\n};\nmodule.exports = streamChunksOfCombinedSourceMap;","map":{"version":3,"names":["streamChunksOfSourceMap","require","splitIntoLines","streamChunksOfCombinedSourceMap","source","sourceMap","innerSourceName","innerSource","innerSourceMap","removeInnerSource","onChunk","onSource","onName","finalSource","columns","sourceMapping","Map","nameMapping","sourceIndexMapping","nameIndexMapping","nameIndexValueMapping","innerSourceIndex","innerSourceIndexMapping","innerSourceIndexValueMapping","innerSourceContents","innerSourceContentLines","innerNameIndexMapping","innerNameIndexValueMapping","innerSourceMapLineData","findInnerMapping","line","column","length","mappingsData","l","r","m","chunk","generatedLine","generatedColumn","sourceIndex","originalLine","originalColumn","nameIndex","idx","chunks","mi","innerOriginalLine","innerOriginalColumn","innerNameIndex","innerChunk","innerGeneratedColumn","locationInChunk","originalSourceLines","undefined","originalSource","originalChunk","slice","sourceContent","globalIndex","get","set","size","finalNameIndex","name","originalName","finalSourceIndex","i","push","data","module","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack-sources/lib/helpers/streamChunksOfCombinedSourceMap.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst streamChunksOfSourceMap = require(\"./streamChunksOfSourceMap\");\nconst splitIntoLines = require(\"./splitIntoLines\");\n\nconst streamChunksOfCombinedSourceMap = (\n\tsource,\n\tsourceMap,\n\tinnerSourceName,\n\tinnerSource,\n\tinnerSourceMap,\n\tremoveInnerSource,\n\tonChunk,\n\tonSource,\n\tonName,\n\tfinalSource,\n\tcolumns\n) => {\n\tlet sourceMapping = new Map();\n\tlet nameMapping = new Map();\n\tconst sourceIndexMapping = [];\n\tconst nameIndexMapping = [];\n\tconst nameIndexValueMapping = [];\n\tlet innerSourceIndex = -2;\n\tconst innerSourceIndexMapping = [];\n\tconst innerSourceIndexValueMapping = [];\n\tconst innerSourceContents = [];\n\tconst innerSourceContentLines = [];\n\tconst innerNameIndexMapping = [];\n\tconst innerNameIndexValueMapping = [];\n\tconst innerSourceMapLineData = [];\n\tconst findInnerMapping = (line, column) => {\n\t\tif (line > innerSourceMapLineData.length) return -1;\n\t\tconst { mappingsData } = innerSourceMapLineData[line - 1];\n\t\tlet l = 0;\n\t\tlet r = mappingsData.length / 5;\n\t\twhile (l < r) {\n\t\t\tlet m = (l + r) >> 1;\n\t\t\tif (mappingsData[m * 5] <= column) {\n\t\t\t\tl = m + 1;\n\t\t\t} else {\n\t\t\t\tr = m;\n\t\t\t}\n\t\t}\n\t\tif (l === 0) return -1;\n\t\treturn l - 1;\n\t};\n\treturn streamChunksOfSourceMap(\n\t\tsource,\n\t\tsourceMap,\n\t\t(\n\t\t\tchunk,\n\t\t\tgeneratedLine,\n\t\t\tgeneratedColumn,\n\t\t\tsourceIndex,\n\t\t\toriginalLine,\n\t\t\toriginalColumn,\n\t\t\tnameIndex\n\t\t) => {\n\t\t\t// Check if this is a mapping to the inner source\n\t\t\tif (sourceIndex === innerSourceIndex) {\n\t\t\t\t// Check if there is a mapping in the inner source\n\t\t\t\tconst idx = findInnerMapping(originalLine, originalColumn);\n\t\t\t\tif (idx !== -1) {\n\t\t\t\t\tconst { chunks, mappingsData } = innerSourceMapLineData[\n\t\t\t\t\t\toriginalLine - 1\n\t\t\t\t\t];\n\t\t\t\t\tconst mi = idx * 5;\n\t\t\t\t\tconst innerSourceIndex = mappingsData[mi + 1];\n\t\t\t\t\tconst innerOriginalLine = mappingsData[mi + 2];\n\t\t\t\t\tlet innerOriginalColumn = mappingsData[mi + 3];\n\t\t\t\t\tlet innerNameIndex = mappingsData[mi + 4];\n\t\t\t\t\tif (innerSourceIndex >= 0) {\n\t\t\t\t\t\t// Check for an identity mapping\n\t\t\t\t\t\t// where we are allowed to adjust the original column\n\t\t\t\t\t\tconst innerChunk = chunks[idx];\n\t\t\t\t\t\tconst innerGeneratedColumn = mappingsData[mi];\n\t\t\t\t\t\tconst locationInChunk = originalColumn - innerGeneratedColumn;\n\t\t\t\t\t\tif (locationInChunk > 0) {\n\t\t\t\t\t\t\tlet originalSourceLines =\n\t\t\t\t\t\t\t\tinnerSourceIndex < innerSourceContentLines.length\n\t\t\t\t\t\t\t\t\t? innerSourceContentLines[innerSourceIndex]\n\t\t\t\t\t\t\t\t\t: null;\n\t\t\t\t\t\t\tif (originalSourceLines === undefined) {\n\t\t\t\t\t\t\t\tconst originalSource = innerSourceContents[innerSourceIndex];\n\t\t\t\t\t\t\t\toriginalSourceLines = originalSource\n\t\t\t\t\t\t\t\t\t? splitIntoLines(originalSource)\n\t\t\t\t\t\t\t\t\t: null;\n\t\t\t\t\t\t\t\tinnerSourceContentLines[innerSourceIndex] = originalSourceLines;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (originalSourceLines !== null) {\n\t\t\t\t\t\t\t\tconst originalChunk =\n\t\t\t\t\t\t\t\t\tinnerOriginalLine <= originalSourceLines.length\n\t\t\t\t\t\t\t\t\t\t? originalSourceLines[innerOriginalLine - 1].slice(\n\t\t\t\t\t\t\t\t\t\t\t\tinnerOriginalColumn,\n\t\t\t\t\t\t\t\t\t\t\t\tinnerOriginalColumn + locationInChunk\n\t\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t\t\t: \"\";\n\t\t\t\t\t\t\t\tif (innerChunk.slice(0, locationInChunk) === originalChunk) {\n\t\t\t\t\t\t\t\t\tinnerOriginalColumn += locationInChunk;\n\t\t\t\t\t\t\t\t\tinnerNameIndex = -1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// We have a inner mapping to original source\n\n\t\t\t\t\t\t// emit source when needed and compute global source index\n\t\t\t\t\t\tlet sourceIndex =\n\t\t\t\t\t\t\tinnerSourceIndex < innerSourceIndexMapping.length\n\t\t\t\t\t\t\t\t? innerSourceIndexMapping[innerSourceIndex]\n\t\t\t\t\t\t\t\t: -2;\n\t\t\t\t\t\tif (sourceIndex === -2) {\n\t\t\t\t\t\t\tconst [source, sourceContent] =\n\t\t\t\t\t\t\t\tinnerSourceIndex < innerSourceIndexValueMapping.length\n\t\t\t\t\t\t\t\t\t? innerSourceIndexValueMapping[innerSourceIndex]\n\t\t\t\t\t\t\t\t\t: [null, undefined];\n\t\t\t\t\t\t\tlet globalIndex = sourceMapping.get(source);\n\t\t\t\t\t\t\tif (globalIndex === undefined) {\n\t\t\t\t\t\t\t\tsourceMapping.set(source, (globalIndex = sourceMapping.size));\n\t\t\t\t\t\t\t\tonSource(globalIndex, source, sourceContent);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsourceIndex = globalIndex;\n\t\t\t\t\t\t\tinnerSourceIndexMapping[innerSourceIndex] = sourceIndex;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// emit name when needed and compute global name index\n\t\t\t\t\t\tlet finalNameIndex = -1;\n\t\t\t\t\t\tif (innerNameIndex >= 0) {\n\t\t\t\t\t\t\t// when we have a inner name\n\t\t\t\t\t\t\tfinalNameIndex =\n\t\t\t\t\t\t\t\tinnerNameIndex < innerNameIndexMapping.length\n\t\t\t\t\t\t\t\t\t? innerNameIndexMapping[innerNameIndex]\n\t\t\t\t\t\t\t\t\t: -2;\n\t\t\t\t\t\t\tif (finalNameIndex === -2) {\n\t\t\t\t\t\t\t\tconst name =\n\t\t\t\t\t\t\t\t\tinnerNameIndex < innerNameIndexValueMapping.length\n\t\t\t\t\t\t\t\t\t\t? innerNameIndexValueMapping[innerNameIndex]\n\t\t\t\t\t\t\t\t\t\t: undefined;\n\t\t\t\t\t\t\t\tif (name) {\n\t\t\t\t\t\t\t\t\tlet globalIndex = nameMapping.get(name);\n\t\t\t\t\t\t\t\t\tif (globalIndex === undefined) {\n\t\t\t\t\t\t\t\t\t\tnameMapping.set(name, (globalIndex = nameMapping.size));\n\t\t\t\t\t\t\t\t\t\tonName(globalIndex, name);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfinalNameIndex = globalIndex;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tfinalNameIndex = -1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tinnerNameIndexMapping[innerNameIndex] = finalNameIndex;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (nameIndex >= 0) {\n\t\t\t\t\t\t\t// when we don't have an inner name,\n\t\t\t\t\t\t\t// but we have an outer name\n\t\t\t\t\t\t\t// it can be used when inner original code equals to the name\n\t\t\t\t\t\t\tlet originalSourceLines =\n\t\t\t\t\t\t\t\tinnerSourceContentLines[innerSourceIndex];\n\t\t\t\t\t\t\tif (originalSourceLines === undefined) {\n\t\t\t\t\t\t\t\tconst originalSource = innerSourceContents[innerSourceIndex];\n\t\t\t\t\t\t\t\toriginalSourceLines = originalSource\n\t\t\t\t\t\t\t\t\t? splitIntoLines(originalSource)\n\t\t\t\t\t\t\t\t\t: null;\n\t\t\t\t\t\t\t\tinnerSourceContentLines[innerSourceIndex] = originalSourceLines;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (originalSourceLines !== null) {\n\t\t\t\t\t\t\t\tconst name = nameIndexValueMapping[nameIndex];\n\t\t\t\t\t\t\t\tconst originalName =\n\t\t\t\t\t\t\t\t\tinnerOriginalLine <= originalSourceLines.length\n\t\t\t\t\t\t\t\t\t\t? originalSourceLines[innerOriginalLine - 1].slice(\n\t\t\t\t\t\t\t\t\t\t\t\tinnerOriginalColumn,\n\t\t\t\t\t\t\t\t\t\t\t\tinnerOriginalColumn + name.length\n\t\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t\t\t: \"\";\n\t\t\t\t\t\t\t\tif (name === originalName) {\n\t\t\t\t\t\t\t\t\tfinalNameIndex =\n\t\t\t\t\t\t\t\t\t\tnameIndex < nameIndexMapping.length\n\t\t\t\t\t\t\t\t\t\t\t? nameIndexMapping[nameIndex]\n\t\t\t\t\t\t\t\t\t\t\t: -2;\n\t\t\t\t\t\t\t\t\tif (finalNameIndex === -2) {\n\t\t\t\t\t\t\t\t\t\tconst name = nameIndexValueMapping[nameIndex];\n\t\t\t\t\t\t\t\t\t\tif (name) {\n\t\t\t\t\t\t\t\t\t\t\tlet globalIndex = nameMapping.get(name);\n\t\t\t\t\t\t\t\t\t\t\tif (globalIndex === undefined) {\n\t\t\t\t\t\t\t\t\t\t\t\tnameMapping.set(name, (globalIndex = nameMapping.size));\n\t\t\t\t\t\t\t\t\t\t\t\tonName(globalIndex, name);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tfinalNameIndex = globalIndex;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tfinalNameIndex = -1;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tnameIndexMapping[nameIndex] = finalNameIndex;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonChunk(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tgeneratedLine,\n\t\t\t\t\t\t\tgeneratedColumn,\n\t\t\t\t\t\t\tsourceIndex,\n\t\t\t\t\t\t\tinnerOriginalLine,\n\t\t\t\t\t\t\tinnerOriginalColumn,\n\t\t\t\t\t\t\tfinalNameIndex\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// We have a mapping to the inner source, but no inner mapping\n\t\t\t\tif (removeInnerSource) {\n\t\t\t\t\tonChunk(chunk, generatedLine, generatedColumn, -1, -1, -1, -1);\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tif (sourceIndexMapping[sourceIndex] === -2) {\n\t\t\t\t\t\tlet globalIndex = sourceMapping.get(innerSourceName);\n\t\t\t\t\t\tif (globalIndex === undefined) {\n\t\t\t\t\t\t\tsourceMapping.set(source, (globalIndex = sourceMapping.size));\n\t\t\t\t\t\t\tonSource(globalIndex, innerSourceName, innerSource);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsourceIndexMapping[sourceIndex] = globalIndex;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst finalSourceIndex =\n\t\t\t\tsourceIndex < 0 || sourceIndex >= sourceIndexMapping.length\n\t\t\t\t\t? -1\n\t\t\t\t\t: sourceIndexMapping[sourceIndex];\n\t\t\tif (finalSourceIndex < 0) {\n\t\t\t\t// no source, so we make it a generated chunk\n\t\t\t\tonChunk(chunk, generatedLine, generatedColumn, -1, -1, -1, -1);\n\t\t\t} else {\n\t\t\t\t// Pass through the chunk with mapping\n\t\t\t\tlet finalNameIndex = -1;\n\t\t\t\tif (nameIndex >= 0 && nameIndex < nameIndexMapping.length) {\n\t\t\t\t\tfinalNameIndex = nameIndexMapping[nameIndex];\n\t\t\t\t\tif (finalNameIndex === -2) {\n\t\t\t\t\t\tconst name = nameIndexValueMapping[nameIndex];\n\t\t\t\t\t\tlet globalIndex = nameMapping.get(name);\n\t\t\t\t\t\tif (globalIndex === undefined) {\n\t\t\t\t\t\t\tnameMapping.set(name, (globalIndex = nameMapping.size));\n\t\t\t\t\t\t\tonName(globalIndex, name);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfinalNameIndex = globalIndex;\n\t\t\t\t\t\tnameIndexMapping[nameIndex] = finalNameIndex;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tonChunk(\n\t\t\t\t\tchunk,\n\t\t\t\t\tgeneratedLine,\n\t\t\t\t\tgeneratedColumn,\n\t\t\t\t\tfinalSourceIndex,\n\t\t\t\t\toriginalLine,\n\t\t\t\t\toriginalColumn,\n\t\t\t\t\tfinalNameIndex\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t\t(i, source, sourceContent) => {\n\t\t\tif (source === innerSourceName) {\n\t\t\t\tinnerSourceIndex = i;\n\t\t\t\tif (innerSource !== undefined) sourceContent = innerSource;\n\t\t\t\telse innerSource = sourceContent;\n\t\t\t\tsourceIndexMapping[i] = -2;\n\t\t\t\tstreamChunksOfSourceMap(\n\t\t\t\t\tsourceContent,\n\t\t\t\t\tinnerSourceMap,\n\t\t\t\t\t(\n\t\t\t\t\t\tchunk,\n\t\t\t\t\t\tgeneratedLine,\n\t\t\t\t\t\tgeneratedColumn,\n\t\t\t\t\t\tsourceIndex,\n\t\t\t\t\t\toriginalLine,\n\t\t\t\t\t\toriginalColumn,\n\t\t\t\t\t\tnameIndex\n\t\t\t\t\t) => {\n\t\t\t\t\t\twhile (innerSourceMapLineData.length < generatedLine) {\n\t\t\t\t\t\t\tinnerSourceMapLineData.push({\n\t\t\t\t\t\t\t\tmappingsData: [],\n\t\t\t\t\t\t\t\tchunks: []\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst data = innerSourceMapLineData[generatedLine - 1];\n\t\t\t\t\t\tdata.mappingsData.push(\n\t\t\t\t\t\t\tgeneratedColumn,\n\t\t\t\t\t\t\tsourceIndex,\n\t\t\t\t\t\t\toriginalLine,\n\t\t\t\t\t\t\toriginalColumn,\n\t\t\t\t\t\t\tnameIndex\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdata.chunks.push(chunk);\n\t\t\t\t\t},\n\t\t\t\t\t(i, source, sourceContent) => {\n\t\t\t\t\t\tinnerSourceContents[i] = sourceContent;\n\t\t\t\t\t\tinnerSourceContentLines[i] = undefined;\n\t\t\t\t\t\tinnerSourceIndexMapping[i] = -2;\n\t\t\t\t\t\tinnerSourceIndexValueMapping[i] = [source, sourceContent];\n\t\t\t\t\t},\n\t\t\t\t\t(i, name) => {\n\t\t\t\t\t\tinnerNameIndexMapping[i] = -2;\n\t\t\t\t\t\tinnerNameIndexValueMapping[i] = name;\n\t\t\t\t\t},\n\t\t\t\t\tfalse,\n\t\t\t\t\tcolumns\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tlet globalIndex = sourceMapping.get(source);\n\t\t\t\tif (globalIndex === undefined) {\n\t\t\t\t\tsourceMapping.set(source, (globalIndex = sourceMapping.size));\n\t\t\t\t\tonSource(globalIndex, source, sourceContent);\n\t\t\t\t}\n\t\t\t\tsourceIndexMapping[i] = globalIndex;\n\t\t\t}\n\t\t},\n\t\t(i, name) => {\n\t\t\tnameIndexMapping[i] = -2;\n\t\t\tnameIndexValueMapping[i] = name;\n\t\t},\n\t\tfinalSource,\n\t\tcolumns\n\t);\n};\n\nmodule.exports = streamChunksOfCombinedSourceMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}