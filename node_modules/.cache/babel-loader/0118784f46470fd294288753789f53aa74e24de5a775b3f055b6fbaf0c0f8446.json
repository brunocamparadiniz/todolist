{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nvar _inherits = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar parseJson = require(\"json-parse-even-better-errors\");\nvar DelegatedModuleFactoryPlugin = require(\"./DelegatedModuleFactoryPlugin\");\nvar ExternalModuleFactoryPlugin = require(\"./ExternalModuleFactoryPlugin\");\nvar WebpackError = require(\"./WebpackError\");\nvar DelegatedSourceDependency = require(\"./dependencies/DelegatedSourceDependency\");\nvar createSchemaValidation = require(\"./util/create-schema-validation\");\nvar makePathsRelative = require(\"./util/identifier\").makePathsRelative;\n\n/** @typedef {import(\"../declarations/WebpackOptions\").Externals} Externals */\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptions} DllReferencePluginOptions */\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptionsManifest} DllReferencePluginOptionsManifest */\n\nvar validate = createSchemaValidation(require(\"../schemas/plugins/DllReferencePlugin.check.js\"), function () {\n  return require(\"../schemas/plugins/DllReferencePlugin.json\");\n}, {\n  name: \"Dll Reference Plugin\",\n  baseDataPath: \"options\"\n});\nvar DllReferencePlugin = /*#__PURE__*/function () {\n  /**\n   * @param {DllReferencePluginOptions} options options object\n   */\n  function DllReferencePlugin(options) {\n    _classCallCheck(this, DllReferencePlugin);\n    validate(options);\n    this.options = options;\n    /** @type {WeakMap<Object, {path: string, data: DllReferencePluginOptionsManifest?, error: Error?}>} */\n    this._compilationData = new WeakMap();\n  }\n  _createClass(DllReferencePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n      compiler.hooks.compilation.tap(\"DllReferencePlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(DelegatedSourceDependency, normalModuleFactory);\n      });\n      compiler.hooks.beforeCompile.tapAsync(\"DllReferencePlugin\", function (params, callback) {\n        if (\"manifest\" in _this.options) {\n          var manifest = _this.options.manifest;\n          if (typeof manifest === \"string\") {\n            compiler.inputFileSystem.readFile(manifest, function (err, result) {\n              if (err) return callback(err);\n              var data = {\n                path: manifest,\n                data: undefined,\n                error: undefined\n              };\n              // Catch errors parsing the manifest so that blank\n              // or malformed manifest files don't kill the process.\n              try {\n                data.data = parseJson(result.toString(\"utf-8\"));\n              } catch (e) {\n                // Store the error in the params so that it can\n                // be added as a compilation error later on.\n                var manifestPath = makePathsRelative(compiler.options.context, manifest, compiler.root);\n                data.error = new DllManifestError(manifestPath, e.message);\n              }\n              _this._compilationData.set(params, data);\n              return callback();\n            });\n            return;\n          }\n        }\n        return callback();\n      });\n      compiler.hooks.compile.tap(\"DllReferencePlugin\", function (params) {\n        var name = _this.options.name;\n        var sourceType = _this.options.sourceType;\n        var content = \"content\" in _this.options ? _this.options.content : undefined;\n        if (\"manifest\" in _this.options) {\n          var manifestParameter = _this.options.manifest;\n          var manifest;\n          if (typeof manifestParameter === \"string\") {\n            var data = _this._compilationData.get(params);\n            // If there was an error parsing the manifest\n            // file, exit now because the error will be added\n            // as a compilation error in the \"compilation\" hook.\n            if (data.error) {\n              return;\n            }\n            manifest = data.data;\n          } else {\n            manifest = manifestParameter;\n          }\n          if (manifest) {\n            if (!name) name = manifest.name;\n            if (!sourceType) sourceType = manifest.type;\n            if (!content) content = manifest.content;\n          }\n        }\n        /** @type {Externals} */\n        var externals = {};\n        var source = \"dll-reference \" + name;\n        externals[source] = name;\n        var normalModuleFactory = params.normalModuleFactory;\n        new ExternalModuleFactoryPlugin(sourceType || \"var\", externals).apply(normalModuleFactory);\n        new DelegatedModuleFactoryPlugin({\n          source: source,\n          type: _this.options.type,\n          scope: _this.options.scope,\n          context: _this.options.context || compiler.options.context,\n          content: content,\n          extensions: _this.options.extensions,\n          associatedObjectForCache: compiler.root\n        }).apply(normalModuleFactory);\n      });\n      compiler.hooks.compilation.tap(\"DllReferencePlugin\", function (compilation, params) {\n        if (\"manifest\" in _this.options) {\n          var manifest = _this.options.manifest;\n          if (typeof manifest === \"string\") {\n            var data = _this._compilationData.get(params);\n            // If there was an error parsing the manifest file, add the\n            // error as a compilation error to make the compilation fail.\n            if (data.error) {\n              compilation.errors.push(data.error);\n            }\n            compilation.fileDependencies.add(manifest);\n          }\n        }\n      });\n    }\n  }]);\n  return DllReferencePlugin;\n}();\nvar DllManifestError = /*#__PURE__*/function (_WebpackError) {\n  _inherits(DllManifestError, _WebpackError);\n  var _super = _createSuper(DllManifestError);\n  function DllManifestError(filename, message) {\n    var _this2;\n    _classCallCheck(this, DllManifestError);\n    _this2 = _super.call(this);\n    _this2.name = \"DllManifestError\";\n    _this2.message = \"Dll manifest \".concat(filename, \"\\n\").concat(message);\n    return _this2;\n  }\n  return _createClass(DllManifestError);\n}(WebpackError);\nmodule.exports = DllReferencePlugin;","map":{"version":3,"names":["parseJson","require","DelegatedModuleFactoryPlugin","ExternalModuleFactoryPlugin","WebpackError","DelegatedSourceDependency","createSchemaValidation","makePathsRelative","validate","name","baseDataPath","DllReferencePlugin","options","_compilationData","WeakMap","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","beforeCompile","tapAsync","params","callback","manifest","inputFileSystem","readFile","err","result","data","path","undefined","error","toString","e","manifestPath","context","root","DllManifestError","message","compile","sourceType","content","manifestParameter","get","type","externals","source","apply","scope","extensions","associatedObjectForCache","errors","push","fileDependencies","add","filename","module","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/DllReferencePlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst parseJson = require(\"json-parse-even-better-errors\");\nconst DelegatedModuleFactoryPlugin = require(\"./DelegatedModuleFactoryPlugin\");\nconst ExternalModuleFactoryPlugin = require(\"./ExternalModuleFactoryPlugin\");\nconst WebpackError = require(\"./WebpackError\");\nconst DelegatedSourceDependency = require(\"./dependencies/DelegatedSourceDependency\");\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\nconst makePathsRelative = require(\"./util/identifier\").makePathsRelative;\n\n/** @typedef {import(\"../declarations/WebpackOptions\").Externals} Externals */\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptions} DllReferencePluginOptions */\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptionsManifest} DllReferencePluginOptionsManifest */\n\nconst validate = createSchemaValidation(\n\trequire(\"../schemas/plugins/DllReferencePlugin.check.js\"),\n\t() => require(\"../schemas/plugins/DllReferencePlugin.json\"),\n\t{\n\t\tname: \"Dll Reference Plugin\",\n\t\tbaseDataPath: \"options\"\n\t}\n);\n\nclass DllReferencePlugin {\n\t/**\n\t * @param {DllReferencePluginOptions} options options object\n\t */\n\tconstructor(options) {\n\t\tvalidate(options);\n\t\tthis.options = options;\n\t\t/** @type {WeakMap<Object, {path: string, data: DllReferencePluginOptionsManifest?, error: Error?}>} */\n\t\tthis._compilationData = new WeakMap();\n\t}\n\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"DllReferencePlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tDelegatedSourceDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.beforeCompile.tapAsync(\n\t\t\t\"DllReferencePlugin\",\n\t\t\t(params, callback) => {\n\t\t\t\tif (\"manifest\" in this.options) {\n\t\t\t\t\tconst manifest = this.options.manifest;\n\t\t\t\t\tif (typeof manifest === \"string\") {\n\t\t\t\t\t\tcompiler.inputFileSystem.readFile(manifest, (err, result) => {\n\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\tconst data = {\n\t\t\t\t\t\t\t\tpath: manifest,\n\t\t\t\t\t\t\t\tdata: undefined,\n\t\t\t\t\t\t\t\terror: undefined\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t// Catch errors parsing the manifest so that blank\n\t\t\t\t\t\t\t// or malformed manifest files don't kill the process.\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tdata.data = parseJson(result.toString(\"utf-8\"));\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t// Store the error in the params so that it can\n\t\t\t\t\t\t\t\t// be added as a compilation error later on.\n\t\t\t\t\t\t\t\tconst manifestPath = makePathsRelative(\n\t\t\t\t\t\t\t\t\tcompiler.options.context,\n\t\t\t\t\t\t\t\t\tmanifest,\n\t\t\t\t\t\t\t\t\tcompiler.root\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdata.error = new DllManifestError(manifestPath, e.message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis._compilationData.set(params, data);\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn callback();\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.compile.tap(\"DllReferencePlugin\", params => {\n\t\t\tlet name = this.options.name;\n\t\t\tlet sourceType = this.options.sourceType;\n\t\t\tlet content =\n\t\t\t\t\"content\" in this.options ? this.options.content : undefined;\n\t\t\tif (\"manifest\" in this.options) {\n\t\t\t\tlet manifestParameter = this.options.manifest;\n\t\t\t\tlet manifest;\n\t\t\t\tif (typeof manifestParameter === \"string\") {\n\t\t\t\t\tconst data = this._compilationData.get(params);\n\t\t\t\t\t// If there was an error parsing the manifest\n\t\t\t\t\t// file, exit now because the error will be added\n\t\t\t\t\t// as a compilation error in the \"compilation\" hook.\n\t\t\t\t\tif (data.error) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tmanifest = data.data;\n\t\t\t\t} else {\n\t\t\t\t\tmanifest = manifestParameter;\n\t\t\t\t}\n\t\t\t\tif (manifest) {\n\t\t\t\t\tif (!name) name = manifest.name;\n\t\t\t\t\tif (!sourceType) sourceType = manifest.type;\n\t\t\t\t\tif (!content) content = manifest.content;\n\t\t\t\t}\n\t\t\t}\n\t\t\t/** @type {Externals} */\n\t\t\tconst externals = {};\n\t\t\tconst source = \"dll-reference \" + name;\n\t\t\texternals[source] = name;\n\t\t\tconst normalModuleFactory = params.normalModuleFactory;\n\t\t\tnew ExternalModuleFactoryPlugin(sourceType || \"var\", externals).apply(\n\t\t\t\tnormalModuleFactory\n\t\t\t);\n\t\t\tnew DelegatedModuleFactoryPlugin({\n\t\t\t\tsource: source,\n\t\t\t\ttype: this.options.type,\n\t\t\t\tscope: this.options.scope,\n\t\t\t\tcontext: this.options.context || compiler.options.context,\n\t\t\t\tcontent,\n\t\t\t\textensions: this.options.extensions,\n\t\t\t\tassociatedObjectForCache: compiler.root\n\t\t\t}).apply(normalModuleFactory);\n\t\t});\n\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"DllReferencePlugin\",\n\t\t\t(compilation, params) => {\n\t\t\t\tif (\"manifest\" in this.options) {\n\t\t\t\t\tlet manifest = this.options.manifest;\n\t\t\t\t\tif (typeof manifest === \"string\") {\n\t\t\t\t\t\tconst data = this._compilationData.get(params);\n\t\t\t\t\t\t// If there was an error parsing the manifest file, add the\n\t\t\t\t\t\t// error as a compilation error to make the compilation fail.\n\t\t\t\t\t\tif (data.error) {\n\t\t\t\t\t\t\tcompilation.errors.push(data.error);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcompilation.fileDependencies.add(manifest);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n}\n\nclass DllManifestError extends WebpackError {\n\tconstructor(filename, message) {\n\t\tsuper();\n\n\t\tthis.name = \"DllManifestError\";\n\t\tthis.message = `Dll manifest ${filename}\\n${message}`;\n\t}\n}\n\nmodule.exports = DllReferencePlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAAC;AAAA;AAAA;AAAA;AAEb,IAAMA,SAAS,GAAGC,OAAO,CAAC,+BAA+B,CAAC;AAC1D,IAAMC,4BAA4B,GAAGD,OAAO,CAAC,gCAAgC,CAAC;AAC9E,IAAME,2BAA2B,GAAGF,OAAO,CAAC,+BAA+B,CAAC;AAC5E,IAAMG,YAAY,GAAGH,OAAO,CAAC,gBAAgB,CAAC;AAC9C,IAAMI,yBAAyB,GAAGJ,OAAO,CAAC,0CAA0C,CAAC;AACrF,IAAMK,sBAAsB,GAAGL,OAAO,CAAC,iCAAiC,CAAC;AACzE,IAAMM,iBAAiB,GAAGN,OAAO,CAAC,mBAAmB,CAAC,CAACM,iBAAiB;;AAExE;AACA;AACA;;AAEA,IAAMC,QAAQ,GAAGF,sBAAsB,CACtCL,OAAO,CAAC,gDAAgD,CAAC,EACzD;EAAA,OAAMA,OAAO,CAAC,4CAA4C,CAAC;AAAA,GAC3D;EACCQ,IAAI,EAAE,sBAAsB;EAC5BC,YAAY,EAAE;AACf,CAAC,CACD;AAAC,IAEIC,kBAAkB;EACvB;AACD;AACA;EACC,4BAAYC,OAAO,EAAE;IAAA;IACpBJ,QAAQ,CAACI,OAAO,CAAC;IACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB;IACA,IAAI,CAACC,gBAAgB,GAAG,IAAIC,OAAO,EAAE;EACtC;EAAC;IAAA;IAAA,OAED,eAAMC,QAAQ,EAAE;MAAA;MACfA,QAAQ,CAACC,KAAK,CAACC,WAAW,CAACC,GAAG,CAC7B,oBAAoB,EACpB,UAACD,WAAW,QAA8B;QAAA,IAA1BE,mBAAmB,QAAnBA,mBAAmB;QAClCF,WAAW,CAACG,mBAAmB,CAACC,GAAG,CAClChB,yBAAyB,EACzBc,mBAAmB,CACnB;MACF,CAAC,CACD;MAEDJ,QAAQ,CAACC,KAAK,CAACM,aAAa,CAACC,QAAQ,CACpC,oBAAoB,EACpB,UAACC,MAAM,EAAEC,QAAQ,EAAK;QACrB,IAAI,UAAU,IAAI,KAAI,CAACb,OAAO,EAAE;UAC/B,IAAMc,QAAQ,GAAG,KAAI,CAACd,OAAO,CAACc,QAAQ;UACtC,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;YACjCX,QAAQ,CAACY,eAAe,CAACC,QAAQ,CAACF,QAAQ,EAAE,UAACG,GAAG,EAAEC,MAAM,EAAK;cAC5D,IAAID,GAAG,EAAE,OAAOJ,QAAQ,CAACI,GAAG,CAAC;cAC7B,IAAME,IAAI,GAAG;gBACZC,IAAI,EAAEN,QAAQ;gBACdK,IAAI,EAAEE,SAAS;gBACfC,KAAK,EAAED;cACR,CAAC;cACD;cACA;cACA,IAAI;gBACHF,IAAI,CAACA,IAAI,GAAG/B,SAAS,CAAC8B,MAAM,CAACK,QAAQ,CAAC,OAAO,CAAC,CAAC;cAChD,CAAC,CAAC,OAAOC,CAAC,EAAE;gBACX;gBACA;gBACA,IAAMC,YAAY,GAAG9B,iBAAiB,CACrCQ,QAAQ,CAACH,OAAO,CAAC0B,OAAO,EACxBZ,QAAQ,EACRX,QAAQ,CAACwB,IAAI,CACb;gBACDR,IAAI,CAACG,KAAK,GAAG,IAAIM,gBAAgB,CAACH,YAAY,EAAED,CAAC,CAACK,OAAO,CAAC;cAC3D;cACA,KAAI,CAAC5B,gBAAgB,CAACQ,GAAG,CAACG,MAAM,EAAEO,IAAI,CAAC;cACvC,OAAON,QAAQ,EAAE;YAClB,CAAC,CAAC;YACF;UACD;QACD;QACA,OAAOA,QAAQ,EAAE;MAClB,CAAC,CACD;MAEDV,QAAQ,CAACC,KAAK,CAAC0B,OAAO,CAACxB,GAAG,CAAC,oBAAoB,EAAE,UAAAM,MAAM,EAAI;QAC1D,IAAIf,IAAI,GAAG,KAAI,CAACG,OAAO,CAACH,IAAI;QAC5B,IAAIkC,UAAU,GAAG,KAAI,CAAC/B,OAAO,CAAC+B,UAAU;QACxC,IAAIC,OAAO,GACV,SAAS,IAAI,KAAI,CAAChC,OAAO,GAAG,KAAI,CAACA,OAAO,CAACgC,OAAO,GAAGX,SAAS;QAC7D,IAAI,UAAU,IAAI,KAAI,CAACrB,OAAO,EAAE;UAC/B,IAAIiC,iBAAiB,GAAG,KAAI,CAACjC,OAAO,CAACc,QAAQ;UAC7C,IAAIA,QAAQ;UACZ,IAAI,OAAOmB,iBAAiB,KAAK,QAAQ,EAAE;YAC1C,IAAMd,IAAI,GAAG,KAAI,CAAClB,gBAAgB,CAACiC,GAAG,CAACtB,MAAM,CAAC;YAC9C;YACA;YACA;YACA,IAAIO,IAAI,CAACG,KAAK,EAAE;cACf;YACD;YACAR,QAAQ,GAAGK,IAAI,CAACA,IAAI;UACrB,CAAC,MAAM;YACNL,QAAQ,GAAGmB,iBAAiB;UAC7B;UACA,IAAInB,QAAQ,EAAE;YACb,IAAI,CAACjB,IAAI,EAAEA,IAAI,GAAGiB,QAAQ,CAACjB,IAAI;YAC/B,IAAI,CAACkC,UAAU,EAAEA,UAAU,GAAGjB,QAAQ,CAACqB,IAAI;YAC3C,IAAI,CAACH,OAAO,EAAEA,OAAO,GAAGlB,QAAQ,CAACkB,OAAO;UACzC;QACD;QACA;QACA,IAAMI,SAAS,GAAG,CAAC,CAAC;QACpB,IAAMC,MAAM,GAAG,gBAAgB,GAAGxC,IAAI;QACtCuC,SAAS,CAACC,MAAM,CAAC,GAAGxC,IAAI;QACxB,IAAMU,mBAAmB,GAAGK,MAAM,CAACL,mBAAmB;QACtD,IAAIhB,2BAA2B,CAACwC,UAAU,IAAI,KAAK,EAAEK,SAAS,CAAC,CAACE,KAAK,CACpE/B,mBAAmB,CACnB;QACD,IAAIjB,4BAA4B,CAAC;UAChC+C,MAAM,EAAEA,MAAM;UACdF,IAAI,EAAE,KAAI,CAACnC,OAAO,CAACmC,IAAI;UACvBI,KAAK,EAAE,KAAI,CAACvC,OAAO,CAACuC,KAAK;UACzBb,OAAO,EAAE,KAAI,CAAC1B,OAAO,CAAC0B,OAAO,IAAIvB,QAAQ,CAACH,OAAO,CAAC0B,OAAO;UACzDM,OAAO,EAAPA,OAAO;UACPQ,UAAU,EAAE,KAAI,CAACxC,OAAO,CAACwC,UAAU;UACnCC,wBAAwB,EAAEtC,QAAQ,CAACwB;QACpC,CAAC,CAAC,CAACW,KAAK,CAAC/B,mBAAmB,CAAC;MAC9B,CAAC,CAAC;MAEFJ,QAAQ,CAACC,KAAK,CAACC,WAAW,CAACC,GAAG,CAC7B,oBAAoB,EACpB,UAACD,WAAW,EAAEO,MAAM,EAAK;QACxB,IAAI,UAAU,IAAI,KAAI,CAACZ,OAAO,EAAE;UAC/B,IAAIc,QAAQ,GAAG,KAAI,CAACd,OAAO,CAACc,QAAQ;UACpC,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;YACjC,IAAMK,IAAI,GAAG,KAAI,CAAClB,gBAAgB,CAACiC,GAAG,CAACtB,MAAM,CAAC;YAC9C;YACA;YACA,IAAIO,IAAI,CAACG,KAAK,EAAE;cACfjB,WAAW,CAACqC,MAAM,CAACC,IAAI,CAACxB,IAAI,CAACG,KAAK,CAAC;YACpC;YACAjB,WAAW,CAACuC,gBAAgB,CAACC,GAAG,CAAC/B,QAAQ,CAAC;UAC3C;QACD;MACD,CAAC,CACD;IACF;EAAC;EAAA;AAAA;AAAA,IAGIc,gBAAgB;EAAA;EAAA;EACrB,0BAAYkB,QAAQ,EAAEjB,OAAO,EAAE;IAAA;IAAA;IAC9B;IAEA,OAAKhC,IAAI,GAAG,kBAAkB;IAC9B,OAAKgC,OAAO,0BAAmBiB,QAAQ,eAAKjB,OAAO,CAAE;IAAC;EACvD;EAAC;AAAA,EAN6BrC,YAAY;AAS3CuD,MAAM,CAACC,OAAO,GAAGjD,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}