{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\nvar _objectSpread = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {Partial<ResolveRequest>} requestOptions request options\n   * @param {string | ResolveStepHook} target target\n   */\n  function ParsePlugin(source, requestOptions, target) {\n    _classCallCheck(this, ParsePlugin);\n    this.source = source;\n    this.requestOptions = requestOptions;\n    this.target = target;\n  }\n\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n  _createClass(ParsePlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var _this = this;\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"ParsePlugin\", function (request, resolveContext, callback) {\n        var parsed = resolver.parse( /** @type {string} */request.request);\n        var obj = _objectSpread(_objectSpread(_objectSpread({}, request), parsed), _this.requestOptions);\n        if (request.query && !parsed.query) {\n          obj.query = request.query;\n        }\n        if (request.fragment && !parsed.fragment) {\n          obj.fragment = request.fragment;\n        }\n        if (parsed && resolveContext.log) {\n          if (parsed.module) resolveContext.log(\"Parsed request is a module\");\n          if (parsed.directory) resolveContext.log(\"Parsed request is a directory\");\n        }\n        // There is an edge-case where a request with # can be a path or a fragment -> try both\n        if (obj.request && !obj.query && obj.fragment) {\n          var directory = obj.fragment.endsWith(\"/\");\n          var alternative = _objectSpread(_objectSpread({}, obj), {}, {\n            directory: directory,\n            request: obj.request + (obj.directory ? \"/\" : \"\") + (directory ? obj.fragment.slice(0, -1) : obj.fragment),\n            fragment: \"\"\n          });\n          resolver.doResolve(target, alternative, null, resolveContext, function (err, result) {\n            if (err) return callback(err);\n            if (result) return callback(null, result);\n            resolver.doResolve(target, obj, null, resolveContext, callback);\n          });\n          return;\n        }\n        resolver.doResolve(target, obj, null, resolveContext, callback);\n      });\n    }\n  }]);\n  return ParsePlugin;\n}();","map":{"version":3,"names":["module","exports","source","requestOptions","target","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","parsed","parse","obj","query","fragment","log","directory","endsWith","alternative","slice","doResolve","err","result"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/enhanced-resolve/lib/ParsePlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class ParsePlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {Partial<ResolveRequest>} requestOptions request options\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, requestOptions, target) {\n\t\tthis.source = source;\n\t\tthis.requestOptions = requestOptions;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"ParsePlugin\", (request, resolveContext, callback) => {\n\t\t\t\tconst parsed = resolver.parse(/** @type {string} */ (request.request));\n\t\t\t\tconst obj = { ...request, ...parsed, ...this.requestOptions };\n\t\t\t\tif (request.query && !parsed.query) {\n\t\t\t\t\tobj.query = request.query;\n\t\t\t\t}\n\t\t\t\tif (request.fragment && !parsed.fragment) {\n\t\t\t\t\tobj.fragment = request.fragment;\n\t\t\t\t}\n\t\t\t\tif (parsed && resolveContext.log) {\n\t\t\t\t\tif (parsed.module) resolveContext.log(\"Parsed request is a module\");\n\t\t\t\t\tif (parsed.directory)\n\t\t\t\t\t\tresolveContext.log(\"Parsed request is a directory\");\n\t\t\t\t}\n\t\t\t\t// There is an edge-case where a request with # can be a path or a fragment -> try both\n\t\t\t\tif (obj.request && !obj.query && obj.fragment) {\n\t\t\t\t\tconst directory = obj.fragment.endsWith(\"/\");\n\t\t\t\t\tconst alternative = {\n\t\t\t\t\t\t...obj,\n\t\t\t\t\t\tdirectory,\n\t\t\t\t\t\trequest:\n\t\t\t\t\t\t\tobj.request +\n\t\t\t\t\t\t\t(obj.directory ? \"/\" : \"\") +\n\t\t\t\t\t\t\t(directory ? obj.fragment.slice(0, -1) : obj.fragment),\n\t\t\t\t\t\tfragment: \"\"\n\t\t\t\t\t};\n\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\ttarget,\n\t\t\t\t\t\talternative,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\tif (result) return callback(null, result);\n\t\t\t\t\t\t\tresolver.doResolve(target, obj, null, resolveContext, callback);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresolver.doResolve(target, obj, null, resolveContext, callback);\n\t\t\t});\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAAA;AAAA;AAAA;AAEAA,MAAM,CAACC,OAAO;EACb;AACD;AACA;AACA;AACA;EACC,qBAAYC,MAAM,EAAEC,cAAc,EAAEC,MAAM,EAAE;IAAA;IAC3C,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,MAAM,GAAGA,MAAM;EACrB;;EAEA;AACD;AACA;AACA;EAHC;IAAA;IAAA,OAIA,eAAMC,QAAQ,EAAE;MAAA;MACf,IAAMD,MAAM,GAAGC,QAAQ,CAACC,UAAU,CAAC,IAAI,CAACF,MAAM,CAAC;MAC/CC,QAAQ,CACNE,OAAO,CAAC,IAAI,CAACL,MAAM,CAAC,CACpBM,QAAQ,CAAC,aAAa,EAAE,UAACC,OAAO,EAAEC,cAAc,EAAEC,QAAQ,EAAK;QAC/D,IAAMC,MAAM,GAAGP,QAAQ,CAACQ,KAAK,EAAC,qBAAuBJ,OAAO,CAACA,OAAO,CAAE;QACtE,IAAMK,GAAG,iDAAQL,OAAO,GAAKG,MAAM,GAAK,KAAI,CAACT,cAAc,CAAE;QAC7D,IAAIM,OAAO,CAACM,KAAK,IAAI,CAACH,MAAM,CAACG,KAAK,EAAE;UACnCD,GAAG,CAACC,KAAK,GAAGN,OAAO,CAACM,KAAK;QAC1B;QACA,IAAIN,OAAO,CAACO,QAAQ,IAAI,CAACJ,MAAM,CAACI,QAAQ,EAAE;UACzCF,GAAG,CAACE,QAAQ,GAAGP,OAAO,CAACO,QAAQ;QAChC;QACA,IAAIJ,MAAM,IAAIF,cAAc,CAACO,GAAG,EAAE;UACjC,IAAIL,MAAM,CAACZ,MAAM,EAAEU,cAAc,CAACO,GAAG,CAAC,4BAA4B,CAAC;UACnE,IAAIL,MAAM,CAACM,SAAS,EACnBR,cAAc,CAACO,GAAG,CAAC,+BAA+B,CAAC;QACrD;QACA;QACA,IAAIH,GAAG,CAACL,OAAO,IAAI,CAACK,GAAG,CAACC,KAAK,IAAID,GAAG,CAACE,QAAQ,EAAE;UAC9C,IAAME,SAAS,GAAGJ,GAAG,CAACE,QAAQ,CAACG,QAAQ,CAAC,GAAG,CAAC;UAC5C,IAAMC,WAAW,mCACbN,GAAG;YACNI,SAAS,EAATA,SAAS;YACTT,OAAO,EACNK,GAAG,CAACL,OAAO,IACVK,GAAG,CAACI,SAAS,GAAG,GAAG,GAAG,EAAE,CAAC,IACzBA,SAAS,GAAGJ,GAAG,CAACE,QAAQ,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAGP,GAAG,CAACE,QAAQ,CAAC;YACvDA,QAAQ,EAAE;UAAE,EACZ;UACDX,QAAQ,CAACiB,SAAS,CACjBlB,MAAM,EACNgB,WAAW,EACX,IAAI,EACJV,cAAc,EACd,UAACa,GAAG,EAAEC,MAAM,EAAK;YAChB,IAAID,GAAG,EAAE,OAAOZ,QAAQ,CAACY,GAAG,CAAC;YAC7B,IAAIC,MAAM,EAAE,OAAOb,QAAQ,CAAC,IAAI,EAAEa,MAAM,CAAC;YACzCnB,QAAQ,CAACiB,SAAS,CAAClB,MAAM,EAAEU,GAAG,EAAE,IAAI,EAAEJ,cAAc,EAAEC,QAAQ,CAAC;UAChE,CAAC,CACD;UACD;QACD;QACAN,QAAQ,CAACiB,SAAS,CAAClB,MAAM,EAAEU,GAAG,EAAE,IAAI,EAAEJ,cAAc,EAAEC,QAAQ,CAAC;MAChE,CAAC,CAAC;IACJ;EAAC;EAAA;AAAA,GACD"},"metadata":{},"sourceType":"script","externalDependencies":[]}