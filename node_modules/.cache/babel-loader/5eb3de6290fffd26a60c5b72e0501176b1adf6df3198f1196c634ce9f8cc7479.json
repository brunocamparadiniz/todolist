{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _require = require(\"webpack-sources\"),\n  RawSource = _require.RawSource;\nvar ConcatenationScope = require(\"../ConcatenationScope\");\nvar Generator = require(\"../Generator\");\nvar RuntimeGlobals = require(\"../RuntimeGlobals\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../Module\").ConcatenationBailoutReasonContext} ConcatenationBailoutReasonContext */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n\nvar TYPES = new Set([\"javascript\"]);\nvar AssetSourceGenerator = /*#__PURE__*/function (_Generator) {\n  _inherits(AssetSourceGenerator, _Generator);\n  var _super = _createSuper(AssetSourceGenerator);\n  function AssetSourceGenerator() {\n    _classCallCheck(this, AssetSourceGenerator);\n    return _super.apply(this, arguments);\n  }\n  _createClass(AssetSourceGenerator, [{\n    key: \"generate\",\n    value:\n    /**\n     * @param {NormalModule} module module for which the code should be generated\n     * @param {GenerateContext} generateContext context for generate\n     * @returns {Source} generated code\n     */\n    function generate(module, _ref) {\n      var concatenationScope = _ref.concatenationScope,\n        chunkGraph = _ref.chunkGraph,\n        runtimeTemplate = _ref.runtimeTemplate,\n        runtimeRequirements = _ref.runtimeRequirements;\n      var originalSource = module.originalSource();\n      if (!originalSource) {\n        return new RawSource(\"\");\n      }\n      var content = originalSource.source();\n      var encodedSource;\n      if (typeof content === \"string\") {\n        encodedSource = content;\n      } else {\n        encodedSource = content.toString(\"utf-8\");\n      }\n      var sourceContent;\n      if (concatenationScope) {\n        concatenationScope.registerNamespaceExport(ConcatenationScope.NAMESPACE_OBJECT_EXPORT);\n        sourceContent = \"\".concat(runtimeTemplate.supportsConst() ? \"const\" : \"var\", \" \").concat(ConcatenationScope.NAMESPACE_OBJECT_EXPORT, \" = \").concat(JSON.stringify(encodedSource), \";\");\n      } else {\n        runtimeRequirements.add(RuntimeGlobals.module);\n        sourceContent = \"\".concat(RuntimeGlobals.module, \".exports = \").concat(JSON.stringify(encodedSource), \";\");\n      }\n      return new RawSource(sourceContent);\n    }\n\n    /**\n     * @param {NormalModule} module module for which the bailout reason should be determined\n     * @param {ConcatenationBailoutReasonContext} context context\n     * @returns {string | undefined} reason why this module can't be concatenated, undefined when it can be concatenated\n     */\n  }, {\n    key: \"getConcatenationBailoutReason\",\n    value: function getConcatenationBailoutReason(module, context) {\n      return undefined;\n    }\n\n    /**\n     * @param {NormalModule} module fresh module\n     * @returns {Set<string>} available types (do not mutate)\n     */\n  }, {\n    key: \"getTypes\",\n    value: function getTypes(module) {\n      return TYPES;\n    }\n\n    /**\n     * @param {NormalModule} module the module\n     * @param {string=} type source type\n     * @returns {number} estimate size of the module\n     */\n  }, {\n    key: \"getSize\",\n    value: function getSize(module, type) {\n      var originalSource = module.originalSource();\n      if (!originalSource) {\n        return 0;\n      }\n\n      // Example: m.exports=\"abcd\"\n      return originalSource.size() + 12;\n    }\n  }]);\n  return AssetSourceGenerator;\n}(Generator);\nmodule.exports = AssetSourceGenerator;","map":{"version":3,"names":["require","RawSource","ConcatenationScope","Generator","RuntimeGlobals","TYPES","Set","AssetSourceGenerator","module","concatenationScope","chunkGraph","runtimeTemplate","runtimeRequirements","originalSource","content","source","encodedSource","toString","sourceContent","registerNamespaceExport","NAMESPACE_OBJECT_EXPORT","supportsConst","JSON","stringify","add","context","undefined","type","size","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/asset/AssetSourceGenerator.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\n\"use strict\";\n\nconst { RawSource } = require(\"webpack-sources\");\nconst ConcatenationScope = require(\"../ConcatenationScope\");\nconst Generator = require(\"../Generator\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../Module\").ConcatenationBailoutReasonContext} ConcatenationBailoutReasonContext */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n\nconst TYPES = new Set([\"javascript\"]);\n\nclass AssetSourceGenerator extends Generator {\n\t/**\n\t * @param {NormalModule} module module for which the code should be generated\n\t * @param {GenerateContext} generateContext context for generate\n\t * @returns {Source} generated code\n\t */\n\tgenerate(\n\t\tmodule,\n\t\t{ concatenationScope, chunkGraph, runtimeTemplate, runtimeRequirements }\n\t) {\n\t\tconst originalSource = module.originalSource();\n\n\t\tif (!originalSource) {\n\t\t\treturn new RawSource(\"\");\n\t\t}\n\n\t\tconst content = originalSource.source();\n\n\t\tlet encodedSource;\n\t\tif (typeof content === \"string\") {\n\t\t\tencodedSource = content;\n\t\t} else {\n\t\t\tencodedSource = content.toString(\"utf-8\");\n\t\t}\n\n\t\tlet sourceContent;\n\t\tif (concatenationScope) {\n\t\t\tconcatenationScope.registerNamespaceExport(\n\t\t\t\tConcatenationScope.NAMESPACE_OBJECT_EXPORT\n\t\t\t);\n\t\t\tsourceContent = `${runtimeTemplate.supportsConst() ? \"const\" : \"var\"} ${\n\t\t\t\tConcatenationScope.NAMESPACE_OBJECT_EXPORT\n\t\t\t} = ${JSON.stringify(encodedSource)};`;\n\t\t} else {\n\t\t\truntimeRequirements.add(RuntimeGlobals.module);\n\t\t\tsourceContent = `${RuntimeGlobals.module}.exports = ${JSON.stringify(\n\t\t\t\tencodedSource\n\t\t\t)};`;\n\t\t}\n\t\treturn new RawSource(sourceContent);\n\t}\n\n\t/**\n\t * @param {NormalModule} module module for which the bailout reason should be determined\n\t * @param {ConcatenationBailoutReasonContext} context context\n\t * @returns {string | undefined} reason why this module can't be concatenated, undefined when it can be concatenated\n\t */\n\tgetConcatenationBailoutReason(module, context) {\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * @param {NormalModule} module fresh module\n\t * @returns {Set<string>} available types (do not mutate)\n\t */\n\tgetTypes(module) {\n\t\treturn TYPES;\n\t}\n\n\t/**\n\t * @param {NormalModule} module the module\n\t * @param {string=} type source type\n\t * @returns {number} estimate size of the module\n\t */\n\tgetSize(module, type) {\n\t\tconst originalSource = module.originalSource();\n\n\t\tif (!originalSource) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Example: m.exports=\"abcd\"\n\t\treturn originalSource.size() + 12;\n\t}\n}\n\nmodule.exports = AssetSourceGenerator;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAAC;AAAA;AAAA;AAAA;AAEb,eAAsBA,OAAO,CAAC,iBAAiB,CAAC;EAAxCC,SAAS,YAATA,SAAS;AACjB,IAAMC,kBAAkB,GAAGF,OAAO,CAAC,uBAAuB,CAAC;AAC3D,IAAMG,SAAS,GAAGH,OAAO,CAAC,cAAc,CAAC;AACzC,IAAMI,cAAc,GAAGJ,OAAO,CAAC,mBAAmB,CAAC;;AAEnD;AACA;AACA;AACA;;AAEA,IAAMK,KAAK,GAAG,IAAIC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC;AAAC,IAEhCC,oBAAoB;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IACzB;AACD;AACA;AACA;AACA;IACC,kBACCC,MAAM,QAEL;MAAA,IADCC,kBAAkB,QAAlBA,kBAAkB;QAAEC,UAAU,QAAVA,UAAU;QAAEC,eAAe,QAAfA,eAAe;QAAEC,mBAAmB,QAAnBA,mBAAmB;MAEtE,IAAMC,cAAc,GAAGL,MAAM,CAACK,cAAc,EAAE;MAE9C,IAAI,CAACA,cAAc,EAAE;QACpB,OAAO,IAAIZ,SAAS,CAAC,EAAE,CAAC;MACzB;MAEA,IAAMa,OAAO,GAAGD,cAAc,CAACE,MAAM,EAAE;MAEvC,IAAIC,aAAa;MACjB,IAAI,OAAOF,OAAO,KAAK,QAAQ,EAAE;QAChCE,aAAa,GAAGF,OAAO;MACxB,CAAC,MAAM;QACNE,aAAa,GAAGF,OAAO,CAACG,QAAQ,CAAC,OAAO,CAAC;MAC1C;MAEA,IAAIC,aAAa;MACjB,IAAIT,kBAAkB,EAAE;QACvBA,kBAAkB,CAACU,uBAAuB,CACzCjB,kBAAkB,CAACkB,uBAAuB,CAC1C;QACDF,aAAa,aAAMP,eAAe,CAACU,aAAa,EAAE,GAAG,OAAO,GAAG,KAAK,cACnEnB,kBAAkB,CAACkB,uBAAuB,gBACrCE,IAAI,CAACC,SAAS,CAACP,aAAa,CAAC,MAAG;MACvC,CAAC,MAAM;QACNJ,mBAAmB,CAACY,GAAG,CAACpB,cAAc,CAACI,MAAM,CAAC;QAC9CU,aAAa,aAAMd,cAAc,CAACI,MAAM,wBAAcc,IAAI,CAACC,SAAS,CACnEP,aAAa,CACb,MAAG;MACL;MACA,OAAO,IAAIf,SAAS,CAACiB,aAAa,CAAC;IACpC;;IAEA;AACD;AACA;AACA;AACA;EAJC;IAAA;IAAA,OAKA,uCAA8BV,MAAM,EAAEiB,OAAO,EAAE;MAC9C,OAAOC,SAAS;IACjB;;IAEA;AACD;AACA;AACA;EAHC;IAAA;IAAA,OAIA,kBAASlB,MAAM,EAAE;MAChB,OAAOH,KAAK;IACb;;IAEA;AACD;AACA;AACA;AACA;EAJC;IAAA;IAAA,OAKA,iBAAQG,MAAM,EAAEmB,IAAI,EAAE;MACrB,IAAMd,cAAc,GAAGL,MAAM,CAACK,cAAc,EAAE;MAE9C,IAAI,CAACA,cAAc,EAAE;QACpB,OAAO,CAAC;MACT;;MAEA;MACA,OAAOA,cAAc,CAACe,IAAI,EAAE,GAAG,EAAE;IAClC;EAAC;EAAA;AAAA,EAzEiCzB,SAAS;AA4E5CK,MAAM,CAACqB,OAAO,GAAGtB,oBAAoB"},"metadata":{},"sourceType":"script","externalDependencies":[]}