{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar RuntimeGlobals = require(\"../RuntimeGlobals\");\nvar WasmChunkLoadingRuntimeModule = require(\"../wasm-sync/WasmChunkLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n// TODO webpack 6 remove\nvar FetchCompileWasmPlugin = /*#__PURE__*/function () {\n  function FetchCompileWasmPlugin(options) {\n    _classCallCheck(this, FetchCompileWasmPlugin);\n    this.options = options || {};\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  _createClass(FetchCompileWasmPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n      compiler.hooks.thisCompilation.tap(\"FetchCompileWasmPlugin\", function (compilation) {\n        var globalWasmLoading = compilation.outputOptions.wasmLoading;\n        var isEnabledForChunk = function isEnabledForChunk(chunk) {\n          var options = chunk.getEntryOptions();\n          var wasmLoading = options && options.wasmLoading !== undefined ? options.wasmLoading : globalWasmLoading;\n          return wasmLoading === \"fetch\";\n        };\n        var generateLoadBinaryCode = function generateLoadBinaryCode(path) {\n          return \"fetch(\".concat(RuntimeGlobals.publicPath, \" + \").concat(path, \")\");\n        };\n        compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.ensureChunkHandlers).tap(\"FetchCompileWasmPlugin\", function (chunk, set) {\n          if (!isEnabledForChunk(chunk)) return;\n          var chunkGraph = compilation.chunkGraph;\n          if (!chunkGraph.hasModuleInGraph(chunk, function (m) {\n            return m.type === \"webassembly/sync\";\n          })) {\n            return;\n          }\n          set.add(RuntimeGlobals.moduleCache);\n          set.add(RuntimeGlobals.publicPath);\n          compilation.addRuntimeModule(chunk, new WasmChunkLoadingRuntimeModule({\n            generateLoadBinaryCode: generateLoadBinaryCode,\n            supportsStreaming: true,\n            mangleImports: _this.options.mangleImports,\n            runtimeRequirements: set\n          }));\n        });\n      });\n    }\n  }]);\n  return FetchCompileWasmPlugin;\n}();\nmodule.exports = FetchCompileWasmPlugin;","map":{"version":3,"names":["RuntimeGlobals","require","WasmChunkLoadingRuntimeModule","FetchCompileWasmPlugin","options","compiler","hooks","thisCompilation","tap","compilation","globalWasmLoading","outputOptions","wasmLoading","isEnabledForChunk","chunk","getEntryOptions","undefined","generateLoadBinaryCode","path","publicPath","runtimeRequirementInTree","for","ensureChunkHandlers","set","chunkGraph","hasModuleInGraph","m","type","add","moduleCache","addRuntimeModule","supportsStreaming","mangleImports","runtimeRequirements","module","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/web/FetchCompileWasmPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst WasmChunkLoadingRuntimeModule = require(\"../wasm-sync/WasmChunkLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n// TODO webpack 6 remove\n\nclass FetchCompileWasmPlugin {\n\tconstructor(options) {\n\t\tthis.options = options || {};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"FetchCompileWasmPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tconst globalWasmLoading = compilation.outputOptions.wasmLoading;\n\t\t\t\tconst isEnabledForChunk = chunk => {\n\t\t\t\t\tconst options = chunk.getEntryOptions();\n\t\t\t\t\tconst wasmLoading =\n\t\t\t\t\t\toptions && options.wasmLoading !== undefined\n\t\t\t\t\t\t\t? options.wasmLoading\n\t\t\t\t\t\t\t: globalWasmLoading;\n\t\t\t\t\treturn wasmLoading === \"fetch\";\n\t\t\t\t};\n\t\t\t\tconst generateLoadBinaryCode = path =>\n\t\t\t\t\t`fetch(${RuntimeGlobals.publicPath} + ${path})`;\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.ensureChunkHandlers)\n\t\t\t\t\t.tap(\"FetchCompileWasmPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!chunkGraph.hasModuleInGraph(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tm => m.type === \"webassembly/sync\"\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tset.add(RuntimeGlobals.moduleCache);\n\t\t\t\t\t\tset.add(RuntimeGlobals.publicPath);\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew WasmChunkLoadingRuntimeModule({\n\t\t\t\t\t\t\t\tgenerateLoadBinaryCode,\n\t\t\t\t\t\t\t\tsupportsStreaming: true,\n\t\t\t\t\t\t\t\tmangleImports: this.options.mangleImports,\n\t\t\t\t\t\t\t\truntimeRequirements: set\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = FetchCompileWasmPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAAC;AAAA;AAEb,IAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACnD,IAAMC,6BAA6B,GAAGD,OAAO,CAAC,4CAA4C,CAAC;;AAE3F;;AAEA;AAAA,IAEME,sBAAsB;EAC3B,gCAAYC,OAAO,EAAE;IAAA;IACpB,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAC7B;;EAEA;AACD;AACA;AACA;AACA;EAJC;IAAA;IAAA,OAKA,eAAMC,QAAQ,EAAE;MAAA;MACfA,QAAQ,CAACC,KAAK,CAACC,eAAe,CAACC,GAAG,CACjC,wBAAwB,EACxB,UAAAC,WAAW,EAAI;QACd,IAAMC,iBAAiB,GAAGD,WAAW,CAACE,aAAa,CAACC,WAAW;QAC/D,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiB,CAAGC,KAAK,EAAI;UAClC,IAAMV,OAAO,GAAGU,KAAK,CAACC,eAAe,EAAE;UACvC,IAAMH,WAAW,GAChBR,OAAO,IAAIA,OAAO,CAACQ,WAAW,KAAKI,SAAS,GACzCZ,OAAO,CAACQ,WAAW,GACnBF,iBAAiB;UACrB,OAAOE,WAAW,KAAK,OAAO;QAC/B,CAAC;QACD,IAAMK,sBAAsB,GAAG,SAAzBA,sBAAsB,CAAGC,IAAI;UAAA,uBACzBlB,cAAc,CAACmB,UAAU,gBAAMD,IAAI;QAAA,CAAG;QAEhDT,WAAW,CAACH,KAAK,CAACc,wBAAwB,CACxCC,GAAG,CAACrB,cAAc,CAACsB,mBAAmB,CAAC,CACvCd,GAAG,CAAC,wBAAwB,EAAE,UAACM,KAAK,EAAES,GAAG,EAAK;UAC9C,IAAI,CAACV,iBAAiB,CAACC,KAAK,CAAC,EAAE;UAC/B,IAAMU,UAAU,GAAGf,WAAW,CAACe,UAAU;UACzC,IACC,CAACA,UAAU,CAACC,gBAAgB,CAC3BX,KAAK,EACL,UAAAY,CAAC;YAAA,OAAIA,CAAC,CAACC,IAAI,KAAK,kBAAkB;UAAA,EAClC,EACA;YACD;UACD;UACAJ,GAAG,CAACK,GAAG,CAAC5B,cAAc,CAAC6B,WAAW,CAAC;UACnCN,GAAG,CAACK,GAAG,CAAC5B,cAAc,CAACmB,UAAU,CAAC;UAClCV,WAAW,CAACqB,gBAAgB,CAC3BhB,KAAK,EACL,IAAIZ,6BAA6B,CAAC;YACjCe,sBAAsB,EAAtBA,sBAAsB;YACtBc,iBAAiB,EAAE,IAAI;YACvBC,aAAa,EAAE,KAAI,CAAC5B,OAAO,CAAC4B,aAAa;YACzCC,mBAAmB,EAAEV;UACtB,CAAC,CAAC,CACF;QACF,CAAC,CAAC;MACJ,CAAC,CACD;IACF;EAAC;EAAA;AAAA;AAGFW,MAAM,CAACC,OAAO,GAAGhC,sBAAsB"},"metadata":{},"sourceType":"script","externalDependencies":[]}