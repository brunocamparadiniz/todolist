{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _wrapNativeSuper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\").default;\nvar NONE = Symbol(\"not sorted\");\n\n/**\n * A subset of Set that offers sorting functionality\n * @template T item type in set\n * @extends {Set<T>}\n */\nvar SortableSet = /*#__PURE__*/function (_Set) {\n  _inherits(SortableSet, _Set);\n  var _super = _createSuper(SortableSet);\n  /**\n   * Create a new sortable set\n   * @param {Iterable<T>=} initialIterable The initial iterable value\n   * @typedef {function(T, T): number} SortFunction\n   * @param {SortFunction=} defaultSort Default sorting function\n   */\n  function SortableSet(initialIterable, defaultSort) {\n    var _this;\n    _classCallCheck(this, SortableSet);\n    _this = _super.call(this, initialIterable);\n    /** @private @type {undefined | function(T, T): number}} */\n    _this._sortFn = defaultSort;\n    /** @private @type {typeof NONE | undefined | function(T, T): number}} */\n    _this._lastActiveSortFn = NONE;\n    /** @private @type {Map<Function, any> | undefined} */\n    _this._cache = undefined;\n    /** @private @type {Map<Function, any> | undefined} */\n    _this._cacheOrderIndependent = undefined;\n    return _this;\n  }\n\n  /**\n   * @param {T} value value to add to set\n   * @returns {this} returns itself\n   */\n  _createClass(SortableSet, [{\n    key: \"add\",\n    value: function add(value) {\n      this._lastActiveSortFn = NONE;\n      this._invalidateCache();\n      this._invalidateOrderedCache();\n      _get(_getPrototypeOf(SortableSet.prototype), \"add\", this).call(this, value);\n      return this;\n    }\n\n    /**\n     * @param {T} value value to delete\n     * @returns {boolean} true if value existed in set, false otherwise\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete(value) {\n      this._invalidateCache();\n      this._invalidateOrderedCache();\n      return _get(_getPrototypeOf(SortableSet.prototype), \"delete\", this).call(this, value);\n    }\n\n    /**\n     * @returns {void}\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._invalidateCache();\n      this._invalidateOrderedCache();\n      return _get(_getPrototypeOf(SortableSet.prototype), \"clear\", this).call(this);\n    }\n\n    /**\n     * Sort with a comparer function\n     * @param {SortFunction} sortFn Sorting comparer function\n     * @returns {void}\n     */\n  }, {\n    key: \"sortWith\",\n    value: function sortWith(sortFn) {\n      if (this.size <= 1 || sortFn === this._lastActiveSortFn) {\n        // already sorted - nothing to do\n        return;\n      }\n      var sortedArray = Array.from(this).sort(sortFn);\n      _get(_getPrototypeOf(SortableSet.prototype), \"clear\", this).call(this);\n      for (var i = 0; i < sortedArray.length; i += 1) {\n        _get(_getPrototypeOf(SortableSet.prototype), \"add\", this).call(this, sortedArray[i]);\n      }\n      this._lastActiveSortFn = sortFn;\n      this._invalidateCache();\n    }\n  }, {\n    key: \"sort\",\n    value: function sort() {\n      this.sortWith(this._sortFn);\n      return this;\n    }\n\n    /**\n     * Get data from cache\n     * @template R\n     * @param {function(SortableSet<T>): R} fn function to calculate value\n     * @returns {R} returns result of fn(this), cached until set changes\n     */\n  }, {\n    key: \"getFromCache\",\n    value: function getFromCache(fn) {\n      if (this._cache === undefined) {\n        this._cache = new Map();\n      } else {\n        var result = this._cache.get(fn);\n        var data = /** @type {R} */result;\n        if (data !== undefined) {\n          return data;\n        }\n      }\n      var newData = fn(this);\n      this._cache.set(fn, newData);\n      return newData;\n    }\n\n    /**\n     * Get data from cache (ignoring sorting)\n     * @template R\n     * @param {function(SortableSet<T>): R} fn function to calculate value\n     * @returns {R} returns result of fn(this), cached until set changes\n     */\n  }, {\n    key: \"getFromUnorderedCache\",\n    value: function getFromUnorderedCache(fn) {\n      if (this._cacheOrderIndependent === undefined) {\n        this._cacheOrderIndependent = new Map();\n      } else {\n        var result = this._cacheOrderIndependent.get(fn);\n        var data = /** @type {R} */result;\n        if (data !== undefined) {\n          return data;\n        }\n      }\n      var newData = fn(this);\n      this._cacheOrderIndependent.set(fn, newData);\n      return newData;\n    }\n\n    /**\n     * @private\n     * @returns {void}\n     */\n  }, {\n    key: \"_invalidateCache\",\n    value: function _invalidateCache() {\n      if (this._cache !== undefined) {\n        this._cache.clear();\n      }\n    }\n\n    /**\n     * @private\n     * @returns {void}\n     */\n  }, {\n    key: \"_invalidateOrderedCache\",\n    value: function _invalidateOrderedCache() {\n      if (this._cacheOrderIndependent !== undefined) {\n        this._cacheOrderIndependent.clear();\n      }\n    }\n\n    /**\n     * @returns {T[]} the raw array\n     */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return Array.from(this);\n    }\n  }]);\n  return SortableSet;\n}( /*#__PURE__*/_wrapNativeSuper(Set));\nmodule.exports = SortableSet;","map":{"version":3,"names":["NONE","Symbol","SortableSet","initialIterable","defaultSort","_sortFn","_lastActiveSortFn","_cache","undefined","_cacheOrderIndependent","value","_invalidateCache","_invalidateOrderedCache","sortFn","size","sortedArray","Array","from","sort","i","length","sortWith","fn","Map","result","get","data","newData","set","clear","Set","module","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/util/SortableSet.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst NONE = Symbol(\"not sorted\");\n\n/**\n * A subset of Set that offers sorting functionality\n * @template T item type in set\n * @extends {Set<T>}\n */\nclass SortableSet extends Set {\n\t/**\n\t * Create a new sortable set\n\t * @param {Iterable<T>=} initialIterable The initial iterable value\n\t * @typedef {function(T, T): number} SortFunction\n\t * @param {SortFunction=} defaultSort Default sorting function\n\t */\n\tconstructor(initialIterable, defaultSort) {\n\t\tsuper(initialIterable);\n\t\t/** @private @type {undefined | function(T, T): number}} */\n\t\tthis._sortFn = defaultSort;\n\t\t/** @private @type {typeof NONE | undefined | function(T, T): number}} */\n\t\tthis._lastActiveSortFn = NONE;\n\t\t/** @private @type {Map<Function, any> | undefined} */\n\t\tthis._cache = undefined;\n\t\t/** @private @type {Map<Function, any> | undefined} */\n\t\tthis._cacheOrderIndependent = undefined;\n\t}\n\n\t/**\n\t * @param {T} value value to add to set\n\t * @returns {this} returns itself\n\t */\n\tadd(value) {\n\t\tthis._lastActiveSortFn = NONE;\n\t\tthis._invalidateCache();\n\t\tthis._invalidateOrderedCache();\n\t\tsuper.add(value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param {T} value value to delete\n\t * @returns {boolean} true if value existed in set, false otherwise\n\t */\n\tdelete(value) {\n\t\tthis._invalidateCache();\n\t\tthis._invalidateOrderedCache();\n\t\treturn super.delete(value);\n\t}\n\n\t/**\n\t * @returns {void}\n\t */\n\tclear() {\n\t\tthis._invalidateCache();\n\t\tthis._invalidateOrderedCache();\n\t\treturn super.clear();\n\t}\n\n\t/**\n\t * Sort with a comparer function\n\t * @param {SortFunction} sortFn Sorting comparer function\n\t * @returns {void}\n\t */\n\tsortWith(sortFn) {\n\t\tif (this.size <= 1 || sortFn === this._lastActiveSortFn) {\n\t\t\t// already sorted - nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\tconst sortedArray = Array.from(this).sort(sortFn);\n\t\tsuper.clear();\n\t\tfor (let i = 0; i < sortedArray.length; i += 1) {\n\t\t\tsuper.add(sortedArray[i]);\n\t\t}\n\t\tthis._lastActiveSortFn = sortFn;\n\t\tthis._invalidateCache();\n\t}\n\n\tsort() {\n\t\tthis.sortWith(this._sortFn);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get data from cache\n\t * @template R\n\t * @param {function(SortableSet<T>): R} fn function to calculate value\n\t * @returns {R} returns result of fn(this), cached until set changes\n\t */\n\tgetFromCache(fn) {\n\t\tif (this._cache === undefined) {\n\t\t\tthis._cache = new Map();\n\t\t} else {\n\t\t\tconst result = this._cache.get(fn);\n\t\t\tconst data = /** @type {R} */ (result);\n\t\t\tif (data !== undefined) {\n\t\t\t\treturn data;\n\t\t\t}\n\t\t}\n\t\tconst newData = fn(this);\n\t\tthis._cache.set(fn, newData);\n\t\treturn newData;\n\t}\n\n\t/**\n\t * Get data from cache (ignoring sorting)\n\t * @template R\n\t * @param {function(SortableSet<T>): R} fn function to calculate value\n\t * @returns {R} returns result of fn(this), cached until set changes\n\t */\n\tgetFromUnorderedCache(fn) {\n\t\tif (this._cacheOrderIndependent === undefined) {\n\t\t\tthis._cacheOrderIndependent = new Map();\n\t\t} else {\n\t\t\tconst result = this._cacheOrderIndependent.get(fn);\n\t\t\tconst data = /** @type {R} */ (result);\n\t\t\tif (data !== undefined) {\n\t\t\t\treturn data;\n\t\t\t}\n\t\t}\n\t\tconst newData = fn(this);\n\t\tthis._cacheOrderIndependent.set(fn, newData);\n\t\treturn newData;\n\t}\n\n\t/**\n\t * @private\n\t * @returns {void}\n\t */\n\t_invalidateCache() {\n\t\tif (this._cache !== undefined) {\n\t\t\tthis._cache.clear();\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @returns {void}\n\t */\n\t_invalidateOrderedCache() {\n\t\tif (this._cacheOrderIndependent !== undefined) {\n\t\t\tthis._cacheOrderIndependent.clear();\n\t\t}\n\t}\n\n\t/**\n\t * @returns {T[]} the raw array\n\t */\n\ttoJSON() {\n\t\treturn Array.from(this);\n\t}\n}\n\nmodule.exports = SortableSet;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEb,IAAMA,IAAI,GAAGC,MAAM,CAAC,YAAY,CAAC;;AAEjC;AACA;AACA;AACA;AACA;AAJA,IAKMC,WAAW;EAAA;EAAA;EAChB;AACD;AACA;AACA;AACA;AACA;EACC,qBAAYC,eAAe,EAAEC,WAAW,EAAE;IAAA;IAAA;IACzC,0BAAMD,eAAe;IACrB;IACA,MAAKE,OAAO,GAAGD,WAAW;IAC1B;IACA,MAAKE,iBAAiB,GAAGN,IAAI;IAC7B;IACA,MAAKO,MAAM,GAAGC,SAAS;IACvB;IACA,MAAKC,sBAAsB,GAAGD,SAAS;IAAC;EACzC;;EAEA;AACD;AACA;AACA;EAHC;IAAA;IAAA,OAIA,aAAIE,KAAK,EAAE;MACV,IAAI,CAACJ,iBAAiB,GAAGN,IAAI;MAC7B,IAAI,CAACW,gBAAgB,EAAE;MACvB,IAAI,CAACC,uBAAuB,EAAE;MAC9B,qEAAUF,KAAK;MACf,OAAO,IAAI;IACZ;;IAEA;AACD;AACA;AACA;EAHC;IAAA;IAAA,OAIA,iBAAOA,KAAK,EAAE;MACb,IAAI,CAACC,gBAAgB,EAAE;MACvB,IAAI,CAACC,uBAAuB,EAAE;MAC9B,+EAAoBF,KAAK;IAC1B;;IAEA;AACD;AACA;EAFC;IAAA;IAAA,OAGA,iBAAQ;MACP,IAAI,CAACC,gBAAgB,EAAE;MACvB,IAAI,CAACC,uBAAuB,EAAE;MAC9B;IACD;;IAEA;AACD;AACA;AACA;AACA;EAJC;IAAA;IAAA,OAKA,kBAASC,MAAM,EAAE;MAChB,IAAI,IAAI,CAACC,IAAI,IAAI,CAAC,IAAID,MAAM,KAAK,IAAI,CAACP,iBAAiB,EAAE;QACxD;QACA;MACD;MAEA,IAAMS,WAAW,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC,CAACC,IAAI,CAACL,MAAM,CAAC;MACjD;MACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,WAAW,CAACK,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;QAC/C,qEAAUJ,WAAW,CAACI,CAAC,CAAC;MACzB;MACA,IAAI,CAACb,iBAAiB,GAAGO,MAAM;MAC/B,IAAI,CAACF,gBAAgB,EAAE;IACxB;EAAC;IAAA;IAAA,OAED,gBAAO;MACN,IAAI,CAACU,QAAQ,CAAC,IAAI,CAAChB,OAAO,CAAC;MAC3B,OAAO,IAAI;IACZ;;IAEA;AACD;AACA;AACA;AACA;AACA;EALC;IAAA;IAAA,OAMA,sBAAaiB,EAAE,EAAE;MAChB,IAAI,IAAI,CAACf,MAAM,KAAKC,SAAS,EAAE;QAC9B,IAAI,CAACD,MAAM,GAAG,IAAIgB,GAAG,EAAE;MACxB,CAAC,MAAM;QACN,IAAMC,MAAM,GAAG,IAAI,CAACjB,MAAM,CAACkB,GAAG,CAACH,EAAE,CAAC;QAClC,IAAMI,IAAI,GAAG,gBAAkBF,MAAO;QACtC,IAAIE,IAAI,KAAKlB,SAAS,EAAE;UACvB,OAAOkB,IAAI;QACZ;MACD;MACA,IAAMC,OAAO,GAAGL,EAAE,CAAC,IAAI,CAAC;MACxB,IAAI,CAACf,MAAM,CAACqB,GAAG,CAACN,EAAE,EAAEK,OAAO,CAAC;MAC5B,OAAOA,OAAO;IACf;;IAEA;AACD;AACA;AACA;AACA;AACA;EALC;IAAA;IAAA,OAMA,+BAAsBL,EAAE,EAAE;MACzB,IAAI,IAAI,CAACb,sBAAsB,KAAKD,SAAS,EAAE;QAC9C,IAAI,CAACC,sBAAsB,GAAG,IAAIc,GAAG,EAAE;MACxC,CAAC,MAAM;QACN,IAAMC,MAAM,GAAG,IAAI,CAACf,sBAAsB,CAACgB,GAAG,CAACH,EAAE,CAAC;QAClD,IAAMI,IAAI,GAAG,gBAAkBF,MAAO;QACtC,IAAIE,IAAI,KAAKlB,SAAS,EAAE;UACvB,OAAOkB,IAAI;QACZ;MACD;MACA,IAAMC,OAAO,GAAGL,EAAE,CAAC,IAAI,CAAC;MACxB,IAAI,CAACb,sBAAsB,CAACmB,GAAG,CAACN,EAAE,EAAEK,OAAO,CAAC;MAC5C,OAAOA,OAAO;IACf;;IAEA;AACD;AACA;AACA;EAHC;IAAA;IAAA,OAIA,4BAAmB;MAClB,IAAI,IAAI,CAACpB,MAAM,KAAKC,SAAS,EAAE;QAC9B,IAAI,CAACD,MAAM,CAACsB,KAAK,EAAE;MACpB;IACD;;IAEA;AACD;AACA;AACA;EAHC;IAAA;IAAA,OAIA,mCAA0B;MACzB,IAAI,IAAI,CAACpB,sBAAsB,KAAKD,SAAS,EAAE;QAC9C,IAAI,CAACC,sBAAsB,CAACoB,KAAK,EAAE;MACpC;IACD;;IAEA;AACD;AACA;EAFC;IAAA;IAAA,OAGA,kBAAS;MACR,OAAOb,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC;IACxB;EAAC;EAAA;AAAA,iCA9IwBa,GAAG;AAiJ7BC,MAAM,CAACC,OAAO,GAAG9B,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}