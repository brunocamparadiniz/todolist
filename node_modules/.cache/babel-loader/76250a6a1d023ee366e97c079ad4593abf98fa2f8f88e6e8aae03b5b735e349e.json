{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nvar _slicedToArray = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _objectSpread = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _require = require(\"tapable\"),\n  SyncBailHook = _require.SyncBailHook;\nvar _require2 = require(\"webpack-sources\"),\n  RawSource = _require2.RawSource;\nvar ChunkGraph = require(\"./ChunkGraph\");\nvar Compilation = require(\"./Compilation\");\nvar HotUpdateChunk = require(\"./HotUpdateChunk\");\nvar NormalModule = require(\"./NormalModule\");\nvar RuntimeGlobals = require(\"./RuntimeGlobals\");\nvar WebpackError = require(\"./WebpackError\");\nvar ConstDependency = require(\"./dependencies/ConstDependency\");\nvar ImportMetaHotAcceptDependency = require(\"./dependencies/ImportMetaHotAcceptDependency\");\nvar ImportMetaHotDeclineDependency = require(\"./dependencies/ImportMetaHotDeclineDependency\");\nvar ModuleHotAcceptDependency = require(\"./dependencies/ModuleHotAcceptDependency\");\nvar ModuleHotDeclineDependency = require(\"./dependencies/ModuleHotDeclineDependency\");\nvar HotModuleReplacementRuntimeModule = require(\"./hmr/HotModuleReplacementRuntimeModule\");\nvar JavascriptParser = require(\"./javascript/JavascriptParser\");\nvar _require3 = require(\"./javascript/JavascriptParserHelpers\"),\n  evaluateToIdentifier = _require3.evaluateToIdentifier;\nvar _require4 = require(\"./util/SetHelpers\"),\n  find = _require4.find,\n  isSubset = _require4.isSubset;\nvar TupleSet = require(\"./util/TupleSet\");\nvar _require5 = require(\"./util/comparators\"),\n  compareModulesById = _require5.compareModulesById;\nvar _require6 = require(\"./util/runtime\"),\n  getRuntimeKey = _require6.getRuntimeKey,\n  keyToRuntime = _require6.keyToRuntime,\n  forEachRuntime = _require6.forEachRuntime,\n  mergeRuntimeOwned = _require6.mergeRuntimeOwned,\n  subtractRuntime = _require6.subtractRuntime,\n  intersectRuntime = _require6.intersectRuntime;\n\n/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./Compilation\").AssetInfo} AssetInfo */\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./RuntimeModule\")} RuntimeModule */\n/** @typedef {import(\"./util/runtime\").RuntimeSpec} RuntimeSpec */\n\n/**\n * @typedef {Object} HMRJavascriptParserHooks\n * @property {SyncBailHook<[TODO, string[]], void>} hotAcceptCallback\n * @property {SyncBailHook<[TODO, string[]], void>} hotAcceptWithoutCallback\n */\n\n/** @type {WeakMap<JavascriptParser, HMRJavascriptParserHooks>} */\nvar parserHooksMap = new WeakMap();\nvar HotModuleReplacementPlugin = /*#__PURE__*/function () {\n  function HotModuleReplacementPlugin(options) {\n    _classCallCheck(this, HotModuleReplacementPlugin);\n    this.options = options || {};\n  }\n\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  _createClass(HotModuleReplacementPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var backCompat = compiler._backCompat;\n      if (compiler.options.output.strictModuleErrorHandling === undefined) compiler.options.output.strictModuleErrorHandling = true;\n      var runtimeRequirements = [RuntimeGlobals.module];\n      var createAcceptHandler = function createAcceptHandler(parser, ParamDependency) {\n        var _HotModuleReplacement = HotModuleReplacementPlugin.getParserHooks(parser),\n          hotAcceptCallback = _HotModuleReplacement.hotAcceptCallback,\n          hotAcceptWithoutCallback = _HotModuleReplacement.hotAcceptWithoutCallback;\n        return function (expr) {\n          var module = parser.state.module;\n          var dep = new ConstDependency(\"\".concat(module.moduleArgument, \".hot.accept\"), expr.callee.range, runtimeRequirements);\n          dep.loc = expr.loc;\n          module.addPresentationalDependency(dep);\n          module.buildInfo.moduleConcatenationBailout = \"Hot Module Replacement\";\n          if (expr.arguments.length >= 1) {\n            var arg = parser.evaluateExpression(expr.arguments[0]);\n            var params = [];\n            var requests = [];\n            if (arg.isString()) {\n              params = [arg];\n            } else if (arg.isArray()) {\n              params = arg.items.filter(function (param) {\n                return param.isString();\n              });\n            }\n            if (params.length > 0) {\n              params.forEach(function (param, idx) {\n                var request = param.string;\n                var dep = new ParamDependency(request, param.range);\n                dep.optional = true;\n                dep.loc = Object.create(expr.loc);\n                dep.loc.index = idx;\n                module.addDependency(dep);\n                requests.push(request);\n              });\n              if (expr.arguments.length > 1) {\n                hotAcceptCallback.call(expr.arguments[1], requests);\n                for (var i = 1; i < expr.arguments.length; i++) {\n                  parser.walkExpression(expr.arguments[i]);\n                }\n                return true;\n              } else {\n                hotAcceptWithoutCallback.call(expr, requests);\n                return true;\n              }\n            }\n          }\n          parser.walkExpressions(expr.arguments);\n          return true;\n        };\n      };\n      var createDeclineHandler = function createDeclineHandler(parser, ParamDependency) {\n        return function (expr) {\n          var module = parser.state.module;\n          var dep = new ConstDependency(\"\".concat(module.moduleArgument, \".hot.decline\"), expr.callee.range, runtimeRequirements);\n          dep.loc = expr.loc;\n          module.addPresentationalDependency(dep);\n          module.buildInfo.moduleConcatenationBailout = \"Hot Module Replacement\";\n          if (expr.arguments.length === 1) {\n            var arg = parser.evaluateExpression(expr.arguments[0]);\n            var params = [];\n            if (arg.isString()) {\n              params = [arg];\n            } else if (arg.isArray()) {\n              params = arg.items.filter(function (param) {\n                return param.isString();\n              });\n            }\n            params.forEach(function (param, idx) {\n              var dep = new ParamDependency(param.string, param.range);\n              dep.optional = true;\n              dep.loc = Object.create(expr.loc);\n              dep.loc.index = idx;\n              module.addDependency(dep);\n            });\n          }\n          return true;\n        };\n      };\n      var createHMRExpressionHandler = function createHMRExpressionHandler(parser) {\n        return function (expr) {\n          var module = parser.state.module;\n          var dep = new ConstDependency(\"\".concat(module.moduleArgument, \".hot\"), expr.range, runtimeRequirements);\n          dep.loc = expr.loc;\n          module.addPresentationalDependency(dep);\n          module.buildInfo.moduleConcatenationBailout = \"Hot Module Replacement\";\n          return true;\n        };\n      };\n      var applyModuleHot = function applyModuleHot(parser) {\n        parser.hooks.evaluateIdentifier.for(\"module.hot\").tap({\n          name: \"HotModuleReplacementPlugin\",\n          before: \"NodeStuffPlugin\"\n        }, function (expr) {\n          return evaluateToIdentifier(\"module.hot\", \"module\", function () {\n            return [\"hot\"];\n          }, true)(expr);\n        });\n        parser.hooks.call.for(\"module.hot.accept\").tap(\"HotModuleReplacementPlugin\", createAcceptHandler(parser, ModuleHotAcceptDependency));\n        parser.hooks.call.for(\"module.hot.decline\").tap(\"HotModuleReplacementPlugin\", createDeclineHandler(parser, ModuleHotDeclineDependency));\n        parser.hooks.expression.for(\"module.hot\").tap(\"HotModuleReplacementPlugin\", createHMRExpressionHandler(parser));\n      };\n      var applyImportMetaHot = function applyImportMetaHot(parser) {\n        parser.hooks.evaluateIdentifier.for(\"import.meta.webpackHot\").tap(\"HotModuleReplacementPlugin\", function (expr) {\n          return evaluateToIdentifier(\"import.meta.webpackHot\", \"import.meta\", function () {\n            return [\"webpackHot\"];\n          }, true)(expr);\n        });\n        parser.hooks.call.for(\"import.meta.webpackHot.accept\").tap(\"HotModuleReplacementPlugin\", createAcceptHandler(parser, ImportMetaHotAcceptDependency));\n        parser.hooks.call.for(\"import.meta.webpackHot.decline\").tap(\"HotModuleReplacementPlugin\", createDeclineHandler(parser, ImportMetaHotDeclineDependency));\n        parser.hooks.expression.for(\"import.meta.webpackHot\").tap(\"HotModuleReplacementPlugin\", createHMRExpressionHandler(parser));\n      };\n      compiler.hooks.compilation.tap(\"HotModuleReplacementPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        // This applies the HMR plugin only to the targeted compiler\n        // It should not affect child compilations\n        if (compilation.compiler !== compiler) return;\n\n        //#region module.hot.* API\n        compilation.dependencyFactories.set(ModuleHotAcceptDependency, normalModuleFactory);\n        compilation.dependencyTemplates.set(ModuleHotAcceptDependency, new ModuleHotAcceptDependency.Template());\n        compilation.dependencyFactories.set(ModuleHotDeclineDependency, normalModuleFactory);\n        compilation.dependencyTemplates.set(ModuleHotDeclineDependency, new ModuleHotDeclineDependency.Template());\n        //#endregion\n\n        //#region import.meta.webpackHot.* API\n        compilation.dependencyFactories.set(ImportMetaHotAcceptDependency, normalModuleFactory);\n        compilation.dependencyTemplates.set(ImportMetaHotAcceptDependency, new ImportMetaHotAcceptDependency.Template());\n        compilation.dependencyFactories.set(ImportMetaHotDeclineDependency, normalModuleFactory);\n        compilation.dependencyTemplates.set(ImportMetaHotDeclineDependency, new ImportMetaHotDeclineDependency.Template());\n        //#endregion\n\n        var hotIndex = 0;\n        var fullHashChunkModuleHashes = {};\n        var chunkModuleHashes = {};\n        compilation.hooks.record.tap(\"HotModuleReplacementPlugin\", function (compilation, records) {\n          if (records.hash === compilation.hash) return;\n          var chunkGraph = compilation.chunkGraph;\n          records.hash = compilation.hash;\n          records.hotIndex = hotIndex;\n          records.fullHashChunkModuleHashes = fullHashChunkModuleHashes;\n          records.chunkModuleHashes = chunkModuleHashes;\n          records.chunkHashes = {};\n          records.chunkRuntime = {};\n          var _iterator = _createForOfIteratorHelper(compilation.chunks),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var chunk = _step.value;\n              records.chunkHashes[chunk.id] = chunk.hash;\n              records.chunkRuntime[chunk.id] = getRuntimeKey(chunk.runtime);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n          records.chunkModuleIds = {};\n          var _iterator2 = _createForOfIteratorHelper(compilation.chunks),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _chunk = _step2.value;\n              records.chunkModuleIds[_chunk.id] = Array.from(chunkGraph.getOrderedChunkModulesIterable(_chunk, compareModulesById(chunkGraph)), function (m) {\n                return chunkGraph.getModuleId(m);\n              });\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        });\n        /** @type {TupleSet<[Module, Chunk]>} */\n        var updatedModules = new TupleSet();\n        /** @type {TupleSet<[Module, Chunk]>} */\n        var fullHashModules = new TupleSet();\n        /** @type {TupleSet<[Module, RuntimeSpec]>} */\n        var nonCodeGeneratedModules = new TupleSet();\n        compilation.hooks.fullHash.tap(\"HotModuleReplacementPlugin\", function (hash) {\n          var chunkGraph = compilation.chunkGraph;\n          var records = compilation.records;\n          var _iterator3 = _createForOfIteratorHelper(compilation.chunks),\n            _step3;\n          try {\n            var _loop = function _loop() {\n              var chunk = _step3.value;\n              var getModuleHash = function getModuleHash(module) {\n                if (compilation.codeGenerationResults.has(module, chunk.runtime)) {\n                  return compilation.codeGenerationResults.getHash(module, chunk.runtime);\n                } else {\n                  nonCodeGeneratedModules.add(module, chunk.runtime);\n                  return chunkGraph.getModuleHash(module, chunk.runtime);\n                }\n              };\n              var fullHashModulesInThisChunk = chunkGraph.getChunkFullHashModulesSet(chunk);\n              if (fullHashModulesInThisChunk !== undefined) {\n                var _iterator4 = _createForOfIteratorHelper(fullHashModulesInThisChunk),\n                  _step4;\n                try {\n                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                    var _module = _step4.value;\n                    fullHashModules.add(_module, chunk);\n                  }\n                } catch (err) {\n                  _iterator4.e(err);\n                } finally {\n                  _iterator4.f();\n                }\n              }\n              var modules = chunkGraph.getChunkModulesIterable(chunk);\n              if (modules !== undefined) {\n                if (records.chunkModuleHashes) {\n                  if (fullHashModulesInThisChunk !== undefined) {\n                    var _iterator5 = _createForOfIteratorHelper(modules),\n                      _step5;\n                    try {\n                      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                        var _module2 = _step5.value;\n                        var key = \"\".concat(chunk.id, \"|\").concat(_module2.identifier());\n                        var _hash = getModuleHash(_module2);\n                        if (fullHashModulesInThisChunk.has( /** @type {RuntimeModule} */_module2)) {\n                          if (records.fullHashChunkModuleHashes[key] !== _hash) {\n                            updatedModules.add(_module2, chunk);\n                          }\n                          fullHashChunkModuleHashes[key] = _hash;\n                        } else {\n                          if (records.chunkModuleHashes[key] !== _hash) {\n                            updatedModules.add(_module2, chunk);\n                          }\n                          chunkModuleHashes[key] = _hash;\n                        }\n                      }\n                    } catch (err) {\n                      _iterator5.e(err);\n                    } finally {\n                      _iterator5.f();\n                    }\n                  } else {\n                    var _iterator6 = _createForOfIteratorHelper(modules),\n                      _step6;\n                    try {\n                      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                        var _module3 = _step6.value;\n                        var _key = \"\".concat(chunk.id, \"|\").concat(_module3.identifier());\n                        var _hash2 = getModuleHash(_module3);\n                        if (records.chunkModuleHashes[_key] !== _hash2) {\n                          updatedModules.add(_module3, chunk);\n                        }\n                        chunkModuleHashes[_key] = _hash2;\n                      }\n                    } catch (err) {\n                      _iterator6.e(err);\n                    } finally {\n                      _iterator6.f();\n                    }\n                  }\n                } else {\n                  if (fullHashModulesInThisChunk !== undefined) {\n                    var _iterator7 = _createForOfIteratorHelper(modules),\n                      _step7;\n                    try {\n                      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                        var _module4 = _step7.value;\n                        var _key2 = \"\".concat(chunk.id, \"|\").concat(_module4.identifier());\n                        var _hash3 = getModuleHash(_module4);\n                        if (fullHashModulesInThisChunk.has( /** @type {RuntimeModule} */_module4)) {\n                          fullHashChunkModuleHashes[_key2] = _hash3;\n                        } else {\n                          chunkModuleHashes[_key2] = _hash3;\n                        }\n                      }\n                    } catch (err) {\n                      _iterator7.e(err);\n                    } finally {\n                      _iterator7.f();\n                    }\n                  } else {\n                    var _iterator8 = _createForOfIteratorHelper(modules),\n                      _step8;\n                    try {\n                      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                        var _module5 = _step8.value;\n                        var _key3 = \"\".concat(chunk.id, \"|\").concat(_module5.identifier());\n                        var _hash4 = getModuleHash(_module5);\n                        chunkModuleHashes[_key3] = _hash4;\n                      }\n                    } catch (err) {\n                      _iterator8.e(err);\n                    } finally {\n                      _iterator8.f();\n                    }\n                  }\n                }\n              }\n            };\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              _loop();\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n          hotIndex = records.hotIndex || 0;\n          if (updatedModules.size > 0) hotIndex++;\n          hash.update(\"\".concat(hotIndex));\n        });\n        compilation.hooks.processAssets.tap({\n          name: \"HotModuleReplacementPlugin\",\n          stage: Compilation.PROCESS_ASSETS_STAGE_ADDITIONAL\n        }, function () {\n          var chunkGraph = compilation.chunkGraph;\n          var records = compilation.records;\n          if (records.hash === compilation.hash) return;\n          if (!records.chunkModuleHashes || !records.chunkHashes || !records.chunkModuleIds) {\n            return;\n          }\n          var _iterator9 = _createForOfIteratorHelper(fullHashModules),\n            _step9;\n          try {\n            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n              var _step9$value = _slicedToArray(_step9.value, 2),\n                _module7 = _step9$value[0],\n                chunk = _step9$value[1];\n              var _key4 = \"\".concat(chunk.id, \"|\").concat(_module7.identifier());\n              var hash = nonCodeGeneratedModules.has(_module7, chunk.runtime) ? chunkGraph.getModuleHash(_module7, chunk.runtime) : compilation.codeGenerationResults.getHash(_module7, chunk.runtime);\n              if (records.chunkModuleHashes[_key4] !== hash) {\n                updatedModules.add(_module7, chunk);\n              }\n              chunkModuleHashes[_key4] = hash;\n            }\n\n            /** @type {Map<string, { updatedChunkIds: Set<string|number>, removedChunkIds: Set<string|number>, removedModules: Set<Module>, filename: string, assetInfo: AssetInfo }>} */\n          } catch (err) {\n            _iterator9.e(err);\n          } finally {\n            _iterator9.f();\n          }\n          var hotUpdateMainContentByRuntime = new Map();\n          var allOldRuntime;\n          for (var _i = 0, _Object$keys = Object.keys(records.chunkRuntime); _i < _Object$keys.length; _i++) {\n            var key = _Object$keys[_i];\n            var runtime = keyToRuntime(records.chunkRuntime[key]);\n            allOldRuntime = mergeRuntimeOwned(allOldRuntime, runtime);\n          }\n          forEachRuntime(allOldRuntime, function (runtime) {\n            var _compilation$getPathW = compilation.getPathWithInfo(compilation.outputOptions.hotUpdateMainFilename, {\n                hash: records.hash,\n                runtime: runtime\n              }),\n              filename = _compilation$getPathW.path,\n              assetInfo = _compilation$getPathW.info;\n            hotUpdateMainContentByRuntime.set(runtime, {\n              updatedChunkIds: new Set(),\n              removedChunkIds: new Set(),\n              removedModules: new Set(),\n              filename: filename,\n              assetInfo: assetInfo\n            });\n          });\n          if (hotUpdateMainContentByRuntime.size === 0) return;\n\n          // Create a list of all active modules to verify which modules are removed completely\n          /** @type {Map<number|string, Module>} */\n          var allModules = new Map();\n          var _iterator10 = _createForOfIteratorHelper(compilation.modules),\n            _step10;\n          try {\n            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n              var _module8 = _step10.value;\n              var id = chunkGraph.getModuleId(_module8);\n              allModules.set(id, _module8);\n            }\n\n            // List of completely removed modules\n            /** @type {Set<string | number>} */\n          } catch (err) {\n            _iterator10.e(err);\n          } finally {\n            _iterator10.f();\n          }\n          var completelyRemovedModules = new Set();\n          var _loop2 = function _loop2() {\n            var key = _Object$keys2[_i2];\n            var oldRuntime = keyToRuntime(records.chunkRuntime[key]);\n            /** @type {Module[]} */\n            var remainingModules = [];\n            // Check which modules are removed\n            var _iterator11 = _createForOfIteratorHelper(records.chunkModuleIds[key]),\n              _step11;\n            try {\n              for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n                var id = _step11.value;\n                var _module6 = allModules.get(id);\n                if (_module6 === undefined) {\n                  completelyRemovedModules.add(id);\n                } else {\n                  remainingModules.push(_module6);\n                }\n              }\n            } catch (err) {\n              _iterator11.e(err);\n            } finally {\n              _iterator11.f();\n            }\n            var chunkId;\n            var newModules;\n            var newRuntimeModules;\n            var newFullHashModules;\n            var newDependentHashModules;\n            var newRuntime;\n            var removedFromRuntime;\n            var currentChunk = find(compilation.chunks, function (chunk) {\n              return \"\".concat(chunk.id) === key;\n            });\n            if (currentChunk) {\n              chunkId = currentChunk.id;\n              newRuntime = intersectRuntime(currentChunk.runtime, allOldRuntime);\n              if (newRuntime === undefined) return \"continue\";\n              newModules = chunkGraph.getChunkModules(currentChunk).filter(function (module) {\n                return updatedModules.has(module, currentChunk);\n              });\n              newRuntimeModules = Array.from(chunkGraph.getChunkRuntimeModulesIterable(currentChunk)).filter(function (module) {\n                return updatedModules.has(module, currentChunk);\n              });\n              var _fullHashModules = chunkGraph.getChunkFullHashModulesIterable(currentChunk);\n              newFullHashModules = _fullHashModules && Array.from(_fullHashModules).filter(function (module) {\n                return updatedModules.has(module, currentChunk);\n              });\n              var dependentHashModules = chunkGraph.getChunkDependentHashModulesIterable(currentChunk);\n              newDependentHashModules = dependentHashModules && Array.from(dependentHashModules).filter(function (module) {\n                return updatedModules.has(module, currentChunk);\n              });\n              removedFromRuntime = subtractRuntime(oldRuntime, newRuntime);\n            } else {\n              // chunk has completely removed\n              chunkId = \"\".concat(+key) === key ? +key : key;\n              removedFromRuntime = oldRuntime;\n              newRuntime = oldRuntime;\n            }\n            if (removedFromRuntime) {\n              // chunk was removed from some runtimes\n              forEachRuntime(removedFromRuntime, function (runtime) {\n                hotUpdateMainContentByRuntime.get(runtime).removedChunkIds.add(chunkId);\n              });\n              // dispose modules from the chunk in these runtimes\n              // where they are no longer in this runtime\n              var _iterator12 = _createForOfIteratorHelper(remainingModules),\n                _step12;\n              try {\n                var _loop3 = function _loop3() {\n                  var module = _step12.value;\n                  var moduleKey = \"\".concat(key, \"|\").concat(module.identifier());\n                  var oldHash = records.chunkModuleHashes[moduleKey];\n                  var runtimes = chunkGraph.getModuleRuntimes(module);\n                  if (oldRuntime === newRuntime && runtimes.has(newRuntime)) {\n                    // Module is still in the same runtime combination\n                    var hash = nonCodeGeneratedModules.has(module, newRuntime) ? chunkGraph.getModuleHash(module, newRuntime) : compilation.codeGenerationResults.getHash(module, newRuntime);\n                    if (hash !== oldHash) {\n                      if (module.type === \"runtime\") {\n                        newRuntimeModules = newRuntimeModules || [];\n                        newRuntimeModules.push( /** @type {RuntimeModule} */module);\n                      } else {\n                        newModules = newModules || [];\n                        newModules.push(module);\n                      }\n                    }\n                  } else {\n                    // module is no longer in this runtime combination\n                    // We (incorrectly) assume that it's not in an overlapping runtime combination\n                    // and dispose it from the main runtimes the chunk was removed from\n                    forEachRuntime(removedFromRuntime, function (runtime) {\n                      // If the module is still used in this runtime, do not dispose it\n                      // This could create a bad runtime state where the module is still loaded,\n                      // but no chunk which contains it. This means we don't receive further HMR updates\n                      // to this module and that's bad.\n                      // TODO force load one of the chunks which contains the module\n                      var _iterator13 = _createForOfIteratorHelper(runtimes),\n                        _step13;\n                      try {\n                        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n                          var moduleRuntime = _step13.value;\n                          if (typeof moduleRuntime === \"string\") {\n                            if (moduleRuntime === runtime) return;\n                          } else if (moduleRuntime !== undefined) {\n                            if (moduleRuntime.has(runtime)) return;\n                          }\n                        }\n                      } catch (err) {\n                        _iterator13.e(err);\n                      } finally {\n                        _iterator13.f();\n                      }\n                      hotUpdateMainContentByRuntime.get(runtime).removedModules.add(module);\n                    });\n                  }\n                };\n                for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n                  _loop3();\n                }\n              } catch (err) {\n                _iterator12.e(err);\n              } finally {\n                _iterator12.f();\n              }\n            }\n            if (newModules && newModules.length > 0 || newRuntimeModules && newRuntimeModules.length > 0) {\n              var hotUpdateChunk = new HotUpdateChunk();\n              if (backCompat) ChunkGraph.setChunkGraphForChunk(hotUpdateChunk, chunkGraph);\n              hotUpdateChunk.id = chunkId;\n              hotUpdateChunk.runtime = newRuntime;\n              if (currentChunk) {\n                var _iterator14 = _createForOfIteratorHelper(currentChunk.groupsIterable),\n                  _step14;\n                try {\n                  for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n                    var group = _step14.value;\n                    hotUpdateChunk.addGroup(group);\n                  }\n                } catch (err) {\n                  _iterator14.e(err);\n                } finally {\n                  _iterator14.f();\n                }\n              }\n              chunkGraph.attachModules(hotUpdateChunk, newModules || []);\n              chunkGraph.attachRuntimeModules(hotUpdateChunk, newRuntimeModules || []);\n              if (newFullHashModules) {\n                chunkGraph.attachFullHashModules(hotUpdateChunk, newFullHashModules);\n              }\n              if (newDependentHashModules) {\n                chunkGraph.attachDependentHashModules(hotUpdateChunk, newDependentHashModules);\n              }\n              var renderManifest = compilation.getRenderManifest({\n                chunk: hotUpdateChunk,\n                hash: records.hash,\n                fullHash: records.hash,\n                outputOptions: compilation.outputOptions,\n                moduleTemplates: compilation.moduleTemplates,\n                dependencyTemplates: compilation.dependencyTemplates,\n                codeGenerationResults: compilation.codeGenerationResults,\n                runtimeTemplate: compilation.runtimeTemplate,\n                moduleGraph: compilation.moduleGraph,\n                chunkGraph: chunkGraph\n              });\n              var _iterator15 = _createForOfIteratorHelper(renderManifest),\n                _step15;\n              try {\n                for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n                  var entry = _step15.value;\n                  /** @type {string} */\n                  var filename = void 0;\n                  /** @type {AssetInfo} */\n                  var assetInfo = void 0;\n                  if (\"filename\" in entry) {\n                    filename = entry.filename;\n                    assetInfo = entry.info;\n                  } else {\n                    var _compilation$getPathW2 = compilation.getPathWithInfo(entry.filenameTemplate, entry.pathOptions);\n                    filename = _compilation$getPathW2.path;\n                    assetInfo = _compilation$getPathW2.info;\n                  }\n                  var source = entry.render();\n                  compilation.additionalChunkAssets.push(filename);\n                  compilation.emitAsset(filename, source, _objectSpread({\n                    hotModuleReplacement: true\n                  }, assetInfo));\n                  if (currentChunk) {\n                    currentChunk.files.add(filename);\n                    compilation.hooks.chunkAsset.call(currentChunk, filename);\n                  }\n                }\n              } catch (err) {\n                _iterator15.e(err);\n              } finally {\n                _iterator15.f();\n              }\n              forEachRuntime(newRuntime, function (runtime) {\n                hotUpdateMainContentByRuntime.get(runtime).updatedChunkIds.add(chunkId);\n              });\n            }\n          };\n          for (var _i2 = 0, _Object$keys2 = Object.keys(records.chunkHashes); _i2 < _Object$keys2.length; _i2++) {\n            var _ret = _loop2();\n            if (_ret === \"continue\") continue;\n          }\n          var completelyRemovedModulesArray = Array.from(completelyRemovedModules);\n          var hotUpdateMainContentByFilename = new Map();\n          var _iterator16 = _createForOfIteratorHelper(hotUpdateMainContentByRuntime.values()),\n            _step16;\n          try {\n            for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n              var _step16$value = _step16.value,\n                removedChunkIds = _step16$value.removedChunkIds,\n                removedModules = _step16$value.removedModules,\n                updatedChunkIds = _step16$value.updatedChunkIds,\n                filename = _step16$value.filename,\n                assetInfo = _step16$value.assetInfo;\n              var old = hotUpdateMainContentByFilename.get(filename);\n              if (old && (!isSubset(old.removedChunkIds, removedChunkIds) || !isSubset(old.removedModules, removedModules) || !isSubset(old.updatedChunkIds, updatedChunkIds))) {\n                compilation.warnings.push(new WebpackError(\"HotModuleReplacementPlugin\\nThe configured output.hotUpdateMainFilename doesn't lead to unique filenames per runtime and HMR update differs between runtimes.\\nThis might lead to incorrect runtime behavior of the applied update.\\nTo fix this, make sure to include [runtime] in the output.hotUpdateMainFilename option, or use the default config.\"));\n                var _iterator18 = _createForOfIteratorHelper(removedChunkIds),\n                  _step18;\n                try {\n                  for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n                    var chunkId = _step18.value;\n                    old.removedChunkIds.add(chunkId);\n                  }\n                } catch (err) {\n                  _iterator18.e(err);\n                } finally {\n                  _iterator18.f();\n                }\n                var _iterator19 = _createForOfIteratorHelper(removedModules),\n                  _step19;\n                try {\n                  for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n                    var _chunkId = _step19.value;\n                    old.removedModules.add(_chunkId);\n                  }\n                } catch (err) {\n                  _iterator19.e(err);\n                } finally {\n                  _iterator19.f();\n                }\n                var _iterator20 = _createForOfIteratorHelper(updatedChunkIds),\n                  _step20;\n                try {\n                  for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n                    var _chunkId2 = _step20.value;\n                    old.updatedChunkIds.add(_chunkId2);\n                  }\n                } catch (err) {\n                  _iterator20.e(err);\n                } finally {\n                  _iterator20.f();\n                }\n                continue;\n              }\n              hotUpdateMainContentByFilename.set(filename, {\n                removedChunkIds: removedChunkIds,\n                removedModules: removedModules,\n                updatedChunkIds: updatedChunkIds,\n                assetInfo: assetInfo\n              });\n            }\n          } catch (err) {\n            _iterator16.e(err);\n          } finally {\n            _iterator16.f();\n          }\n          var _iterator17 = _createForOfIteratorHelper(hotUpdateMainContentByFilename),\n            _step17;\n          try {\n            for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n              var _step17$value = _slicedToArray(_step17.value, 2),\n                _filename = _step17$value[0],\n                _step17$value$ = _step17$value[1],\n                _removedChunkIds = _step17$value$.removedChunkIds,\n                _removedModules = _step17$value$.removedModules,\n                _updatedChunkIds = _step17$value$.updatedChunkIds,\n                _assetInfo = _step17$value$.assetInfo;\n              var hotUpdateMainJson = {\n                c: Array.from(_updatedChunkIds),\n                r: Array.from(_removedChunkIds),\n                m: _removedModules.size === 0 ? completelyRemovedModulesArray : completelyRemovedModulesArray.concat(Array.from(_removedModules, function (m) {\n                  return chunkGraph.getModuleId(m);\n                }))\n              };\n              var source = new RawSource(JSON.stringify(hotUpdateMainJson));\n              compilation.emitAsset(_filename, source, _objectSpread({\n                hotModuleReplacement: true\n              }, _assetInfo));\n            }\n          } catch (err) {\n            _iterator17.e(err);\n          } finally {\n            _iterator17.f();\n          }\n        });\n        compilation.hooks.additionalTreeRuntimeRequirements.tap(\"HotModuleReplacementPlugin\", function (chunk, runtimeRequirements) {\n          runtimeRequirements.add(RuntimeGlobals.hmrDownloadManifest);\n          runtimeRequirements.add(RuntimeGlobals.hmrDownloadUpdateHandlers);\n          runtimeRequirements.add(RuntimeGlobals.interceptModuleExecution);\n          runtimeRequirements.add(RuntimeGlobals.moduleCache);\n          compilation.addRuntimeModule(chunk, new HotModuleReplacementRuntimeModule());\n        });\n        normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"HotModuleReplacementPlugin\", function (parser) {\n          applyModuleHot(parser);\n          applyImportMetaHot(parser);\n        });\n        normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"HotModuleReplacementPlugin\", function (parser) {\n          applyModuleHot(parser);\n        });\n        normalModuleFactory.hooks.parser.for(\"javascript/esm\").tap(\"HotModuleReplacementPlugin\", function (parser) {\n          applyImportMetaHot(parser);\n        });\n        NormalModule.getCompilationHooks(compilation).loader.tap(\"HotModuleReplacementPlugin\", function (context) {\n          context.hot = true;\n        });\n      });\n    }\n  }], [{\n    key: \"getParserHooks\",\n    value:\n    /**\n     * @param {JavascriptParser} parser the parser\n     * @returns {HMRJavascriptParserHooks} the attached hooks\n     */\n    function getParserHooks(parser) {\n      if (!(parser instanceof JavascriptParser)) {\n        throw new TypeError(\"The 'parser' argument must be an instance of JavascriptParser\");\n      }\n      var hooks = parserHooksMap.get(parser);\n      if (hooks === undefined) {\n        hooks = {\n          hotAcceptCallback: new SyncBailHook([\"expression\", \"requests\"]),\n          hotAcceptWithoutCallback: new SyncBailHook([\"expression\", \"requests\"])\n        };\n        parserHooksMap.set(parser, hooks);\n      }\n      return hooks;\n    }\n  }]);\n  return HotModuleReplacementPlugin;\n}();\nmodule.exports = HotModuleReplacementPlugin;","map":{"version":3,"names":["require","SyncBailHook","RawSource","ChunkGraph","Compilation","HotUpdateChunk","NormalModule","RuntimeGlobals","WebpackError","ConstDependency","ImportMetaHotAcceptDependency","ImportMetaHotDeclineDependency","ModuleHotAcceptDependency","ModuleHotDeclineDependency","HotModuleReplacementRuntimeModule","JavascriptParser","evaluateToIdentifier","find","isSubset","TupleSet","compareModulesById","getRuntimeKey","keyToRuntime","forEachRuntime","mergeRuntimeOwned","subtractRuntime","intersectRuntime","parserHooksMap","WeakMap","HotModuleReplacementPlugin","options","compiler","backCompat","_backCompat","output","strictModuleErrorHandling","undefined","runtimeRequirements","module","createAcceptHandler","parser","ParamDependency","getParserHooks","hotAcceptCallback","hotAcceptWithoutCallback","expr","state","dep","moduleArgument","callee","range","loc","addPresentationalDependency","buildInfo","moduleConcatenationBailout","arguments","length","arg","evaluateExpression","params","requests","isString","isArray","items","filter","param","forEach","idx","request","string","optional","Object","create","index","addDependency","push","call","i","walkExpression","walkExpressions","createDeclineHandler","createHMRExpressionHandler","applyModuleHot","hooks","evaluateIdentifier","for","tap","name","before","expression","applyImportMetaHot","compilation","normalModuleFactory","dependencyFactories","set","dependencyTemplates","Template","hotIndex","fullHashChunkModuleHashes","chunkModuleHashes","record","records","hash","chunkGraph","chunkHashes","chunkRuntime","chunks","chunk","id","runtime","chunkModuleIds","Array","from","getOrderedChunkModulesIterable","m","getModuleId","updatedModules","fullHashModules","nonCodeGeneratedModules","fullHash","getModuleHash","codeGenerationResults","has","getHash","add","fullHashModulesInThisChunk","getChunkFullHashModulesSet","modules","getChunkModulesIterable","key","identifier","size","update","processAssets","stage","PROCESS_ASSETS_STAGE_ADDITIONAL","hotUpdateMainContentByRuntime","Map","allOldRuntime","keys","getPathWithInfo","outputOptions","hotUpdateMainFilename","filename","path","assetInfo","info","updatedChunkIds","Set","removedChunkIds","removedModules","allModules","completelyRemovedModules","oldRuntime","remainingModules","get","chunkId","newModules","newRuntimeModules","newFullHashModules","newDependentHashModules","newRuntime","removedFromRuntime","currentChunk","getChunkModules","getChunkRuntimeModulesIterable","getChunkFullHashModulesIterable","dependentHashModules","getChunkDependentHashModulesIterable","moduleKey","oldHash","runtimes","getModuleRuntimes","type","moduleRuntime","hotUpdateChunk","setChunkGraphForChunk","groupsIterable","group","addGroup","attachModules","attachRuntimeModules","attachFullHashModules","attachDependentHashModules","renderManifest","getRenderManifest","moduleTemplates","runtimeTemplate","moduleGraph","entry","filenameTemplate","pathOptions","source","render","additionalChunkAssets","emitAsset","hotModuleReplacement","files","chunkAsset","completelyRemovedModulesArray","hotUpdateMainContentByFilename","values","old","warnings","hotUpdateMainJson","c","r","concat","JSON","stringify","additionalTreeRuntimeRequirements","hmrDownloadManifest","hmrDownloadUpdateHandlers","interceptModuleExecution","moduleCache","addRuntimeModule","getCompilationHooks","loader","context","hot","TypeError","exports"],"sources":["/Users/brunocamparadiniz/Desktop/coding/BC-AY/react/todolist/node_modules/webpack/lib/HotModuleReplacementPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { SyncBailHook } = require(\"tapable\");\nconst { RawSource } = require(\"webpack-sources\");\nconst ChunkGraph = require(\"./ChunkGraph\");\nconst Compilation = require(\"./Compilation\");\nconst HotUpdateChunk = require(\"./HotUpdateChunk\");\nconst NormalModule = require(\"./NormalModule\");\nconst RuntimeGlobals = require(\"./RuntimeGlobals\");\nconst WebpackError = require(\"./WebpackError\");\nconst ConstDependency = require(\"./dependencies/ConstDependency\");\nconst ImportMetaHotAcceptDependency = require(\"./dependencies/ImportMetaHotAcceptDependency\");\nconst ImportMetaHotDeclineDependency = require(\"./dependencies/ImportMetaHotDeclineDependency\");\nconst ModuleHotAcceptDependency = require(\"./dependencies/ModuleHotAcceptDependency\");\nconst ModuleHotDeclineDependency = require(\"./dependencies/ModuleHotDeclineDependency\");\nconst HotModuleReplacementRuntimeModule = require(\"./hmr/HotModuleReplacementRuntimeModule\");\nconst JavascriptParser = require(\"./javascript/JavascriptParser\");\nconst {\n\tevaluateToIdentifier\n} = require(\"./javascript/JavascriptParserHelpers\");\nconst { find, isSubset } = require(\"./util/SetHelpers\");\nconst TupleSet = require(\"./util/TupleSet\");\nconst { compareModulesById } = require(\"./util/comparators\");\nconst {\n\tgetRuntimeKey,\n\tkeyToRuntime,\n\tforEachRuntime,\n\tmergeRuntimeOwned,\n\tsubtractRuntime,\n\tintersectRuntime\n} = require(\"./util/runtime\");\n\n/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./Compilation\").AssetInfo} AssetInfo */\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./RuntimeModule\")} RuntimeModule */\n/** @typedef {import(\"./util/runtime\").RuntimeSpec} RuntimeSpec */\n\n/**\n * @typedef {Object} HMRJavascriptParserHooks\n * @property {SyncBailHook<[TODO, string[]], void>} hotAcceptCallback\n * @property {SyncBailHook<[TODO, string[]], void>} hotAcceptWithoutCallback\n */\n\n/** @type {WeakMap<JavascriptParser, HMRJavascriptParserHooks>} */\nconst parserHooksMap = new WeakMap();\n\nclass HotModuleReplacementPlugin {\n\t/**\n\t * @param {JavascriptParser} parser the parser\n\t * @returns {HMRJavascriptParserHooks} the attached hooks\n\t */\n\tstatic getParserHooks(parser) {\n\t\tif (!(parser instanceof JavascriptParser)) {\n\t\t\tthrow new TypeError(\n\t\t\t\t\"The 'parser' argument must be an instance of JavascriptParser\"\n\t\t\t);\n\t\t}\n\t\tlet hooks = parserHooksMap.get(parser);\n\t\tif (hooks === undefined) {\n\t\t\thooks = {\n\t\t\t\thotAcceptCallback: new SyncBailHook([\"expression\", \"requests\"]),\n\t\t\t\thotAcceptWithoutCallback: new SyncBailHook([\"expression\", \"requests\"])\n\t\t\t};\n\t\t\tparserHooksMap.set(parser, hooks);\n\t\t}\n\t\treturn hooks;\n\t}\n\n\tconstructor(options) {\n\t\tthis.options = options || {};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst { _backCompat: backCompat } = compiler;\n\t\tif (compiler.options.output.strictModuleErrorHandling === undefined)\n\t\t\tcompiler.options.output.strictModuleErrorHandling = true;\n\t\tconst runtimeRequirements = [RuntimeGlobals.module];\n\n\t\tconst createAcceptHandler = (parser, ParamDependency) => {\n\t\t\tconst { hotAcceptCallback, hotAcceptWithoutCallback } =\n\t\t\t\tHotModuleReplacementPlugin.getParserHooks(parser);\n\n\t\t\treturn expr => {\n\t\t\t\tconst module = parser.state.module;\n\t\t\t\tconst dep = new ConstDependency(\n\t\t\t\t\t`${module.moduleArgument}.hot.accept`,\n\t\t\t\t\texpr.callee.range,\n\t\t\t\t\truntimeRequirements\n\t\t\t\t);\n\t\t\t\tdep.loc = expr.loc;\n\t\t\t\tmodule.addPresentationalDependency(dep);\n\t\t\t\tmodule.buildInfo.moduleConcatenationBailout = \"Hot Module Replacement\";\n\t\t\t\tif (expr.arguments.length >= 1) {\n\t\t\t\t\tconst arg = parser.evaluateExpression(expr.arguments[0]);\n\t\t\t\t\tlet params = [];\n\t\t\t\t\tlet requests = [];\n\t\t\t\t\tif (arg.isString()) {\n\t\t\t\t\t\tparams = [arg];\n\t\t\t\t\t} else if (arg.isArray()) {\n\t\t\t\t\t\tparams = arg.items.filter(param => param.isString());\n\t\t\t\t\t}\n\t\t\t\t\tif (params.length > 0) {\n\t\t\t\t\t\tparams.forEach((param, idx) => {\n\t\t\t\t\t\t\tconst request = param.string;\n\t\t\t\t\t\t\tconst dep = new ParamDependency(request, param.range);\n\t\t\t\t\t\t\tdep.optional = true;\n\t\t\t\t\t\t\tdep.loc = Object.create(expr.loc);\n\t\t\t\t\t\t\tdep.loc.index = idx;\n\t\t\t\t\t\t\tmodule.addDependency(dep);\n\t\t\t\t\t\t\trequests.push(request);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (expr.arguments.length > 1) {\n\t\t\t\t\t\t\thotAcceptCallback.call(expr.arguments[1], requests);\n\t\t\t\t\t\t\tfor (let i = 1; i < expr.arguments.length; i++) {\n\t\t\t\t\t\t\t\tparser.walkExpression(expr.arguments[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\thotAcceptWithoutCallback.call(expr, requests);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tparser.walkExpressions(expr.arguments);\n\t\t\t\treturn true;\n\t\t\t};\n\t\t};\n\n\t\tconst createDeclineHandler = (parser, ParamDependency) => expr => {\n\t\t\tconst module = parser.state.module;\n\t\t\tconst dep = new ConstDependency(\n\t\t\t\t`${module.moduleArgument}.hot.decline`,\n\t\t\t\texpr.callee.range,\n\t\t\t\truntimeRequirements\n\t\t\t);\n\t\t\tdep.loc = expr.loc;\n\t\t\tmodule.addPresentationalDependency(dep);\n\t\t\tmodule.buildInfo.moduleConcatenationBailout = \"Hot Module Replacement\";\n\t\t\tif (expr.arguments.length === 1) {\n\t\t\t\tconst arg = parser.evaluateExpression(expr.arguments[0]);\n\t\t\t\tlet params = [];\n\t\t\t\tif (arg.isString()) {\n\t\t\t\t\tparams = [arg];\n\t\t\t\t} else if (arg.isArray()) {\n\t\t\t\t\tparams = arg.items.filter(param => param.isString());\n\t\t\t\t}\n\t\t\t\tparams.forEach((param, idx) => {\n\t\t\t\t\tconst dep = new ParamDependency(param.string, param.range);\n\t\t\t\t\tdep.optional = true;\n\t\t\t\t\tdep.loc = Object.create(expr.loc);\n\t\t\t\t\tdep.loc.index = idx;\n\t\t\t\t\tmodule.addDependency(dep);\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\n\t\tconst createHMRExpressionHandler = parser => expr => {\n\t\t\tconst module = parser.state.module;\n\t\t\tconst dep = new ConstDependency(\n\t\t\t\t`${module.moduleArgument}.hot`,\n\t\t\t\texpr.range,\n\t\t\t\truntimeRequirements\n\t\t\t);\n\t\t\tdep.loc = expr.loc;\n\t\t\tmodule.addPresentationalDependency(dep);\n\t\t\tmodule.buildInfo.moduleConcatenationBailout = \"Hot Module Replacement\";\n\t\t\treturn true;\n\t\t};\n\n\t\tconst applyModuleHot = parser => {\n\t\t\tparser.hooks.evaluateIdentifier.for(\"module.hot\").tap(\n\t\t\t\t{\n\t\t\t\t\tname: \"HotModuleReplacementPlugin\",\n\t\t\t\t\tbefore: \"NodeStuffPlugin\"\n\t\t\t\t},\n\t\t\t\texpr => {\n\t\t\t\t\treturn evaluateToIdentifier(\n\t\t\t\t\t\t\"module.hot\",\n\t\t\t\t\t\t\"module\",\n\t\t\t\t\t\t() => [\"hot\"],\n\t\t\t\t\t\ttrue\n\t\t\t\t\t)(expr);\n\t\t\t\t}\n\t\t\t);\n\t\t\tparser.hooks.call\n\t\t\t\t.for(\"module.hot.accept\")\n\t\t\t\t.tap(\n\t\t\t\t\t\"HotModuleReplacementPlugin\",\n\t\t\t\t\tcreateAcceptHandler(parser, ModuleHotAcceptDependency)\n\t\t\t\t);\n\t\t\tparser.hooks.call\n\t\t\t\t.for(\"module.hot.decline\")\n\t\t\t\t.tap(\n\t\t\t\t\t\"HotModuleReplacementPlugin\",\n\t\t\t\t\tcreateDeclineHandler(parser, ModuleHotDeclineDependency)\n\t\t\t\t);\n\t\t\tparser.hooks.expression\n\t\t\t\t.for(\"module.hot\")\n\t\t\t\t.tap(\"HotModuleReplacementPlugin\", createHMRExpressionHandler(parser));\n\t\t};\n\n\t\tconst applyImportMetaHot = parser => {\n\t\t\tparser.hooks.evaluateIdentifier\n\t\t\t\t.for(\"import.meta.webpackHot\")\n\t\t\t\t.tap(\"HotModuleReplacementPlugin\", expr => {\n\t\t\t\t\treturn evaluateToIdentifier(\n\t\t\t\t\t\t\"import.meta.webpackHot\",\n\t\t\t\t\t\t\"import.meta\",\n\t\t\t\t\t\t() => [\"webpackHot\"],\n\t\t\t\t\t\ttrue\n\t\t\t\t\t)(expr);\n\t\t\t\t});\n\t\t\tparser.hooks.call\n\t\t\t\t.for(\"import.meta.webpackHot.accept\")\n\t\t\t\t.tap(\n\t\t\t\t\t\"HotModuleReplacementPlugin\",\n\t\t\t\t\tcreateAcceptHandler(parser, ImportMetaHotAcceptDependency)\n\t\t\t\t);\n\t\t\tparser.hooks.call\n\t\t\t\t.for(\"import.meta.webpackHot.decline\")\n\t\t\t\t.tap(\n\t\t\t\t\t\"HotModuleReplacementPlugin\",\n\t\t\t\t\tcreateDeclineHandler(parser, ImportMetaHotDeclineDependency)\n\t\t\t\t);\n\t\t\tparser.hooks.expression\n\t\t\t\t.for(\"import.meta.webpackHot\")\n\t\t\t\t.tap(\"HotModuleReplacementPlugin\", createHMRExpressionHandler(parser));\n\t\t};\n\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"HotModuleReplacementPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\t// This applies the HMR plugin only to the targeted compiler\n\t\t\t\t// It should not affect child compilations\n\t\t\t\tif (compilation.compiler !== compiler) return;\n\n\t\t\t\t//#region module.hot.* API\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tModuleHotAcceptDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tModuleHotAcceptDependency,\n\t\t\t\t\tnew ModuleHotAcceptDependency.Template()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tModuleHotDeclineDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tModuleHotDeclineDependency,\n\t\t\t\t\tnew ModuleHotDeclineDependency.Template()\n\t\t\t\t);\n\t\t\t\t//#endregion\n\n\t\t\t\t//#region import.meta.webpackHot.* API\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tImportMetaHotAcceptDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tImportMetaHotAcceptDependency,\n\t\t\t\t\tnew ImportMetaHotAcceptDependency.Template()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tImportMetaHotDeclineDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tImportMetaHotDeclineDependency,\n\t\t\t\t\tnew ImportMetaHotDeclineDependency.Template()\n\t\t\t\t);\n\t\t\t\t//#endregion\n\n\t\t\t\tlet hotIndex = 0;\n\t\t\t\tconst fullHashChunkModuleHashes = {};\n\t\t\t\tconst chunkModuleHashes = {};\n\n\t\t\t\tcompilation.hooks.record.tap(\n\t\t\t\t\t\"HotModuleReplacementPlugin\",\n\t\t\t\t\t(compilation, records) => {\n\t\t\t\t\t\tif (records.hash === compilation.hash) return;\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\t\trecords.hash = compilation.hash;\n\t\t\t\t\t\trecords.hotIndex = hotIndex;\n\t\t\t\t\t\trecords.fullHashChunkModuleHashes = fullHashChunkModuleHashes;\n\t\t\t\t\t\trecords.chunkModuleHashes = chunkModuleHashes;\n\t\t\t\t\t\trecords.chunkHashes = {};\n\t\t\t\t\t\trecords.chunkRuntime = {};\n\t\t\t\t\t\tfor (const chunk of compilation.chunks) {\n\t\t\t\t\t\t\trecords.chunkHashes[chunk.id] = chunk.hash;\n\t\t\t\t\t\t\trecords.chunkRuntime[chunk.id] = getRuntimeKey(chunk.runtime);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trecords.chunkModuleIds = {};\n\t\t\t\t\t\tfor (const chunk of compilation.chunks) {\n\t\t\t\t\t\t\trecords.chunkModuleIds[chunk.id] = Array.from(\n\t\t\t\t\t\t\t\tchunkGraph.getOrderedChunkModulesIterable(\n\t\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\t\tcompareModulesById(chunkGraph)\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tm => chunkGraph.getModuleId(m)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\t/** @type {TupleSet<[Module, Chunk]>} */\n\t\t\t\tconst updatedModules = new TupleSet();\n\t\t\t\t/** @type {TupleSet<[Module, Chunk]>} */\n\t\t\t\tconst fullHashModules = new TupleSet();\n\t\t\t\t/** @type {TupleSet<[Module, RuntimeSpec]>} */\n\t\t\t\tconst nonCodeGeneratedModules = new TupleSet();\n\t\t\t\tcompilation.hooks.fullHash.tap(\"HotModuleReplacementPlugin\", hash => {\n\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\tconst records = compilation.records;\n\t\t\t\t\tfor (const chunk of compilation.chunks) {\n\t\t\t\t\t\tconst getModuleHash = module => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tcompilation.codeGenerationResults.has(module, chunk.runtime)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treturn compilation.codeGenerationResults.getHash(\n\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\tchunk.runtime\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnonCodeGeneratedModules.add(module, chunk.runtime);\n\t\t\t\t\t\t\t\treturn chunkGraph.getModuleHash(module, chunk.runtime);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst fullHashModulesInThisChunk =\n\t\t\t\t\t\t\tchunkGraph.getChunkFullHashModulesSet(chunk);\n\t\t\t\t\t\tif (fullHashModulesInThisChunk !== undefined) {\n\t\t\t\t\t\t\tfor (const module of fullHashModulesInThisChunk) {\n\t\t\t\t\t\t\t\tfullHashModules.add(module, chunk);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst modules = chunkGraph.getChunkModulesIterable(chunk);\n\t\t\t\t\t\tif (modules !== undefined) {\n\t\t\t\t\t\t\tif (records.chunkModuleHashes) {\n\t\t\t\t\t\t\t\tif (fullHashModulesInThisChunk !== undefined) {\n\t\t\t\t\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\t\t\t\t\tconst key = `${chunk.id}|${module.identifier()}`;\n\t\t\t\t\t\t\t\t\t\tconst hash = getModuleHash(module);\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\tfullHashModulesInThisChunk.has(\n\t\t\t\t\t\t\t\t\t\t\t\t/** @type {RuntimeModule} */ (module)\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tif (records.fullHashChunkModuleHashes[key] !== hash) {\n\t\t\t\t\t\t\t\t\t\t\t\tupdatedModules.add(module, chunk);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tfullHashChunkModuleHashes[key] = hash;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tif (records.chunkModuleHashes[key] !== hash) {\n\t\t\t\t\t\t\t\t\t\t\t\tupdatedModules.add(module, chunk);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tchunkModuleHashes[key] = hash;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\t\t\t\t\tconst key = `${chunk.id}|${module.identifier()}`;\n\t\t\t\t\t\t\t\t\t\tconst hash = getModuleHash(module);\n\t\t\t\t\t\t\t\t\t\tif (records.chunkModuleHashes[key] !== hash) {\n\t\t\t\t\t\t\t\t\t\t\tupdatedModules.add(module, chunk);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tchunkModuleHashes[key] = hash;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (fullHashModulesInThisChunk !== undefined) {\n\t\t\t\t\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\t\t\t\t\tconst key = `${chunk.id}|${module.identifier()}`;\n\t\t\t\t\t\t\t\t\t\tconst hash = getModuleHash(module);\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\tfullHashModulesInThisChunk.has(\n\t\t\t\t\t\t\t\t\t\t\t\t/** @type {RuntimeModule} */ (module)\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tfullHashChunkModuleHashes[key] = hash;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tchunkModuleHashes[key] = hash;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\t\t\t\t\tconst key = `${chunk.id}|${module.identifier()}`;\n\t\t\t\t\t\t\t\t\t\tconst hash = getModuleHash(module);\n\t\t\t\t\t\t\t\t\t\tchunkModuleHashes[key] = hash;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\thotIndex = records.hotIndex || 0;\n\t\t\t\t\tif (updatedModules.size > 0) hotIndex++;\n\n\t\t\t\t\thash.update(`${hotIndex}`);\n\t\t\t\t});\n\t\t\t\tcompilation.hooks.processAssets.tap(\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"HotModuleReplacementPlugin\",\n\t\t\t\t\t\tstage: Compilation.PROCESS_ASSETS_STAGE_ADDITIONAL\n\t\t\t\t\t},\n\t\t\t\t\t() => {\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\t\tconst records = compilation.records;\n\t\t\t\t\t\tif (records.hash === compilation.hash) return;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!records.chunkModuleHashes ||\n\t\t\t\t\t\t\t!records.chunkHashes ||\n\t\t\t\t\t\t\t!records.chunkModuleIds\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (const [module, chunk] of fullHashModules) {\n\t\t\t\t\t\t\tconst key = `${chunk.id}|${module.identifier()}`;\n\t\t\t\t\t\t\tconst hash = nonCodeGeneratedModules.has(module, chunk.runtime)\n\t\t\t\t\t\t\t\t? chunkGraph.getModuleHash(module, chunk.runtime)\n\t\t\t\t\t\t\t\t: compilation.codeGenerationResults.getHash(\n\t\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\t\tchunk.runtime\n\t\t\t\t\t\t\t\t  );\n\t\t\t\t\t\t\tif (records.chunkModuleHashes[key] !== hash) {\n\t\t\t\t\t\t\t\tupdatedModules.add(module, chunk);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tchunkModuleHashes[key] = hash;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/** @type {Map<string, { updatedChunkIds: Set<string|number>, removedChunkIds: Set<string|number>, removedModules: Set<Module>, filename: string, assetInfo: AssetInfo }>} */\n\t\t\t\t\t\tconst hotUpdateMainContentByRuntime = new Map();\n\t\t\t\t\t\tlet allOldRuntime;\n\t\t\t\t\t\tfor (const key of Object.keys(records.chunkRuntime)) {\n\t\t\t\t\t\t\tconst runtime = keyToRuntime(records.chunkRuntime[key]);\n\t\t\t\t\t\t\tallOldRuntime = mergeRuntimeOwned(allOldRuntime, runtime);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tforEachRuntime(allOldRuntime, runtime => {\n\t\t\t\t\t\t\tconst { path: filename, info: assetInfo } =\n\t\t\t\t\t\t\t\tcompilation.getPathWithInfo(\n\t\t\t\t\t\t\t\t\tcompilation.outputOptions.hotUpdateMainFilename,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\thash: records.hash,\n\t\t\t\t\t\t\t\t\t\truntime\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\thotUpdateMainContentByRuntime.set(runtime, {\n\t\t\t\t\t\t\t\tupdatedChunkIds: new Set(),\n\t\t\t\t\t\t\t\tremovedChunkIds: new Set(),\n\t\t\t\t\t\t\t\tremovedModules: new Set(),\n\t\t\t\t\t\t\t\tfilename,\n\t\t\t\t\t\t\t\tassetInfo\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (hotUpdateMainContentByRuntime.size === 0) return;\n\n\t\t\t\t\t\t// Create a list of all active modules to verify which modules are removed completely\n\t\t\t\t\t\t/** @type {Map<number|string, Module>} */\n\t\t\t\t\t\tconst allModules = new Map();\n\t\t\t\t\t\tfor (const module of compilation.modules) {\n\t\t\t\t\t\t\tconst id = chunkGraph.getModuleId(module);\n\t\t\t\t\t\t\tallModules.set(id, module);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// List of completely removed modules\n\t\t\t\t\t\t/** @type {Set<string | number>} */\n\t\t\t\t\t\tconst completelyRemovedModules = new Set();\n\n\t\t\t\t\t\tfor (const key of Object.keys(records.chunkHashes)) {\n\t\t\t\t\t\t\tconst oldRuntime = keyToRuntime(records.chunkRuntime[key]);\n\t\t\t\t\t\t\t/** @type {Module[]} */\n\t\t\t\t\t\t\tconst remainingModules = [];\n\t\t\t\t\t\t\t// Check which modules are removed\n\t\t\t\t\t\t\tfor (const id of records.chunkModuleIds[key]) {\n\t\t\t\t\t\t\t\tconst module = allModules.get(id);\n\t\t\t\t\t\t\t\tif (module === undefined) {\n\t\t\t\t\t\t\t\t\tcompletelyRemovedModules.add(id);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tremainingModules.push(module);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet chunkId;\n\t\t\t\t\t\t\tlet newModules;\n\t\t\t\t\t\t\tlet newRuntimeModules;\n\t\t\t\t\t\t\tlet newFullHashModules;\n\t\t\t\t\t\t\tlet newDependentHashModules;\n\t\t\t\t\t\t\tlet newRuntime;\n\t\t\t\t\t\t\tlet removedFromRuntime;\n\t\t\t\t\t\t\tconst currentChunk = find(\n\t\t\t\t\t\t\t\tcompilation.chunks,\n\t\t\t\t\t\t\t\tchunk => `${chunk.id}` === key\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (currentChunk) {\n\t\t\t\t\t\t\t\tchunkId = currentChunk.id;\n\t\t\t\t\t\t\t\tnewRuntime = intersectRuntime(\n\t\t\t\t\t\t\t\t\tcurrentChunk.runtime,\n\t\t\t\t\t\t\t\t\tallOldRuntime\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tif (newRuntime === undefined) continue;\n\t\t\t\t\t\t\t\tnewModules = chunkGraph\n\t\t\t\t\t\t\t\t\t.getChunkModules(currentChunk)\n\t\t\t\t\t\t\t\t\t.filter(module => updatedModules.has(module, currentChunk));\n\t\t\t\t\t\t\t\tnewRuntimeModules = Array.from(\n\t\t\t\t\t\t\t\t\tchunkGraph.getChunkRuntimeModulesIterable(currentChunk)\n\t\t\t\t\t\t\t\t).filter(module => updatedModules.has(module, currentChunk));\n\t\t\t\t\t\t\t\tconst fullHashModules =\n\t\t\t\t\t\t\t\t\tchunkGraph.getChunkFullHashModulesIterable(currentChunk);\n\t\t\t\t\t\t\t\tnewFullHashModules =\n\t\t\t\t\t\t\t\t\tfullHashModules &&\n\t\t\t\t\t\t\t\t\tArray.from(fullHashModules).filter(module =>\n\t\t\t\t\t\t\t\t\t\tupdatedModules.has(module, currentChunk)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconst dependentHashModules =\n\t\t\t\t\t\t\t\t\tchunkGraph.getChunkDependentHashModulesIterable(currentChunk);\n\t\t\t\t\t\t\t\tnewDependentHashModules =\n\t\t\t\t\t\t\t\t\tdependentHashModules &&\n\t\t\t\t\t\t\t\t\tArray.from(dependentHashModules).filter(module =>\n\t\t\t\t\t\t\t\t\t\tupdatedModules.has(module, currentChunk)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tremovedFromRuntime = subtractRuntime(oldRuntime, newRuntime);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// chunk has completely removed\n\t\t\t\t\t\t\t\tchunkId = `${+key}` === key ? +key : key;\n\t\t\t\t\t\t\t\tremovedFromRuntime = oldRuntime;\n\t\t\t\t\t\t\t\tnewRuntime = oldRuntime;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (removedFromRuntime) {\n\t\t\t\t\t\t\t\t// chunk was removed from some runtimes\n\t\t\t\t\t\t\t\tforEachRuntime(removedFromRuntime, runtime => {\n\t\t\t\t\t\t\t\t\thotUpdateMainContentByRuntime\n\t\t\t\t\t\t\t\t\t\t.get(runtime)\n\t\t\t\t\t\t\t\t\t\t.removedChunkIds.add(chunkId);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t// dispose modules from the chunk in these runtimes\n\t\t\t\t\t\t\t\t// where they are no longer in this runtime\n\t\t\t\t\t\t\t\tfor (const module of remainingModules) {\n\t\t\t\t\t\t\t\t\tconst moduleKey = `${key}|${module.identifier()}`;\n\t\t\t\t\t\t\t\t\tconst oldHash = records.chunkModuleHashes[moduleKey];\n\t\t\t\t\t\t\t\t\tconst runtimes = chunkGraph.getModuleRuntimes(module);\n\t\t\t\t\t\t\t\t\tif (oldRuntime === newRuntime && runtimes.has(newRuntime)) {\n\t\t\t\t\t\t\t\t\t\t// Module is still in the same runtime combination\n\t\t\t\t\t\t\t\t\t\tconst hash = nonCodeGeneratedModules.has(module, newRuntime)\n\t\t\t\t\t\t\t\t\t\t\t? chunkGraph.getModuleHash(module, newRuntime)\n\t\t\t\t\t\t\t\t\t\t\t: compilation.codeGenerationResults.getHash(\n\t\t\t\t\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewRuntime\n\t\t\t\t\t\t\t\t\t\t\t  );\n\t\t\t\t\t\t\t\t\t\tif (hash !== oldHash) {\n\t\t\t\t\t\t\t\t\t\t\tif (module.type === \"runtime\") {\n\t\t\t\t\t\t\t\t\t\t\t\tnewRuntimeModules = newRuntimeModules || [];\n\t\t\t\t\t\t\t\t\t\t\t\tnewRuntimeModules.push(\n\t\t\t\t\t\t\t\t\t\t\t\t\t/** @type {RuntimeModule} */ (module)\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tnewModules = newModules || [];\n\t\t\t\t\t\t\t\t\t\t\t\tnewModules.push(module);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t// module is no longer in this runtime combination\n\t\t\t\t\t\t\t\t\t\t// We (incorrectly) assume that it's not in an overlapping runtime combination\n\t\t\t\t\t\t\t\t\t\t// and dispose it from the main runtimes the chunk was removed from\n\t\t\t\t\t\t\t\t\t\tforEachRuntime(removedFromRuntime, runtime => {\n\t\t\t\t\t\t\t\t\t\t\t// If the module is still used in this runtime, do not dispose it\n\t\t\t\t\t\t\t\t\t\t\t// This could create a bad runtime state where the module is still loaded,\n\t\t\t\t\t\t\t\t\t\t\t// but no chunk which contains it. This means we don't receive further HMR updates\n\t\t\t\t\t\t\t\t\t\t\t// to this module and that's bad.\n\t\t\t\t\t\t\t\t\t\t\t// TODO force load one of the chunks which contains the module\n\t\t\t\t\t\t\t\t\t\t\tfor (const moduleRuntime of runtimes) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (typeof moduleRuntime === \"string\") {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (moduleRuntime === runtime) return;\n\t\t\t\t\t\t\t\t\t\t\t\t} else if (moduleRuntime !== undefined) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (moduleRuntime.has(runtime)) return;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\thotUpdateMainContentByRuntime\n\t\t\t\t\t\t\t\t\t\t\t\t.get(runtime)\n\t\t\t\t\t\t\t\t\t\t\t\t.removedModules.add(module);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(newModules && newModules.length > 0) ||\n\t\t\t\t\t\t\t\t(newRuntimeModules && newRuntimeModules.length > 0)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tconst hotUpdateChunk = new HotUpdateChunk();\n\t\t\t\t\t\t\t\tif (backCompat)\n\t\t\t\t\t\t\t\t\tChunkGraph.setChunkGraphForChunk(hotUpdateChunk, chunkGraph);\n\t\t\t\t\t\t\t\thotUpdateChunk.id = chunkId;\n\t\t\t\t\t\t\t\thotUpdateChunk.runtime = newRuntime;\n\t\t\t\t\t\t\t\tif (currentChunk) {\n\t\t\t\t\t\t\t\t\tfor (const group of currentChunk.groupsIterable)\n\t\t\t\t\t\t\t\t\t\thotUpdateChunk.addGroup(group);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tchunkGraph.attachModules(hotUpdateChunk, newModules || []);\n\t\t\t\t\t\t\t\tchunkGraph.attachRuntimeModules(\n\t\t\t\t\t\t\t\t\thotUpdateChunk,\n\t\t\t\t\t\t\t\t\tnewRuntimeModules || []\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tif (newFullHashModules) {\n\t\t\t\t\t\t\t\t\tchunkGraph.attachFullHashModules(\n\t\t\t\t\t\t\t\t\t\thotUpdateChunk,\n\t\t\t\t\t\t\t\t\t\tnewFullHashModules\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (newDependentHashModules) {\n\t\t\t\t\t\t\t\t\tchunkGraph.attachDependentHashModules(\n\t\t\t\t\t\t\t\t\t\thotUpdateChunk,\n\t\t\t\t\t\t\t\t\t\tnewDependentHashModules\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst renderManifest = compilation.getRenderManifest({\n\t\t\t\t\t\t\t\t\tchunk: hotUpdateChunk,\n\t\t\t\t\t\t\t\t\thash: records.hash,\n\t\t\t\t\t\t\t\t\tfullHash: records.hash,\n\t\t\t\t\t\t\t\t\toutputOptions: compilation.outputOptions,\n\t\t\t\t\t\t\t\t\tmoduleTemplates: compilation.moduleTemplates,\n\t\t\t\t\t\t\t\t\tdependencyTemplates: compilation.dependencyTemplates,\n\t\t\t\t\t\t\t\t\tcodeGenerationResults: compilation.codeGenerationResults,\n\t\t\t\t\t\t\t\t\truntimeTemplate: compilation.runtimeTemplate,\n\t\t\t\t\t\t\t\t\tmoduleGraph: compilation.moduleGraph,\n\t\t\t\t\t\t\t\t\tchunkGraph\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tfor (const entry of renderManifest) {\n\t\t\t\t\t\t\t\t\t/** @type {string} */\n\t\t\t\t\t\t\t\t\tlet filename;\n\t\t\t\t\t\t\t\t\t/** @type {AssetInfo} */\n\t\t\t\t\t\t\t\t\tlet assetInfo;\n\t\t\t\t\t\t\t\t\tif (\"filename\" in entry) {\n\t\t\t\t\t\t\t\t\t\tfilename = entry.filename;\n\t\t\t\t\t\t\t\t\t\tassetInfo = entry.info;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t({ path: filename, info: assetInfo } =\n\t\t\t\t\t\t\t\t\t\t\tcompilation.getPathWithInfo(\n\t\t\t\t\t\t\t\t\t\t\t\tentry.filenameTemplate,\n\t\t\t\t\t\t\t\t\t\t\t\tentry.pathOptions\n\t\t\t\t\t\t\t\t\t\t\t));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tconst source = entry.render();\n\t\t\t\t\t\t\t\t\tcompilation.additionalChunkAssets.push(filename);\n\t\t\t\t\t\t\t\t\tcompilation.emitAsset(filename, source, {\n\t\t\t\t\t\t\t\t\t\thotModuleReplacement: true,\n\t\t\t\t\t\t\t\t\t\t...assetInfo\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tif (currentChunk) {\n\t\t\t\t\t\t\t\t\t\tcurrentChunk.files.add(filename);\n\t\t\t\t\t\t\t\t\t\tcompilation.hooks.chunkAsset.call(currentChunk, filename);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tforEachRuntime(newRuntime, runtime => {\n\t\t\t\t\t\t\t\t\thotUpdateMainContentByRuntime\n\t\t\t\t\t\t\t\t\t\t.get(runtime)\n\t\t\t\t\t\t\t\t\t\t.updatedChunkIds.add(chunkId);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst completelyRemovedModulesArray = Array.from(\n\t\t\t\t\t\t\tcompletelyRemovedModules\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst hotUpdateMainContentByFilename = new Map();\n\t\t\t\t\t\tfor (const {\n\t\t\t\t\t\t\tremovedChunkIds,\n\t\t\t\t\t\t\tremovedModules,\n\t\t\t\t\t\t\tupdatedChunkIds,\n\t\t\t\t\t\t\tfilename,\n\t\t\t\t\t\t\tassetInfo\n\t\t\t\t\t\t} of hotUpdateMainContentByRuntime.values()) {\n\t\t\t\t\t\t\tconst old = hotUpdateMainContentByFilename.get(filename);\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\told &&\n\t\t\t\t\t\t\t\t(!isSubset(old.removedChunkIds, removedChunkIds) ||\n\t\t\t\t\t\t\t\t\t!isSubset(old.removedModules, removedModules) ||\n\t\t\t\t\t\t\t\t\t!isSubset(old.updatedChunkIds, updatedChunkIds))\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tcompilation.warnings.push(\n\t\t\t\t\t\t\t\t\tnew WebpackError(`HotModuleReplacementPlugin\nThe configured output.hotUpdateMainFilename doesn't lead to unique filenames per runtime and HMR update differs between runtimes.\nThis might lead to incorrect runtime behavior of the applied update.\nTo fix this, make sure to include [runtime] in the output.hotUpdateMainFilename option, or use the default config.`)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tfor (const chunkId of removedChunkIds)\n\t\t\t\t\t\t\t\t\told.removedChunkIds.add(chunkId);\n\t\t\t\t\t\t\t\tfor (const chunkId of removedModules)\n\t\t\t\t\t\t\t\t\told.removedModules.add(chunkId);\n\t\t\t\t\t\t\t\tfor (const chunkId of updatedChunkIds)\n\t\t\t\t\t\t\t\t\told.updatedChunkIds.add(chunkId);\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thotUpdateMainContentByFilename.set(filename, {\n\t\t\t\t\t\t\t\tremovedChunkIds,\n\t\t\t\t\t\t\t\tremovedModules,\n\t\t\t\t\t\t\t\tupdatedChunkIds,\n\t\t\t\t\t\t\t\tassetInfo\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (const [\n\t\t\t\t\t\t\tfilename,\n\t\t\t\t\t\t\t{ removedChunkIds, removedModules, updatedChunkIds, assetInfo }\n\t\t\t\t\t\t] of hotUpdateMainContentByFilename) {\n\t\t\t\t\t\t\tconst hotUpdateMainJson = {\n\t\t\t\t\t\t\t\tc: Array.from(updatedChunkIds),\n\t\t\t\t\t\t\t\tr: Array.from(removedChunkIds),\n\t\t\t\t\t\t\t\tm:\n\t\t\t\t\t\t\t\t\tremovedModules.size === 0\n\t\t\t\t\t\t\t\t\t\t? completelyRemovedModulesArray\n\t\t\t\t\t\t\t\t\t\t: completelyRemovedModulesArray.concat(\n\t\t\t\t\t\t\t\t\t\t\t\tArray.from(removedModules, m =>\n\t\t\t\t\t\t\t\t\t\t\t\t\tchunkGraph.getModuleId(m)\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tconst source = new RawSource(JSON.stringify(hotUpdateMainJson));\n\t\t\t\t\t\t\tcompilation.emitAsset(filename, source, {\n\t\t\t\t\t\t\t\thotModuleReplacement: true,\n\t\t\t\t\t\t\t\t...assetInfo\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tcompilation.hooks.additionalTreeRuntimeRequirements.tap(\n\t\t\t\t\t\"HotModuleReplacementPlugin\",\n\t\t\t\t\t(chunk, runtimeRequirements) => {\n\t\t\t\t\t\truntimeRequirements.add(RuntimeGlobals.hmrDownloadManifest);\n\t\t\t\t\t\truntimeRequirements.add(RuntimeGlobals.hmrDownloadUpdateHandlers);\n\t\t\t\t\t\truntimeRequirements.add(RuntimeGlobals.interceptModuleExecution);\n\t\t\t\t\t\truntimeRequirements.add(RuntimeGlobals.moduleCache);\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew HotModuleReplacementRuntimeModule()\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/auto\")\n\t\t\t\t\t.tap(\"HotModuleReplacementPlugin\", parser => {\n\t\t\t\t\t\tapplyModuleHot(parser);\n\t\t\t\t\t\tapplyImportMetaHot(parser);\n\t\t\t\t\t});\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/dynamic\")\n\t\t\t\t\t.tap(\"HotModuleReplacementPlugin\", parser => {\n\t\t\t\t\t\tapplyModuleHot(parser);\n\t\t\t\t\t});\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/esm\")\n\t\t\t\t\t.tap(\"HotModuleReplacementPlugin\", parser => {\n\t\t\t\t\t\tapplyImportMetaHot(parser);\n\t\t\t\t\t});\n\n\t\t\t\tNormalModule.getCompilationHooks(compilation).loader.tap(\n\t\t\t\t\t\"HotModuleReplacementPlugin\",\n\t\t\t\t\tcontext => {\n\t\t\t\t\t\tcontext.hot = true;\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = HotModuleReplacementPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}